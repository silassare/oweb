import { isNil, isValidAge, forEach, logger } from './utils';
import OWebFormError from './OWebFormError';
import OWebDate from './plugins/OWebDate';
const DECLARED_VALIDATORS = Object.create({});
export default class OWebForm {
    _appContext;
    adapter;
    required;
    excluded;
    checkAll;
    verbose;
    errors = {};
    /**
     * @param _appContext The app context.
     * @param adapter The form.
     * @param required The required fields.
     * @param excluded The fields to exclude from validation.
     * @param checkAll When true all fields will be validated.
     * @param verbose Log warning.
     */
    constructor(_appContext, adapter, required = [], excluded = [], checkAll = false, verbose = false) {
        this._appContext = _appContext;
        this.adapter = adapter;
        this.required = required;
        this.excluded = excluded;
        this.checkAll = checkAll;
        this.verbose = verbose;
    }
    /**
     * Returns the app context.
     */
    getAppContext() {
        return this._appContext;
    }
    /**
     * Returns the form adapter.
     */
    getFormAdapter() {
        return this.adapter;
    }
    /**
     * Gets app config.
     *
     * @param key
     */
    getConfig(key) {
        return this.getAppContext().configs.get(key);
    }
    /**
     * Returns a FormData containing the validated form fields.
     *
     * @param fields The fields name list. When empty all field will be added to the FormData.
     */
    getFormData(fields = []) {
        return this.adapter.toFormData(fields);
    }
    /**
     * Gets a given field name value.
     *
     * @param name
     */
    getFieldValue(name) {
        return this.adapter.getFieldValue(name);
    }
    /**
     * Sets a given field value.
     * @param name
     * @param value
     */
    setFieldValue(name, value) {
        this.adapter.setFieldValue(name, value);
        return this;
    }
    /**
     * Returns error map.
     */
    getErrors() {
        return this.errors;
    }
    /**
     * Runs form validation.
     */
    validate(showDialog = true) {
        const fieldNames = this.adapter.getFieldsNames();
        let c = -1, name;
        // empty error list
        this.errors = {};
        while ((name = fieldNames[++c])) {
            if (this.excluded.indexOf(name) < 0) {
                try {
                    const value = this.getFieldValue(name);
                    if (!isNil(value)) {
                        const validators = this.adapter.getFieldValidators(name);
                        if (validators.length) {
                            for (let i = 0; i < validators.length; i++) {
                                validators[i](value, name, this);
                            }
                        }
                        else if (this.verbose) {
                            logger.warn(`[OWebForm] no validators defined for field '${name}'.`);
                        }
                    }
                    else if (~this.required.indexOf(name)) {
                        this.assert(false, 'OZ_FORM_CONTAINS_EMPTY_FIELD', {
                            label: this.adapter.getFieldLabel(name),
                        });
                    }
                }
                catch (e) {
                    if (e.isFormError) {
                        if (!this.errors[name]) {
                            this.errors[name] = [];
                        }
                        this.errors[name].push(e);
                        if (!this.checkAll && showDialog) {
                            this.getAppContext().view.dialog({
                                type: 'error',
                                text: e.message,
                                data: e.data,
                            });
                            break;
                        }
                    }
                    else {
                        throw e;
                    }
                }
            }
        }
        return Object.keys(this.errors).length === 0;
    }
    /**
     * Make an assertions.
     *
     * @param predicate The assertion predicate.
     * @param message The error message when the predicate is false.
     * @param data The error data.
     */
    assert(predicate, message, data) {
        if (!predicate) {
            throw new OWebFormError(message, data);
        }
        return this;
    }
    /**
     * Declare a field validator.
     *
     * @param name The validator name.
     * @param validator The validator function.
     */
    static declareFieldValidator(name, validator) {
        if (name in DECLARED_VALIDATORS) {
            logger.warn(`[OWebForm] field validator "${name}" overwritten.`);
        }
        DECLARED_VALIDATORS[name] = validator;
    }
    /**
     * Gets field validator.
     *
     * @param name The field validator name.
     */
    static getDeclaredValidator(name) {
        return DECLARED_VALIDATORS[name];
    }
}
export const defaultValidators = {
    code: (value, _name, fv) => {
        const codeReg = new RegExp(fv.getConfig('OZ_CODE_REG'));
        fv.assert(codeReg.test(isNil(value) ? '' : String(value)), 'OZ_AUTH_CODE_INVALID');
    },
    uname: (value, name, fv) => {
        const v = (isNil(value) ? '' : String(value))
            .replace(/\s+/g, ' ')
            .trim();
        fv.assert(v.length >= fv.getConfig('OZ_USER_NAME_MIN_LENGTH'), 'OZ_FIELD_USER_NAME_TOO_SHORT')
            .assert(v.length <= fv.getConfig('OZ_USER_NAME_MAX_LENGTH'), 'OZ_FIELD_USER_NAME_TOO_LONG')
            .setFieldValue(name, v);
    },
    login_pass: (value, _name, fv) => {
        const pass = isNil(value) ? '' : String(value), min = fv.getConfig('OZ_PASS_MIN_LENGTH'), max = fv.getConfig('OZ_PASS_MAX_LENGTH');
        fv.assert(pass.length >= min, 'OZ_FIELD_PASS_INVALID').assert(pass.length <= max, 'OZ_FIELD_PASS_INVALID');
    },
    pass: (value, _name, fv) => {
        const pass = isNil(value) ? '' : String(value), min = fv.getConfig('OZ_PASS_MIN_LENGTH'), max = fv.getConfig('OZ_PASS_MAX_LENGTH');
        fv.assert(pass.length >= min, 'OZ_FIELD_PASS_TOO_SHORT', {
            min,
            max,
        }).assert(pass.length <= max, 'OZ_FIELD_PASS_TOO_LONG', {
            min,
            max,
        });
    },
    pass_verify: (value, _name, fv) => {
        fv.assert(value === fv.getFieldValue('pass'), 'OZ_FIELD_PASS_AND_VPASS_NOT_EQUAL');
    },
    birth_date: (value, name, fv) => {
        const od = new OWebDate(fv.getAppContext(), isNil(value) ? undefined : value), date = od.describe(), minAge = fv.getConfig('OZ_USER_MIN_AGE'), maxAge = fv.getConfig('OZ_USER_MAX_AGE'), isValid = date && isValidAge(date.d, parseInt(date.mm), date.Y, minAge, maxAge);
        fv.assert(isValid, 'OZ_FIELD_BIRTH_DATE_INVALID', {
            input: value,
            min: minAge,
            max: maxAge,
        });
        date && fv.setFieldValue(name, `${date.Y}-${date.mm}-${date.d}`);
    },
    gender: (value, _name, fv) => {
        const genders = fv.getConfig('OZ_USER_ALLOWED_GENDERS');
        fv.assert(genders.indexOf(value) >= 0, 'OZ_FIELD_GENDER_INVALID');
    },
    email: (value, name, fv) => {
        /**
         * Email matching regex
         *
         * source: http://www.w3.org/TR/html5/forms.html#valid-e-mail-address
         *        - TLD not required
         *            /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/
         *        - must have TLD
         *            /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/
         */
        const emailReg = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/;
        const email = (isNil(value) ? '' : String(value))
            .replace(/\s/g, ' ')
            .trim();
        fv.assert(emailReg.test(email), 'OZ_FIELD_EMAIL_INVALID').setFieldValue(name, email);
    },
};
forEach(defaultValidators, (validator, name) => {
    OWebForm.declareFieldValidator(name, validator);
});
//# sourceMappingURL=data:application/json;base64,