import OWebCom from "./OWebCom";
import OWebConfigs from "./OWebConfigs";
import OWebCurrentUser from "./OWebCurrentUser";
import OWebDataStore from "./OWebDataStore";
import OWebEvent from "./OWebEvent";
import OWebFormValidator from "./OWebFormValidator";
import OWebRouter from "./OWebRouter";
import OWebUrl from "./OWebUrl";
import OWebView from "./OWebView";
import OWebDate from "./plugins/OWebDate";
const noop = () => {
};
export default class OWebApp extends OWebEvent {
    constructor(app_name, app_config_list, app_url_list) {
        super();
        this.app_name = app_name;
        this.services = {};
        this.ls = new OWebDataStore(this);
        this.configs = new OWebConfigs(this, app_config_list);
        this.url = new OWebUrl(this, app_url_list);
        this.user = new OWebCurrentUser(this);
        this.view = new OWebView();
        let base_url = this.configs.get("OW_APP_LOCAL_BASE_URL"), hash_mode = false !== this.configs.get("OW_APP_ROUTER_HASH_MODE");
        this.router = new OWebRouter(base_url, hash_mode);
    }
    getAppName() {
        return this.app_name;
    }
    isMobileApp() {
        return "cordova" in window;
    }
    start() {
        console.log("[OWebApp] app started!");
        this.trigger(OWebApp.EVT_APP_READY);
        return this;
    }
    getService(service_name) {
        return this.services[service_name];
    }
    registerService(service) {
        let service_name = service.getName();
        if (this.services[service_name]) {
            throw new Error(`A service with the name "${service_name}" already defined.`);
        }
        this.services[service_name] = service;
        return this;
    }
    getFormValidator(form, required = [], excluded = []) {
        return new OWebFormValidator(this, form, required, excluded);
    }
    forceLogin() {
        this.ls.clear();
        this.showLoginPage();
    }
    reloadApp() {
        // TODO: instead of reloading the current location, find a way to browse to web app entry point
        // for android & ios restart the app
        // window.location.reload(true);
        this.showHomePage();
    }
    destroyApp() {
        // erase data
        this.ls.clear();
        this.reloadApp();
    }
    closeApp() {
        // cordova
        if (window.navigator && window.navigator.app) {
            window.navigator.app.exitApp();
        }
        else {
            window.close();
        }
    }
    sessionActive() {
        let now = (new Date()).getTime(); // milliseconds
        let hour = 60 * 60; // seconds
        let expire = this.user.getSessionExpire() - hour; // seconds
        return (expire * 1000) > now;
    }
    userVerified() {
        return Boolean(this.user.getCurrentUser() && this.sessionActive());
    }
    requestPromise(method, url, data, freeze = false) {
        let m = this;
        return new Promise(function (resolve, reject) {
            m.request(method, url, data, resolve, reject, freeze);
        });
    }
    request(method, url, data, success = noop, fail = noop, freeze = false) {
        let app = this;
        if (freeze) {
            app.view.freeze();
        }
        let options = {
            url: url,
            method: method,
            data: data,
            badNewsShow: false
        };
        let com = new OWebCom(this, options);
        com.on(OWebCom.EVT_COM_REQUEST_SUCCESS, (response) => {
            // setTimeout(function () {
            if (freeze) {
                app.view.unfreeze();
            }
            success(response);
            // }, 1000);
        }).on(OWebCom.EVT_COM_REQUEST_ERROR, (response) => {
            if (response["msg"] === "OZ_ERROR_YOU_ARE_NOT_ADMIN") {
                app.destroyApp();
            }
            if (freeze) {
                app.view.unfreeze();
            }
            fail(response);
        }).on(OWebCom.EVT_COM_NETWORK_ERROR, () => {
            if (freeze) {
                app.view.unfreeze();
            }
            let response = {
                "error": 1,
                "msg": "OZ_ERROR_REQUEST_FAIL",
                "utime": OWebDate.timestamp()
            };
            response.neterror = true;
            fail(response);
        }).send();
        return com;
    }
}
OWebApp.EVT_APP_READY = "OWebApp:ready";
OWebApp.SELF = "OWebApp";
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYkFwcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9PV2ViQXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sT0FBdUIsTUFBTSxXQUFXLENBQUM7QUFDaEQsT0FBTyxXQUEwQixNQUFNLGVBQWUsQ0FBQztBQUN2RCxPQUFPLGVBQWUsTUFBTSxtQkFBbUIsQ0FBQztBQUNoRCxPQUFPLGFBQWEsTUFBTSxpQkFBaUIsQ0FBQztBQUM1QyxPQUFPLFNBQVMsTUFBTSxhQUFhLENBQUM7QUFDcEMsT0FBTyxpQkFBaUIsTUFBTSxxQkFBcUIsQ0FBQztBQUNwRCxPQUFPLFVBQVUsTUFBTSxjQUFjLENBQUM7QUFFdEMsT0FBTyxPQUFtQixNQUFNLFdBQVcsQ0FBQztBQUM1QyxPQUFPLFFBQVEsTUFBTSxZQUFZLENBQUM7QUFDbEMsT0FBTyxRQUFRLE1BQU0sb0JBQW9CLENBQUM7QUFFMUMsTUFBTSxJQUFJLEdBQUcsR0FBRyxFQUFFO0FBQ2xCLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxPQUFPLGNBQXdCLFNBQVEsU0FBUztJQWF0RCxZQUF1QyxRQUFnQixFQUFFLGVBQTRCLEVBQUUsWUFBc0I7UUFDNUcsS0FBSyxFQUFFLENBQUM7UUFEOEIsYUFBUSxHQUFSLFFBQVEsQ0FBUTtRQUY5QyxhQUFRLEdBQXdDLEVBQUUsQ0FBQztRQUkzRCxJQUFJLENBQUMsRUFBRSxHQUFTLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxPQUFPLEdBQUksSUFBSSxXQUFXLENBQUMsSUFBSSxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQ3ZELElBQUksQ0FBQyxHQUFHLEdBQVEsSUFBSSxPQUFPLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxJQUFJLEdBQU8sSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLElBQUksR0FBTyxJQUFJLFFB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Syw0QkFBNEIsRUFBRTtnQkFDckQsR0FBRyxDQUFDLFVBQVUsRUFBRSxDQUFDO2FBQ2pCO1lBRUQsSUFBSSxNQUFNLEVBQUU7Z0JBQ1gsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQzthQUNwQjtZQUVELElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNoQixDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRTtZQUN6QyxJQUFJLE1BQU0sRUFBRTtnQkFDWCxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO2FBQ3BCO1lBQ0QsSUFBSSxRQUFRLEdBQWlCO2dCQUM1QixPQUFPLEVBQUUsQ0FBQztnQkFDVixLQUFLLEVBQUksdUJBQXVCO2dCQUNoQyxPQUFPLEVBQUUsUUFBUSxDQUFDLFNBQVMsRUFBRTthQUM3QixDQUFDO1lBRUYsUUFBUSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7WUFFekIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2hCLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1FBRVYsT0FBTyxHQUFHLENBQUM7SUFDWixDQUFDOztBQXhKZSxxQkFBYSxHQUFHLGVBQWUsQ0FBQztBQUNoQyxZQUFJLEdBQVksU0FBUyxDQUFDO0FBOEoxQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE9XZWJDb20sIHtpQ29tUmVzcG9uc2V9IGZyb20gXCIuL09XZWJDb21cIjtcbmltcG9ydCBPV2ViQ29uZmlncywge3RDb25maWdMaXN0fSBmcm9tIFwiLi9PV2ViQ29uZmlnc1wiO1xuaW1wb3J0IE9XZWJDdXJyZW50VXNlciBmcm9tIFwiLi9PV2ViQ3VycmVudFVzZXJcIjtcbmltcG9ydCBPV2ViRGF0YVN0b3JlIGZyb20gXCIuL09XZWJEYXRhU3RvcmVcIjtcbmltcG9ydCBPV2ViRXZlbnQgZnJvbSBcIi4vT1dlYkV2ZW50XCI7XG5pbXBvcnQgT1dlYkZvcm1WYWxpZGF0b3IgZnJvbSBcIi4vT1dlYkZvcm1WYWxpZGF0b3JcIjtcbmltcG9ydCBPV2ViUm91dGVyIGZyb20gXCIuL09XZWJSb3V0ZXJcIjtcbmltcG9ydCBPV2ViU2VydmljZSBmcm9tIFwiLi9PV2ViU2VydmljZVwiO1xuaW1wb3J0IE9XZWJVcmwsIHt0VXJsTGlzdH0gZnJvbSBcIi4vT1dlYlVybFwiO1xuaW1wb3J0IE9XZWJWaWV3IGZyb20gXCIuL09XZWJWaWV3XCI7XG5pbXBvcnQgT1dlYkRhdGUgZnJvbSBcIi4vcGx1Z2lucy9PV2ViRGF0ZVwiO1xuXG5jb25zdCBub29wID0gKCkgPT4ge1xufTtcblxuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgT1dlYkFwcCBleHRlbmRzIE9XZWJFdmVudCB7XG5cblx0c3RhdGljIHJlYWRvbmx5IEVWVF9BUFBfUkVBRFkgPSBcIk9XZWJBcHA6cmVhZHlcIjtcblx0c3RhdGljIHJlYWRvbmx5IFNFTEYgICAgICAgICAgPSBcIk9XZWJBcHBcIjtcblxuXHRyZWFkb25seSB2aWV3OiBPV2ViVmlldztcblx0cmVhZG9ubHkgbHM6IE9XZWJEYXRhU3RvcmU7XG5cdHJlYWRvbmx5IHJvdXRlcjogT1dlYlJvdXRlcjtcblx0cmVhZG9ubHkgdXNlcjogT1dlYkN1cnJlbnRVc2VyO1xuXHRyZWFkb25seSBjb25maWdzOiBPV2ViQ29uZmlncztcblx0cmVhZG9ubHkgdXJsOiBPV2ViVXJsO1xuXHRyZWFkb25seSBzZXJ2aWNlczogeyBba2V5OiBzdHJpbmddOiBPV2ViU2VydmljZTxhbnk+IH0gPSB7fTtcblxuXHRwcm90ZWN0ZWQgY29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBhcHBfbmFtZTogc3RyaW5nLCBhcHBfY29uZmlnX2xpc3Q6IHRDb25maWdMaXN0LCBhcHBfdXJsX2xpc3Q6IHRVcmxMaXN0KSB7XG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLmxzICAgICAgID0gbmV3IE9XZWJEYXRhU3RvcmUodGhpcyk7XG5cdFx0dGhpcy5jb25maWdzICA9IG5ldyBPV2ViQ29uZmlncyh0aGlzLCBhcHBfY29uZmlnX2xpc3QpO1xuXHRcdHRoaXMudXJsICAgICAgPSBuZXcgT1dlYlVybCh0aGlzLCBhcHBfdXJsX2xpc3QpO1xuXHRcdHRoaXMudXNlciAgICAgPSBuZXcgT1dlYkN1cnJlbnRVc2VyKHRoaXMpO1xuXHRcdHRoaXMudmlldyAgICAgPSBuZXcgT1dlYlZpZXcoKTtcblx0XHRsZXQgYmFzZV91cmwgID0gdGhpcy5jb25maWdzLmdldChcIk9XX0FQUF9MT0NBTF9CQVNFX1VSTFwiKSxcblx0XHRcdGhhc2hfbW9kZSA9IGZhbHNlICE9PSB0aGlzLmNvbmZpZ3MuZ2V0KFwiT1dfQVBQX1JPVVRFUl9IQVNIX01PREVcIik7XG5cdFx0dGhpcy5yb3V0ZXIgICA9IG5ldyBPV2ViUm91dGVyKGJhc2VfdXJsLCBoYXNoX21vZGUpO1xuXHR9XG5cblx0Z2V0QXBwTmFtZSgpOiBzdHJpbmcge1xuXHRcdHJldHVybiB0aGlzLmFwcF9uYW1lO1xuXHR9XG5cblx0aXNNb2JpbGVBcHAoKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIFwiY29yZG92YVwiIGluIHdpbmRvdztcblx0fVxuXG5cdHN0YXJ0KCk6IHRoaXMge1xuXHRcdGNvbnNvbGUubG9nKFwiW09XZWJBcHBdIGFwcCBzdGFydGVkIVwiKTtcblx0XHR0aGlzLnRyaWdnZXIoT1dlYkFwcC5FVlRfQVBQX1JFQURZKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdGdldFNlcnZpY2U8VCA9IGFueT4oc2VydmljZV9uYW1lOiBzdHJpbmcpOiBPV2ViU2VydmljZTxUPiB8IHVuZGVmaW5lZCB7XG5cdFx0cmV0dXJuIHRoaXMuc2VydmljZXNbc2VydmljZV9uYW1lXTtcblx0fVxuXG5cdHJlZ2lzdGVyU2VydmljZTxUIGV4dGVuZHMgT1dlYlNlcnZpY2U8YW55Pj4oc2VydmljZTogVCk6IHRoaXMge1xuXG5cdFx0bGV0IHNlcnZpY2VfbmFtZSA9IHNlcnZpY2UuZ2V0TmFtZSgpO1xuXG5cdFx0aWYgKHRoaXMuc2VydmljZXNbc2VydmljZV9uYW1lXSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBBIHNlcnZpY2Ugd2l0aCB0aGUgbmFtZSBcIiR7c2VydmljZV9uYW1lfVwiIGFscmVhZHkgZGVmaW5lZC5gKTtcblx0XHR9XG5cblx0XHR0aGlzLnNlcnZpY2VzW3NlcnZpY2VfbmFtZV0gPSBzZXJ2aWNlO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRnZXRGb3JtVmFsaWRhdG9yKGZvcm06IEhUTUxGb3JtRWxlbWVudCwgcmVxdWlyZWQ6IEFycmF5PHN0cmluZz4gPSBbXSwgZXhjbHVkZWQ6IEFycmF5PHN0cmluZz4gPSBbXSkge1xuXHRcdHJldHVybiBuZXcgT1dlYkZvcm1WYWxpZGF0b3IodGhpcywgZm9ybSwgcmVxdWlyZWQsIGV4Y2x1ZGVkKTtcblx0fVxuXG5cdGZvcmNlTG9naW4oKSB7XG5cdFx0dGhpcy5scy5jbGVhcigpO1xuXHRcdHRoaXMuc2hvd0xvZ2luUGFnZSgpO1xuXHR9XG5cblx0cmVsb2FkQXBwKCkge1xuXHRcdC8vIFRPRE86IGluc3RlYWQgb2YgcmVsb2FkaW5nIHRoZSBjdXJyZW50IGxvY2F0aW9uLCBmaW5kIGEgd2F5IHRvIGJyb3dzZSB0byB3ZWIgYXBwIGVudHJ5IHBvaW50XG5cdFx0Ly8gZm9yIGFuZHJvaWQgJiBpb3MgcmVzdGFydCB0aGUgYXBwXG5cdFx0Ly8gd2luZG93LmxvY2F0aW9uLnJlbG9hZCh0cnVlKTtcblx0XHR0aGlzLnNob3dIb21lUGFnZSgpO1xuXHR9XG5cblx0ZGVzdHJveUFwcCgpIHtcblx0XHQvLyBlcmFzZSBkYXRhXG5cdFx0dGhpcy5scy5jbGVhcigpO1xuXHRcdHRoaXMucmVsb2FkQXBwKCk7XG5cdH1cblxuXHRjbG9zZUFwcCgpIHtcblx0XHQvLyBjb3Jkb3ZhXG5cdFx0aWYgKHdpbmRvdy5uYXZpZ2F0b3IgJiYgKHdpbmRvdy5uYXZpZ2F0b3IgYXMgYW55KS5hcHApIHtcblx0XHRcdCh3aW5kb3cubmF2aWdhdG9yIGFzIGFueSkuYXBwLmV4aXRBcHAoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LmNsb3NlKCk7XG5cdFx0fVxuXHR9XG5cblx0c2Vzc2lvbkFjdGl2ZSgpOiBib29sZWFuIHtcblx0XHRsZXQgbm93ICAgID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTsvLyBtaWxsaXNlY29uZHNcblx0XHRsZXQgaG91ciAgID0gNjAgKiA2MDsvLyBzZWNvbmRzXG5cdFx0bGV0IGV4cGlyZSA9IHRoaXMudXNlci5nZXRTZXNzaW9uRXhwaXJlKCkgLSBob3VyOy8vIHNlY29uZHNcblx0XHRyZXR1cm4gKGV4cGlyZSAqIDEwMDApID4gbm93O1xuXHR9XG5cblx0dXNlclZlcmlmaWVkKCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiBCb29sZWFuKHRoaXMudXNlci5nZXRDdXJyZW50VXNlcigpICYmIHRoaXMuc2Vzc2lvbkFjdGl2ZSgpKTtcblx0fVxuXG5cdHJlcXVlc3RQcm9taXNlKG1ldGhvZDogc3RyaW5nLCB1cmw6IHN0cmluZywgZGF0YTogYW55LCBmcmVlemU6IGJvb2xlYW4gPSBmYWxzZSk6IFByb21pc2U8aUNvbVJlc3BvbnNlPiB7XG5cdFx0bGV0IG0gPSB0aGlzO1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZTxpQ29tUmVzcG9uc2U+KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdG0ucmVxdWVzdChtZXRob2QsIHVybCwgZGF0YSwgcmVzb2x2ZSwgcmVqZWN0LCBmcmVlemUpO1xuXHRcdH0pO1xuXHR9XG5cblx0cmVxdWVzdChtZXRob2Q6IHN0cmluZywgdXJsOiBzdHJpbmcsIGRhdGE6IGFueSwgc3VjY2VzczogKHJlc3BvbnNlOiBpQ29tUmVzcG9uc2UpID0+IHZvaWQgPSBub29wLCBmYWlsOiAocmVzcG9uc2U6IGlDb21SZXNwb25zZSkgPT4gdm9pZCA9IG5vb3AsIGZyZWV6ZTogYm9vbGVhbiA9IGZhbHNlKTogT1dlYkNvbSB7XG5cdFx0bGV0IGFwcCA9IHRoaXM7XG5cblx0XHRpZiAoZnJlZXplKSB7XG5cdFx0XHRhcHAudmlldy5mcmVlemUoKTtcblx0XHR9XG5cblx0XHRsZXQgb3B0aW9ucyA9IHtcblx0XHRcdHVybCAgICAgICAgOiB1cmwsXG5cdFx0XHRtZXRob2QgICAgIDogbWV0aG9kLFxuXHRcdFx0ZGF0YSAgICAgICA6IGRhdGEsXG5cdFx0XHRiYWROZXdzU2hvdzogZmFsc2Vcblx0XHR9O1xuXG5cdFx0bGV0IGNvbSA9IG5ldyBPV2ViQ29tKHRoaXMsIG9wdGlvbnMpO1xuXHRcdGNvbS5vbihPV2ViQ29tLkVWVF9DT01fUkVRVUVTVF9TVUNDRVNTLCAocmVzcG9uc2U6IGlDb21SZXNwb25zZSkgPT4ge1xuXHRcdFx0Ly8gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdFx0XHRpZiAoZnJlZXplKSB7XG5cdFx0XHRcdGFwcC52aWV3LnVuZnJlZXplKCk7XG5cdFx0XHR9XG5cblx0XHRcdHN1Y2Nlc3MocmVzcG9uc2UpO1xuXHRcdFx0Ly8gfSwgMTAwMCk7XG5cdFx0fSkub24oT1dlYkNvbS5FVlRfQ09NX1JFUVVFU1RfRVJST1IsIChyZXNwb25zZTogaUNvbVJlc3BvbnNlKSA9PiB7XG5cdFx0XHRpZiAocmVzcG9uc2VbXCJtc2dcIl0gPT09IFwiT1pfRVJST1JfWU9VX0FSRV9OT1RfQURNSU5cIikge1xuXHRcdFx0XHRhcHAuZGVzdHJveUFwcCgpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoZnJlZXplKSB7XG5cdFx0XHRcdGFwcC52aWV3LnVuZnJlZXplKCk7XG5cdFx0XHR9XG5cblx0XHRcdGZhaWwocmVzcG9uc2UpO1xuXHRcdH0pLm9uKE9XZWJDb20uRVZUX0NPTV9ORVRXT1JLX0VSUk9SLCAoKSA9PiB7XG5cdFx0XHRpZiAoZnJlZXplKSB7XG5cdFx0XHRcdGFwcC52aWV3LnVuZnJlZXplKCk7XG5cdFx0XHR9XG5cdFx0XHRsZXQgcmVzcG9uc2U6IGlDb21SZXNwb25zZSA9IHtcblx0XHRcdFx0XCJlcnJvclwiOiAxLFxuXHRcdFx0XHRcIm1zZ1wiICA6IFwiT1pfRVJST1JfUkVRVUVTVF9GQUlMXCIsXG5cdFx0XHRcdFwidXRpbWVcIjogT1dlYkRhdGUudGltZXN0YW1wKClcblx0XHRcdH07XG5cblx0XHRcdHJlc3BvbnNlLm5ldGVycm9yID0gdHJ1ZTtcblxuXHRcdFx0ZmFpbChyZXNwb25zZSk7XG5cdFx0fSkuc2VuZCgpO1xuXG5cdFx0cmV0dXJuIGNvbTtcblx0fVxuXG5cdGFic3RyYWN0IHNob3dIb21lUGFnZSgpOiB0aGlzXG5cblx0YWJzdHJhY3Qgc2hvd0xvZ2luUGFnZSgpOiB0aGlzXG5cblx0YWJzdHJhY3Qgc2hvd1NpZ25VcFBhZ2UoKTogdGhpc1xufTtcbiJdfQ==