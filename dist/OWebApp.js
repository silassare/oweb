import { OWebConfigs, OWebEvent, OWebCurrentUser, OWebView, OWebDataStore, OWebDate, OWebCom, OWebFormValidator, OWebUrl, OWebRouter } from "./oweb";
const noop = () => {
};
export default class OWebApp extends OWebEvent {
    constructor(app_name, app_config_list, app_url_list) {
        super();
        this.app_name = app_name;
        this.services = {};
        this.configs = new OWebConfigs(this, app_config_list);
        this.url = new OWebUrl(this, app_url_list);
        this.user = new OWebCurrentUser(this);
        this.view = new OWebView();
        let base_url = this.configs.get("OW_APP_LOCAL_BASE_URL"), hash_mode = false !== this.configs.get("OW_APP_ROUTER_HASH_MODE");
        this.router = new OWebRouter(base_url, hash_mode);
    }
    getAppName() {
        return this.app_name;
    }
    start() {
        console.log("[OWebApp] app started!");
        this.trigger(OWebApp.EVT_APP_READY);
    }
    getService(service_name) {
        return this.services[service_name];
    }
    registerService(service) {
        let service_name = service.getName();
        if (this.services[service_name]) {
            throw new Error(`A service with the name "${service_name}" already defined.`);
        }
        this.services[service_name] = service;
        return this;
    }
    getFormValidator(form, required = [], excluded = []) {
        return new OWebFormValidator(this, form, required, excluded);
    }
    forceLogin() {
        OWebDataStore.clear();
        this.reloadApp();
    }
    reloadApp() {
        // TODO: instead of reloading the current location, find a way to browse to web app entry point
        // for android & ios restart the app
        window.location.reload(true);
    }
    destroyApp() {
        // erase data
        OWebDataStore.clear();
        this.reloadApp();
    }
    sessionActive() {
        let now = (new Date()).getTime(); // milliseconds
        let hour = 60 * 60; // seconds
        let expire = this.user.getSessionExpire() - hour; // seconds
        return (expire * 1000) > now;
    }
    userVerified() {
        return this.user.getCurrentUser() && this.sessionActive();
    }
    requestPromise(method, url, data, freeze = false) {
        let m = this;
        return new Promise(function (resolve, reject) {
            m.request(method, url, data, resolve, reject, freeze);
        });
    }
    request(method, url, data, success = noop, fail = noop, freeze = false) {
        let app = this;
        if (freeze) {
            app.view.freeze();
        }
        let options = {
            url: url,
            method: method,
            data: data,
            badNewsShow: false
        };
        let com = new OWebCom(this, options);
        com.on(OWebCom.EVT_COM_REQUEST_SUCCESS, (response) => {
            // setTimeout(function () {
            if (freeze) {
                app.view.unfreeze();
            }
            success(response);
            // }, 1000);
        }).on(OWebCom.EVT_COM_REQUEST_ERROR, (response) => {
            if (response["msg"] === "OZ_ERROR_YOU_ARE_NOT_ADMIN") {
                app.destroyApp();
            }
            if (freeze) {
                app.view.unfreeze();
            }
            fail(response);
        }).on(OWebCom.EVT_COM_NETWORK_ERROR, () => {
            if (freeze) {
                app.view.unfreeze();
            }
            let response = {
                "error": 1,
                "msg": "OZ_ERROR_REQUEST_FAIL",
                "utime": OWebDate.timestamp()
            };
            response.neterror = true;
            fail(response);
        }).send();
        return com;
    }
}
OWebApp.EVT_APP_READY = "OWebApp:ready";
OWebApp.SELF = "OWebApp";
;
//# sourceMappingURL=data:application/json;base64,