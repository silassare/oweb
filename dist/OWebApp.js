import OWebConfigs from './OWebConfigs';
import OWebDataStore from './OWebDataStore';
import OWebEvent from './OWebEvent';
import OWebForm from './OWebForm';
import OWebRouter from './OWebRouter';
import OWebUrl from './OWebUrl';
import OWebView from './OWebView';
import OWebI18n from './OWebI18n';
import { assign, id, logger } from './utils';
import OZone from './ozone';
import OWebXHR from './OWebXHR';
import defaultAppConfigs from './default/app.configs';
import defaultUserConfigs from './default/user.configs';
import defaultAppUrls from './default/app.urls';
import { OFormDOMFormAdapter, OFormObjectAdapter } from './OWebFormAdapter';
export default class OWebApp extends OWebEvent {
    options;
    static SELF = id();
    static EVT_APP_READY = id();
    static EVT_NOT_FOUND = id();
    static EVT_SHOW_HOME = id();
    static EVT_SHOW_LOGIN = id();
    static EVT_SHOW_REGISTRATION_PAGE = id();
    view;
    ls;
    router;
    configs;
    url;
    i18n;
    oz;
    _user;
    _store;
    _pager;
    /**
     * OWebApp constructor.
     *
     * @param options
     */
    constructor(options) {
        super();
        this.options = options;
        this.ls = new OWebDataStore(this);
        this.configs = new OWebConfigs(this, assign({}, defaultAppConfigs, options.appConfigs), assign({}, defaultUserConfigs, options.userConfigs));
        this.url = new OWebUrl(this, assign({}, defaultAppUrls, options.urls));
        this.view = new OWebView();
        this.i18n = new OWebI18n();
        this._user = options.user.call(this);
        this._store = options.store.call(this);
        this._pager = options.pager.call(this);
        const ctx = this, baseUrl = this.configs.get('OW_APP_LOCAL_BASE_URL'), hashMode = this.configs.get('OW_APP_ROUTER_HASH_MODE');
        this.router = new OWebRouter(baseUrl, hashMode, function notFoundHandler(target) {
            ctx.trigger(OWebApp.EVT_NOT_FOUND, [target]);
        });
        this.i18n.setLang(this.configs.get('OW_APP_DEFAULT_LANG'));
        this.oz = OZone.instantiate(this);
    }
    /**
     * Build an HTTP request.
     *
     * @param url
     * @param options
     */
    request(url, options = {}) {
        logger.debug('[Net] new request', url, options);
        const event = function event(type) {
            return function eventHandler(...args) {
                logger.debug('[Net] event %s', type, url, options, args);
            };
        };
        const o = new OWebXHR(url, {
            withCredentials: true,
            ...options,
        });
        o.onFinish(event('onFinished'))
            .onError(event('onError'))
            .onFail(event('onFailed'))
            .onHttpError(event('onHttpError'))
            .onHttpSuccess(event('onHttpSuccess'))
            .onGoodNews(event('onGoodNews'))
            .onBadNews(event('onBadNews'))
            .onDownloadProgress(event('onDownloadProgress'))
            .onUploadProgress(event('onUploadProgress'))
            .onResponse(event('onResponse'));
        return o;
    }
    /**
     * User getter.
     */
    get user() {
        return this._user;
    }
    /**
     * Store getter.
     */
    get store() {
        return this._store;
    }
    /**
     * Pager instance getter.
     */
    get pager() {
        return this._pager;
    }
    /**
     * App name getter.
     */
    getAppName() {
        return this.options.name;
    }
    /**
     * Checks if we are running in mobile app.
     */
    isMobileApp() {
        return 'cordova' in window;
    }
    /**
     * Returns new oweb form instance.
     *
     * @param form The html form element.
     * @param required The required fields names list.
     * @param excluded The fields names to exclude.
     * @param checkAll Force the validator to check all fields.
     * @param verbose Log warning.
     *
     * @deprecated use {@link OWebApp.form}
     */
    getFormValidator(form, required = [], excluded = [], checkAll = false, verbose = false) {
        return this.form(form, required, excluded, checkAll, verbose);
    }
    /**
     * Returns new oweb form instance.
     *
     * @param form The html form element.
     * @param required The required fields names list.
     * @param excluded The fields names to exclude.
     * @param checkAll Force the validator to check all fields.
     * @param verbose Log warning.
     */
    form(form, required = [], excluded = [], checkAll = false, verbose = false) {
        return new OWebForm(this, form instanceof HTMLFormElement
            ? new OFormDOMFormAdapter(form)
            : new OFormObjectAdapter(form), required, excluded, checkAll, verbose);
    }
    /**
     * Force login.
     *
     * > This will clear all saved data in the local storage.
     */
    forceLogin() {
        this.ls.clear();
        this.showLoginPage({});
    }
    /**
     * Reload the app.
     */
    reloadApp() {
        // TODO: instead of reloading the current location, find a way to browse to web app entry point
        // for android & ios restart the app
        // window.location.reload(true);
        this.showHomePage({});
    }
    /**
     * Destroy the app.
     *
     * > This will clear all saved data in the local storage.
     */
    destroyApp() {
        // erase data
        this.ls.clear();
        this.reloadApp();
    }
    /**
     * Close app.
     */
    closeApp() {
        // cordova
        if (window.navigator && window.navigator.app) {
            window.navigator.app.exitApp();
        }
        else {
            window.close();
        }
    }
    /**
     * To start the web app.
     */
    start() {
        logger.info('[OWebApp] app started!');
        this.trigger(OWebApp.EVT_APP_READY);
        return this;
    }
    /**
     * Called when app should show the home page.
     */
    showHomePage(options = {}) {
        this.trigger(OWebApp.EVT_SHOW_HOME, [options]);
    }
    /**
     * Called when app should show the login page.
     */
    showLoginPage(options = {}) {
        this.trigger(OWebApp.EVT_SHOW_LOGIN, [options]);
    }
    /**
     * Called when app should show the registration page.
     */
    showRegistrationPage(options = {}) {
        this.trigger(OWebApp.EVT_SHOW_LOGIN, [options]);
    }
    /**
     * Register handler for OWebApp.EVT_APP_READY event
     *
     * @param handler
     */
    onReady(handler) {
        return this.on(OWebApp.EVT_APP_READY, handler);
    }
    /**
     * Register handler for OWebApp.EVT_SHOW_HOME event
     *
     * @param handler
     */
    onShowHomePage(handler) {
        return this.on(OWebApp.EVT_SHOW_HOME, handler);
    }
    /**
     * Register handler for OWebApp.EVT_SHOW_LOGIN event
     *
     * @param handler
     */
    onShowLoginPage(handler) {
        return this.on(OWebApp.EVT_SHOW_LOGIN, handler);
    }
    /**
     * Register handler for OWebApp.EVT_SHOW_REGISTRATION_PAGE event
     *
     * @param handler
     */
    onShowRegistrationPage(handler) {
        return this.on(OWebApp.EVT_SHOW_REGISTRATION_PAGE, handler);
    }
    /**
     * Register handler for OWebApp.EVT_NOT_FOUND event
     *
     * @param handler
     */
    onPageNotFound(handler) {
        return this.on(OWebApp.EVT_NOT_FOUND, handler);
    }
    /**
     * Creates new app instance.
     *
     * @param options
     */
    static create(options) {
        return new OWebApp(options);
    }
}
//# sourceMappingURL=data:application/json;base64,