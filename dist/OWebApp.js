import OWebConfigs from './OWebConfigs';
import OWebDataStore from './OWebDataStore';
import OWebEvent from './OWebEvent';
import OWebForm from './OWebForm';
import OWebRouter from './OWebRouter';
import OWebUrl from './OWebUrl';
import OWebView from './OWebView';
import OWebI18n from './OWebI18n';
import { assign, id, logger } from './utils';
import OZone from './ozone';
import OWebXHR from './OWebXHR';
import defaultAppConfigs from './default/app.configs';
import defaultUserConfigs from './default/user.configs';
import defaultAppUrls from './default/app.urls';
import { OFormDOMFormAdapter, OFormObjectAdapter } from './OWebFormAdapter';
export default class OWebApp extends OWebEvent {
    options;
    static SELF = id();
    static EVT_APP_READY = id();
    static EVT_NOT_FOUND = id();
    static EVT_SHOW_HOME = id();
    static EVT_SHOW_LOGIN = id();
    static EVT_SHOW_REGISTRATION_PAGE = id();
    view;
    ls;
    router;
    user;
    configs;
    url;
    i18n;
    oz;
    _store;
    _pager;
    constructor(options) {
        super();
        this.options = options;
        this.ls = new OWebDataStore(this);
        this.configs = new OWebConfigs(this, assign({}, defaultAppConfigs, options.appConfigs), assign({}, defaultUserConfigs, options.userConfigs));
        this.url = new OWebUrl(this, assign({}, defaultAppUrls, options.urls));
        this.view = new OWebView();
        this.i18n = new OWebI18n();
        this.user = options.user.call(this);
        this._store = options.store.call(this);
        this._pager = options.pager.call(this);
        const ctx = this, baseUrl = this.configs.get('OW_APP_LOCAL_BASE_URL'), hashMode = this.configs.get('OW_APP_ROUTER_HASH_MODE');
        this.router = new OWebRouter(baseUrl, hashMode, function notFoundHandler(target) {
            ctx.trigger(OWebApp.EVT_NOT_FOUND, [target]);
        });
        this.i18n.setDefaultLang(this.configs.get('OW_APP_DEFAULT_LANG'));
        this.oz = OZone.instantiate(this);
    }
    request(url, options = {}) {
        logger.debug('[Net] new request', url, options);
        const event = function event(type) {
            return function eventHandler(...args) {
                logger.debug('[Net] event %s', type, url, options, args);
            };
        };
        const o = new OWebXHR(url, {
            withCredentials: true,
            ...options,
        });
        o.onFinish(event('onFinished'))
            .onError(event('onError'))
            .onFail(event('onFailed'))
            .onHttpError(event('onHttpError'))
            .onHttpSuccess(event('onHttpSuccess'))
            .onGoodNews(event('onGoodNews'))
            .onBadNews(event('onBadNews'))
            .onDownloadProgress(event('onDownloadProgress'))
            .onUploadProgress(event('onUploadProgress'))
            .onResponse(event('onResponse'));
        return o;
    }
    get store() {
        return this._store;
    }
    get pager() {
        return this._pager;
    }
    getAppName() {
        return this.options.name;
    }
    isMobileApp() {
        return 'cordova' in window;
    }
    form(form, required = [], excluded = [], checkAll = false, verbose = false) {
        return new OWebForm(this, form instanceof HTMLFormElement
            ? new OFormDOMFormAdapter(form)
            : new OFormObjectAdapter(form), required, excluded, checkAll, verbose);
    }
    forceLogin() {
        this.ls.clear();
        this.showLoginPage({});
    }
    reloadApp() {
        this.showHomePage({});
    }
    destroyApp() {
        this.ls.clear();
        this.reloadApp();
    }
    closeApp() {
        if (window.navigator && window.navigator.app) {
            window.navigator.app.exitApp();
        }
        else {
            window.close();
        }
    }
    start() {
        logger.info('[OWebApp] app started!');
        this.trigger(OWebApp.EVT_APP_READY);
        return this;
    }
    showHomePage(options = {}) {
        this.trigger(OWebApp.EVT_SHOW_HOME, [options]);
    }
    showLoginPage(options = {}) {
        this.trigger(OWebApp.EVT_SHOW_LOGIN, [options]);
    }
    showRegistrationPage(options = {}) {
        this.trigger(OWebApp.EVT_SHOW_LOGIN, [options]);
    }
    onReady(handler) {
        return this.on(OWebApp.EVT_APP_READY, handler);
    }
    onShowHomePage(handler) {
        return this.on(OWebApp.EVT_SHOW_HOME, handler);
    }
    onShowLoginPage(handler) {
        return this.on(OWebApp.EVT_SHOW_LOGIN, handler);
    }
    onShowRegistrationPage(handler) {
        return this.on(OWebApp.EVT_SHOW_REGISTRATION_PAGE, handler);
    }
    onPageNotFound(handler) {
        return this.on(OWebApp.EVT_NOT_FOUND, handler);
    }
    static create(options) {
        return new OWebApp(options);
    }
}
//# sourceMappingURL=data:application/json;base64,