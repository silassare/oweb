import OWebConfigs from './OWebConfigs';
import OWebDataStore from './OWebDataStore';
import OWebEvent from './OWebEvent';
import OWebFormValidator from './OWebFormValidator';
import OWebRouter from './OWebRouter';
import OWebUrl from './OWebUrl';
import OWebView from './OWebView';
import OWebI18n from './OWebI18n';
import { id, logger } from './utils';
import OZone from './ozone';
export default class OWebApp extends OWebEvent {
    /**
     * OWebApp constructor.
     *
     * @param options
     */
    constructor(options) {
        super();
        this.options = options;
        this.ls = new OWebDataStore(this);
        this.configs = new OWebConfigs(this, options.appConfigs, options.userConfigs);
        this.url = new OWebUrl(this, options.urls);
        this.view = new OWebView();
        this.i18n = new OWebI18n();
        this.user = options.user.call(this);
        this._store = options.store.call(this);
        this._pager = options.pager.call(this);
        const ctx = this, baseUrl = this.configs.get('OW_APP_LOCAL_BASE_URL'), hashMode = this.configs.get('OW_APP_ROUTER_HASH_MODE');
        this.router = new OWebRouter(baseUrl, hashMode, function (target) {
            ctx.trigger(OWebApp.EVT_NOT_FOUND, [target]);
        });
        this.i18n.setDefaultLang(this.configs.get('OW_APP_DEFAULT_LANG'));
        this.oz = OZone.instantiate(this);
    }
    /**
     * Store getter.
     */
    get store() {
        return this._store;
    }
    /**
     * Pager instance getter.
     */
    get pager() {
        return this._pager;
    }
    /**
     * Store services shortcut.
     */
    get services() {
        return this.store.services;
    }
    /**
     * App name getter.
     */
    getAppName() {
        return this.options.name;
    }
    /**
     * Checks if we are running in mobile app.
     */
    isMobileApp() {
        return 'cordova' in window;
    }
    /**
     * Returns new form validator instance.
     *
     * @param form The html form element.
     * @param required The required fields names list.
     * @param excluded The fields names to exclude.
     * @param checkAll Force the validator to check all fields.
     */
    getFormValidator(form, required = [], excluded = [], checkAll = false) {
        return new OWebFormValidator(this, form, required, excluded, checkAll);
    }
    /**
     * Force login.
     *
     * > This will clear all saved data in the local storage.
     */
    forceLogin() {
        this.ls.clear();
        this.showLoginPage({});
    }
    /**
     * Reload the app.
     */
    reloadApp() {
        // TODO: instead of reloading the current location, find a way to browse to web app entry point
        // for android & ios restart the app
        // window.location.reload(true);
        this.showHomePage({});
    }
    /**
     * Destroy the app.
     *
     * > This will clear all saved data in the local storage.
     */
    destroyApp() {
        // erase data
        this.ls.clear();
        this.reloadApp();
    }
    /**
     * Close app.
     */
    closeApp() {
        // cordova
        if (window.navigator && window.navigator.app) {
            window.navigator.app.exitApp();
        }
        else {
            window.close();
        }
    }
    /**
     * To start the web app.
     */
    start() {
        logger.info('[OWebApp] app started!');
        this.trigger(OWebApp.EVT_APP_READY);
        return this;
    }
    /**
     * Called when app should show the home page.
     */
    showHomePage(options = {}) {
        this.trigger(OWebApp.EVT_SHOW_HOME, [options]);
    }
    /**
     * Called when app should show the login page.
     */
    showLoginPage(options = {}) {
        this.trigger(OWebApp.EVT_SHOW_LOGIN, [options]);
    }
    /**
     * Called when app should show the registration page.
     */
    showRegistrationPage(options = {}) {
        this.trigger(OWebApp.EVT_SHOW_LOGIN, [options]);
    }
    /**
     * Register handler for OWebApp.EVT_APP_READY event
     *
     * @param handler
     */
    onReady(handler) {
        return this.on(OWebApp.EVT_APP_READY, handler);
    }
    /**
     * Register handler for OWebApp.EVT_SHOW_HOME event
     *
     * @param handler
     */
    onShowHomePage(handler) {
        return this.on(OWebApp.EVT_SHOW_HOME, handler);
    }
    /**
     * Register handler for OWebApp.EVT_SHOW_LOGIN event
     *
     * @param handler
     */
    onShowLoginPage(handler) {
        return this.on(OWebApp.EVT_SHOW_LOGIN, handler);
    }
    /**
     * Register handler for OWebApp.EVT_SHOW_REGISTRATION_PAGE event
     *
     * @param handler
     */
    onShowRegistrationPage(handler) {
        return this.on(OWebApp.EVT_SHOW_REGISTRATION_PAGE, handler);
    }
    /**
     * Register handler for OWebApp.EVT_NOT_FOUND event
     *
     * @param handler
     */
    onPageNotFound(handler) {
        return this.on(OWebApp.EVT_NOT_FOUND, handler);
    }
    /**
     * Creates new app instance.
     *
     * @param options
     */
    static create(options) {
        return new OWebApp(options);
    }
}
OWebApp.SELF = id();
OWebApp.EVT_APP_READY = id();
OWebApp.EVT_NOT_FOUND = id();
OWebApp.EVT_SHOW_HOME = id();
OWebApp.EVT_SHOW_LOGIN = id();
OWebApp.EVT_SHOW_REGISTRATION_PAGE = id();
//# sourceMappingURL=data:application/json;base64,