"use strict";
import OWebEvent from "./OWebEvent";
import OWebCurrentUser from "./OWebCurrentUser";
import OWebView from "./OWebView";
import OWebDataStore from "./OWebDataStore";
import OWebDate from "./plugins/OWebDate";
import OWebCom from "./OWebCom";
import OWebFormValidator from "./OWebFormValidator";
import OWebService from "./OWebService";
import OWebConfigs from "./OWebConfigs";
import OWebUrl from "./OWebUrl";
import OWebRouter from "./OWebRouter";
const noop = () => {
};
export default class OWebApp extends OWebEvent {
    constructor(app_name, app_config_list, app_url_list) {
        super();
        this.app_name = app_name;
        this.services = {};
        this.configs = new OWebConfigs(this, app_config_list);
        this.url = new OWebUrl(this, app_url_list);
        this.user = new OWebCurrentUser(this);
        this.view = new OWebView();
        let base_url = this.configs.get("OW_APP_LOCAL_BASE_URL"), hash_mode = false !== this.configs.get("OW_APP_ROUTER_HASH_MODE");
        this.router = new OWebRouter(base_url, hash_mode);
    }
    getAppName() {
        return this.app_name;
    }
    start() {
        console.log("[OWebApp] app started!");
        this.trigger(OWebApp.EVT_APP_READY);
    }
    getService(service_name) {
        return this.services[service_name];
    }
    registerService(service_name) {
        if (!this.services[service_name]) {
            this.services[service_name] = new OWebService(this, service_name);
        }
        return this;
    }
    getFormValidator(form, required = [], excluded = []) {
        return new OWebFormValidator(this, form, required, excluded);
    }
    forceLogin() {
        OWebDataStore.clear();
        this.reloadApp();
    }
    reloadApp() {
        // TODO: instead of reloading the current location, find a way to browse to web app entry point
        // for android & ios restart the app
        window.location.reload(true);
    }
    destroyApp() {
        // erase data
        OWebDataStore.clear();
        this.reloadApp();
    }
    sessionActive() {
        let now = (new Date()).getTime(); // milliseconds
        let hour = 60 * 60; // seconds
        let expire = this.user.getSessionExpire() - hour; // seconds
        return (expire * 1000) > now;
    }
    userVerified() {
        return this.user.getCurrentUser() && this.sessionActive();
    }
    requestPromise(method, url, data, freeze = false) {
        let m = this;
        return new Promise(function (resolve, reject) {
            m.request(method, url, data, resolve, reject, freeze);
        });
    }
    request(method, url, data, success = noop, fail = noop, freeze = false) {
        let app = this;
        if (freeze) {
            app.view.freeze();
        }
        let options = {
            url: url,
            method: method,
            data: data,
            badNewsShow: false
        };
        let com = new OWebCom(this, options);
        com.on(OWebCom.EVT_COM_REQUEST_SUCCESS, (response) => {
            // setTimeout(function () {
            if (freeze) {
                app.view.unfreeze();
            }
            success(response);
            // }, 1000);
        }).on(OWebCom.EVT_COM_REQUEST_ERROR, (response) => {
            if (response["msg"] === "OZ_ERROR_YOU_ARE_NOT_ADMIN") {
                app.destroyApp();
            }
            if (freeze) {
                app.view.unfreeze();
            }
            fail(response);
        }).on(OWebCom.EVT_COM_NETWORK_ERROR, () => {
            if (freeze) {
                app.view.unfreeze();
            }
            let response = {
                "error": 1,
                "msg": "OZ_ERROR_REQUEST_FAIL",
                "utime": OWebDate.timestamp()
            };
            response.neterror = true;
            fail(response);
        }).send();
        return com;
    }
}
OWebApp.EVT_APP_READY = "OWebApp:ready";
OWebApp.SELF = "OWebApp";
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYkFwcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9PV2ViQXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLE9BQU8sU0FBUyxNQUFNLGFBQWEsQ0FBQztBQUNwQyxPQUFPLGVBQWUsTUFBTSxtQkFBbUIsQ0FBQztBQUNoRCxPQUFPLFFBQVEsTUFBTSxZQUFZLENBQUM7QUFDbEMsT0FBTyxhQUFhLE1BQU0saUJBQWlCLENBQUM7QUFDNUMsT0FBTyxRQUFRLE1BQU0sb0JBQW9CLENBQUM7QUFFMUMsT0FBTyxPQUF1QixNQUFNLFdBQVcsQ0FBQztBQUNoRCxPQUFPLGlCQUFpQixNQUFNLHFCQUFxQixDQUFDO0FBQ3BELE9BQU8sV0FBVyxNQUFNLGVBQWUsQ0FBQztBQUN4QyxPQUFPLFdBQTBCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZELE9BQU8sT0FBbUIsTUFBTSxXQUFXLENBQUM7QUFDNUMsT0FBTyxVQUFVLE1BQU0sY0FBYyxDQUFDO0FBRXRDLE1BQU0sSUFBSSxHQUFHLEdBQUcsRUFBRTtBQUNsQixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsT0FBTyxjQUF3QixTQUFRLFNBQVM7SUFZdEQsWUFBdUMsUUFBZ0IsRUFBRSxlQUE0QixFQUFFLFlBQXNCO1FBQzVHLEtBQUssRUFBRSxDQUFDO1FBRDhCLGFBQVEsR0FBUixRQUFRLENBQVE7UUFGOUMsYUFBUSxHQUF3QyxFQUFFLENBQUM7UUFJM0QsSUFBSSxDQUFDLE9BQU8sR0FBSSxJQUFJLFdBQVcsQ0FBQyxJQUFJLEVBQUUsZUFBZSxDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLEdBQUcsR0FBUSxJQUFJLE9BQU8sQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLElBQUksR0FBTyxJQUFJLGVBQWUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMxQyxJQUFJLENBQUMsSUFBSSxHQUFPLElBQUksUUFBUSxFQUFFLENB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QUFRLENBQUMsU0FBUyxFQUFFO2FBQzdCLENBQUM7WUFFRixRQUFRLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztZQUV6QixJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDaEIsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFVixPQUFPLEdBQUcsQ0FBQztJQUNaLENBQUM7O0FBbkllLHFCQUFhLEdBQUcsZUFBZSxDQUFDO0FBQ2hDLFlBQUksR0FBWSxTQUFTLENBQUM7QUF5STFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IE9XZWJFdmVudCBmcm9tIFwiLi9PV2ViRXZlbnRcIjtcbmltcG9ydCBPV2ViQ3VycmVudFVzZXIgZnJvbSBcIi4vT1dlYkN1cnJlbnRVc2VyXCI7XG5pbXBvcnQgT1dlYlZpZXcgZnJvbSBcIi4vT1dlYlZpZXdcIjtcbmltcG9ydCBPV2ViRGF0YVN0b3JlIGZyb20gXCIuL09XZWJEYXRhU3RvcmVcIjtcbmltcG9ydCBPV2ViRGF0ZSBmcm9tIFwiLi9wbHVnaW5zL09XZWJEYXRlXCI7XG5pbXBvcnQgVXRpbHMgZnJvbSBcIi4vdXRpbHMvVXRpbHNcIjtcbmltcG9ydCBPV2ViQ29tLCB7dENvbVJlc3BvbnNlfSBmcm9tIFwiLi9PV2ViQ29tXCI7XG5pbXBvcnQgT1dlYkZvcm1WYWxpZGF0b3IgZnJvbSBcIi4vT1dlYkZvcm1WYWxpZGF0b3JcIjtcbmltcG9ydCBPV2ViU2VydmljZSBmcm9tIFwiLi9PV2ViU2VydmljZVwiO1xuaW1wb3J0IE9XZWJDb25maWdzLCB7dENvbmZpZ0xpc3R9IGZyb20gXCIuL09XZWJDb25maWdzXCI7XG5pbXBvcnQgT1dlYlVybCwge3RVcmxMaXN0fSBmcm9tIFwiLi9PV2ViVXJsXCI7XG5pbXBvcnQgT1dlYlJvdXRlciBmcm9tIFwiLi9PV2ViUm91dGVyXCI7XG5cbmNvbnN0IG5vb3AgPSAoKSA9PiB7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBhYnN0cmFjdCBjbGFzcyBPV2ViQXBwIGV4dGVuZHMgT1dlYkV2ZW50IHtcblxuXHRzdGF0aWMgcmVhZG9ubHkgRVZUX0FQUF9SRUFEWSA9IFwiT1dlYkFwcDpyZWFkeVwiO1xuXHRzdGF0aWMgcmVhZG9ubHkgU0VMRiAgICAgICAgICA9IFwiT1dlYkFwcFwiO1xuXG5cdHJlYWRvbmx5IHZpZXc6IE9XZWJWaWV3O1xuXHRyZWFkb25seSByb3V0ZXI6IE9XZWJSb3V0ZXI7XG5cdHJlYWRvbmx5IHVzZXI6IE9XZWJDdXJyZW50VXNlcjtcblx0cmVhZG9ubHkgY29uZmlnczogT1dlYkNvbmZpZ3M7XG5cdHJlYWRvbmx5IHVybDogT1dlYlVybDtcblx0cmVhZG9ubHkgc2VydmljZXM6IHsgW2tleTogc3RyaW5nXTogT1dlYlNlcnZpY2U8YW55PiB9ID0ge307XG5cblx0cHJvdGVjdGVkIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgYXBwX25hbWU6IHN0cmluZywgYXBwX2NvbmZpZ19saXN0OiB0Q29uZmlnTGlzdCwgYXBwX3VybF9saXN0OiB0VXJsTGlzdCkge1xuXHRcdHN1cGVyKCk7XG5cdFx0dGhpcy5jb25maWdzICA9IG5ldyBPV2ViQ29uZmlncyh0aGlzLCBhcHBfY29uZmlnX2xpc3QpO1xuXHRcdHRoaXMudXJsICAgICAgPSBuZXcgT1dlYlVybCh0aGlzLCBhcHBfdXJsX2xpc3QpO1xuXHRcdHRoaXMudXNlciAgICAgPSBuZXcgT1dlYkN1cnJlbnRVc2VyKHRoaXMpO1xuXHRcdHRoaXMudmlldyAgICAgPSBuZXcgT1dlYlZpZXcoKTtcblx0XHRsZXQgYmFzZV91cmwgID0gdGhpcy5jb25maWdzLmdldChcIk9XX0FQUF9MT0NBTF9CQVNFX1VSTFwiKSxcblx0XHRcdGhhc2hfbW9kZSA9IGZhbHNlICE9PSB0aGlzLmNvbmZpZ3MuZ2V0KFwiT1dfQVBQX1JPVVRFUl9IQVNIX01PREVcIik7XG5cdFx0dGhpcy5yb3V0ZXIgICA9IG5ldyBPV2ViUm91dGVyKGJhc2VfdXJsLCBoYXNoX21vZGUpO1xuXHR9XG5cblx0Z2V0QXBwTmFtZSgpIHtcblx0XHRyZXR1cm4gdGhpcy5hcHBfbmFtZTtcblx0fVxuXG5cdHN0YXJ0KCkge1xuXHRcdGNvbnNvbGUubG9nKFwiW09XZWJBcHBdIGFwcCBzdGFydGVkIVwiKTtcblx0XHR0aGlzLnRyaWdnZXIoT1dlYkFwcC5FVlRfQVBQX1JFQURZKTtcblx0fVxuXG5cdGdldFNlcnZpY2U8VD4oc2VydmljZV9uYW1lOiBzdHJpbmcpOiBPV2ViU2VydmljZTxUPiB7XG5cdFx0cmV0dXJuIHRoaXMuc2VydmljZXNbc2VydmljZV9uYW1lXTtcblx0fVxuXG5cdHJlZ2lzdGVyU2VydmljZShzZXJ2aWNlX25hbWU6IHN0cmluZyk6IHRoaXMge1xuXG5cdFx0aWYgKCF0aGlzLnNlcnZpY2VzW3NlcnZpY2VfbmFtZV0pIHtcblx0XHRcdHRoaXMuc2VydmljZXNbc2VydmljZV9uYW1lXSA9IG5ldyBPV2ViU2VydmljZSh0aGlzLCBzZXJ2aWNlX25hbWUpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0Z2V0Rm9ybVZhbGlkYXRvcihmb3JtOiBIVE1MRm9ybUVsZW1lbnQsIHJlcXVpcmVkOiBBcnJheTxzdHJpbmc+ID0gW10sIGV4Y2x1ZGVkOiBBcnJheTxzdHJpbmc+ID0gW10pIHtcblx0XHRyZXR1cm4gbmV3IE9XZWJGb3JtVmFsaWRhdG9yKHRoaXMsIGZvcm0sIHJlcXVpcmVkLCBleGNsdWRlZCk7XG5cdH1cblxuXHRmb3JjZUxvZ2luKCkge1xuXHRcdE9XZWJEYXRhU3RvcmUuY2xlYXIoKTtcblx0XHR0aGlzLnJlbG9hZEFwcCgpO1xuXHR9XG5cblx0cmVsb2FkQXBwKCkge1xuXHRcdC8vIFRPRE86IGluc3RlYWQgb2YgcmVsb2FkaW5nIHRoZSBjdXJyZW50IGxvY2F0aW9uLCBmaW5kIGEgd2F5IHRvIGJyb3dzZSB0byB3ZWIgYXBwIGVudHJ5IHBvaW50XG5cdFx0Ly8gZm9yIGFuZHJvaWQgJiBpb3MgcmVzdGFydCB0aGUgYXBwXG5cdFx0d2luZG93LmxvY2F0aW9uLnJlbG9hZCh0cnVlKTtcblx0fVxuXG5cdGRlc3Ryb3lBcHAoKSB7XG5cdFx0Ly8gZXJhc2UgZGF0YVxuXHRcdE9XZWJEYXRhU3RvcmUuY2xlYXIoKTtcblx0XHR0aGlzLnJlbG9hZEFwcCgpO1xuXHR9XG5cblx0c2Vzc2lvbkFjdGl2ZSgpOiBib29sZWFuIHtcblx0XHRsZXQgbm93ICAgID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTsvLyBtaWxsaXNlY29uZHNcblx0XHRsZXQgaG91ciAgID0gNjAgKiA2MDsvLyBzZWNvbmRzXG5cdFx0bGV0IGV4cGlyZSA9IHRoaXMudXNlci5nZXRTZXNzaW9uRXhwaXJlKCkgLSBob3VyOy8vIHNlY29uZHNcblx0XHRyZXR1cm4gKGV4cGlyZSAqIDEwMDApID4gbm93O1xuXHR9XG5cblx0dXNlclZlcmlmaWVkKCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiB0aGlzLnVzZXIuZ2V0Q3VycmVudFVzZXIoKSAmJiB0aGlzLnNlc3Npb25BY3RpdmUoKTtcblx0fVxuXG5cdHJlcXVlc3RQcm9taXNlKG1ldGhvZDogc3RyaW5nLCB1cmw6IHN0cmluZywgZGF0YTogYW55LCBmcmVlemU6IGJvb2xlYW4gPSBmYWxzZSk6IFByb21pc2U8dENvbVJlc3BvbnNlPiB7XG5cdFx0bGV0IG0gPSB0aGlzO1xuXHRcdHJldHVybiBuZXcgUHJvbWlzZTx0Q29tUmVzcG9uc2U+KGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcblx0XHRcdG0ucmVxdWVzdChtZXRob2QsIHVybCwgZGF0YSwgcmVzb2x2ZSwgcmVqZWN0LCBmcmVlemUpO1xuXHRcdH0pO1xuXHR9XG5cblx0cmVxdWVzdChtZXRob2Q6IHN0cmluZywgdXJsOiBzdHJpbmcsIGRhdGE6IGFueSwgc3VjY2VzczogKHJlc3BvbnNlOiB0Q29tUmVzcG9uc2UpID0+IHZvaWQgPSBub29wLCBmYWlsOiAocmVzcG9uc2U6IHRDb21SZXNwb25zZSkgPT4gdm9pZCA9IG5vb3AsIGZyZWV6ZTogYm9vbGVhbiA9IGZhbHNlKTogT1dlYkNvbSB7XG5cdFx0bGV0IGFwcCA9IHRoaXM7XG5cblx0XHRpZiAoZnJlZXplKSB7XG5cdFx0XHRhcHAudmlldy5mcmVlemUoKTtcblx0XHR9XG5cblx0XHRsZXQgb3B0aW9ucyA9IHtcblx0XHRcdHVybCAgICAgICAgOiB1cmwsXG5cdFx0XHRtZXRob2QgICAgIDogbWV0aG9kLFxuXHRcdFx0ZGF0YSAgICAgICA6IGRhdGEsXG5cdFx0XHRiYWROZXdzU2hvdzogZmFsc2Vcblx0XHR9O1xuXG5cdFx0bGV0IGNvbSA9IG5ldyBPV2ViQ29tKHRoaXMsIG9wdGlvbnMpO1xuXHRcdGNvbS5vbihPV2ViQ29tLkVWVF9DT01fUkVRVUVTVF9TVUNDRVNTLCAocmVzcG9uc2U6IHRDb21SZXNwb25zZSkgPT4ge1xuXHRcdFx0Ly8gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdFx0XHRpZiAoZnJlZXplKSB7XG5cdFx0XHRcdGFwcC52aWV3LnVuZnJlZXplKCk7XG5cdFx0XHR9XG5cblx0XHRcdHN1Y2Nlc3MocmVzcG9uc2UpO1xuXHRcdFx0Ly8gfSwgMTAwMCk7XG5cdFx0fSkub24oT1dlYkNvbS5FVlRfQ09NX1JFUVVFU1RfRVJST1IsIChyZXNwb25zZTogdENvbVJlc3BvbnNlKSA9PiB7XG5cdFx0XHRpZiAocmVzcG9uc2VbXCJtc2dcIl0gPT09IFwiT1pfRVJST1JfWU9VX0FSRV9OT1RfQURNSU5cIikge1xuXHRcdFx0XHRhcHAuZGVzdHJveUFwcCgpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoZnJlZXplKSB7XG5cdFx0XHRcdGFwcC52aWV3LnVuZnJlZXplKCk7XG5cdFx0XHR9XG5cblx0XHRcdGZhaWwocmVzcG9uc2UpO1xuXHRcdH0pLm9uKE9XZWJDb20uRVZUX0NPTV9ORVRXT1JLX0VSUk9SLCAoKSA9PiB7XG5cdFx0XHRpZiAoZnJlZXplKSB7XG5cdFx0XHRcdGFwcC52aWV3LnVuZnJlZXplKCk7XG5cdFx0XHR9XG5cdFx0XHRsZXQgcmVzcG9uc2U6IHRDb21SZXNwb25zZSA9IHtcblx0XHRcdFx0XCJlcnJvclwiOiAxLFxuXHRcdFx0XHRcIm1zZ1wiICA6IFwiT1pfRVJST1JfUkVRVUVTVF9GQUlMXCIsXG5cdFx0XHRcdFwidXRpbWVcIjogT1dlYkRhdGUudGltZXN0YW1wKClcblx0XHRcdH07XG5cblx0XHRcdHJlc3BvbnNlLm5ldGVycm9yID0gdHJ1ZTtcblxuXHRcdFx0ZmFpbChyZXNwb25zZSk7XG5cdFx0fSkuc2VuZCgpO1xuXG5cdFx0cmV0dXJuIGNvbTtcblx0fVxuXG5cdGFic3RyYWN0IHNob3dIb21lUGFnZSgpOiB0aGlzXG5cblx0YWJzdHJhY3Qgc2hvd0xvZ2luUGFnZSgpOiB0aGlzXG5cblx0YWJzdHJhY3Qgc2hvd1NpZ25VcFBhZ2UoKTogdGhpc1xufTtcbiJdfQ==