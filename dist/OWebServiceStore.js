import { getEntityCache, GoblEntity } from 'gobl-utils-ts';
import { escapeRegExp, isPlainObject } from './utils';
import OWebService from './OWebService';
const getId = (item) => item.singlePKValue();
const _with = (target, key, item) => {
    return { ...target, [key]: item };
}, _without = (target, key) => {
    delete target[key];
    return { ...target };
};
export default class OWebServiceStore extends OWebService {
    entity;
    items = {};
    relations = {};
    /**
     * OWebServiceStore constructor.
     *
     * @param _appContext
     * @param entity
     * @param service
     */
    constructor(_appContext, entity, service) {
        super(_appContext, service);
        this.entity = entity;
    }
    /**
     * Creates request to get an item by id.
     *
     * @param id The item id.
     * @param relations The relations to retrieve.
     */
    getItem(id, relations = '') {
        const ctx = this;
        return super
            .getItem(id, relations)
            .onGoodNews(function goodNewsHandler(response) {
            ctx.addItemToList(response.json.data.item, response.json.data.relations);
        });
    }
    /**
     * Creates request to get items list.
     *
     * @param options
     */
    getItems(options = {}) {
        const ctx = this;
        return super
            .getItems(options)
            .onGoodNews(function goodNewsHandler(response) {
            ctx.addItemsToList(response.json.data.items, response.json.data.relations);
        });
    }
    /**
     * Creates request to add new item.
     *
     * @param data
     */
    addItem(data) {
        const ctx = this;
        return super.addItem(data).onGoodNews(function goodNewsHandler(response) {
            ctx.addCreated(response.json);
        });
    }
    /**
     * Creates update request for a given item.
     *
     * @param item
     */
    updateItem(item, formData = null) {
        const ctx = this;
        let id, target;
        if (item instanceof GoblEntity) {
            id = getId(item);
            target = item;
        }
        else {
            id = item;
            target = this.identify(id);
        }
        const diff = formData ? formData : target ? target.toObject(true) : {};
        target && target.isSaving(true);
        return super
            .updateItem(id, diff)
            .onGoodNews(function goodNewsHandler(response) {
            target && ctx.setSaved(target, response.json);
        })
            .onFinish(function finishHandler() {
            target && target.isSaving(false);
        });
    }
    /**
     * Creates a delete request for a given item.
     *
     * @param item
     */
    deleteItem(item) {
        const ctx = this;
        let id, target;
        if (item instanceof GoblEntity) {
            id = getId(item);
            target = item;
        }
        else {
            id = item;
            target = this.identify(id);
        }
        target && target.isDeleting(true);
        return super
            .deleteItem(id)
            .onGoodNews(function goodNewsHandler(response) {
            ctx.setDeleted(response.json);
        })
            .onFinish(function finishHandler() {
            target && target.isDeleting(false);
        });
    }
    /**
     * Adds a list of items to this store list.
     *
     * @param items
     * @param relations
     */
    addItemsToList(items, relations = {}) {
        const ctx = this, list = (isPlainObject(items) ? Object.values(items) : items || []);
        list.forEach((item) => {
            const itemId = getId(item);
            ctx.safelyAddItem(item);
            if (!ctx.relations[itemId]) {
                ctx.relations = _with(ctx.relations, itemId, {});
            }
            for (const rel in relations) {
                if (Object.prototype.hasOwnProperty.call(relations, rel)) {
                    const data = relations[rel];
                    if (data[itemId]) {
                        ctx.relations[itemId] = _with(ctx.relations[itemId], rel, data[itemId]);
                    }
                }
            }
        });
    }
    /**
     * Adds a given item and its relations to this store.
     *
     * @param item
     * @param relations
     */
    addItemToList(item, relations = {}) {
        const ctx = this, itemId = getId(item);
        ctx.safelyAddItem(item);
        if (!ctx.relations[itemId]) {
            ctx.relations = _with(ctx.relations, itemId, {});
        }
        for (const rel in relations) {
            if (Object.prototype.hasOwnProperty.call(relations, rel)) {
                ctx.relations[itemId] = _with(ctx.relations[itemId], rel, relations[rel]);
            }
        }
    }
    /**
     * Safely add item to this store.
     *
     * @param item
     * @private
     */
    safelyAddItem(item) {
        const key = getId(item), cachedItem = this.items[key];
        if (cachedItem) {
            cachedItem.doHydrate(item.toObject(), true);
        }
        else {
            this.items = _with(this.items, key, item);
        }
        return this;
    }
    /**
     * Modify successfully saved item state and data.
     *
     * @param target
     * @param response
     * @private
     */
    setSaved(target, response) {
        const item = response.data.item;
        target.doHydrate(item.toObject(), true);
        return this.safelyAddItem(target);
    }
    /**
     * Adds a newly created item to this store.
     *
     * @param response
     */
    addCreated(response) {
        return this.safelyAddItem(response.data.item);
    }
    /**
     * Removes a given item from this store when deleted.
     *
     * @param response
     */
    setDeleted(response) {
        const item = response.data.item;
        this.items = _without(this.items, getId(item));
        return this;
    }
    /**
     * Gets a given item relations.
     *
     * @param item
     * @param relation
     */
    itemRelation(item, relation) {
        const id = getId(item);
        return this.relations[id] && this.relations[id][relation];
    }
    /**
     * Identify a given item in this store by its id.
     *
     * @param id
     * @param checkCache
     */
    identify(id, checkCache = true) {
        const item = this.items[id];
        let c;
        if (item)
            return item;
        if (checkCache) {
            c = getEntityCache(this.entity.name);
            return c && c[id];
        }
        return undefined;
    }
    /**
     * Gets this store items list.
     *
     * @param ids
     */
    list(ids = []) {
        const list = [], len = ids.length;
        if (len) {
            for (let i = 0; i < len; i++) {
                const id = ids[i], item = this.identify(id);
                if (item) {
                    list.push(item);
                }
            }
        }
        else {
            for (const key in this.items) {
                if (Object.prototype.hasOwnProperty.call(this.items, key)) {
                    list.push(this.items[key]);
                }
            }
        }
        return list;
    }
    /**
     * Order items.
     *
     * @param order
     */
    orderBy(order) {
        const keys = Object.keys(this.items);
        return keys.map((key) => this.items[key]).sort(order);
    }
    /**
     * Order items by value of a given column.
     *
     * @param column
     */
    orderByValueOf(column) {
        return this.orderBy((a, b) => {
            return a[column] - b[column];
        });
    }
    /**
     * Filter items in this store or in a given list.
     *
     * @param list
     * @param predicate
     * @param max
     */
    filter(list = this.list(), predicate, max = Infinity) {
        const result = [], len = list.length;
        for (let i = 0; i < len && result.length < max; i++) {
            if (predicate(list[i], i)) {
                result.push(list[i]);
            }
        }
        return result;
    }
    /**
     * Select some items in this store.
     *
     * @alias filter
     *
     * @param list
     * @param predicate
     * @param max
     */
    select(list = this.list(), predicate, max = Infinity) {
        return this.filter(list, predicate, max);
    }
    /**
     * Search items in this store or in a given items list.
     *
     * @param list
     * @param search
     * @param stringBuilder
     */
    search(list = this.list(), search, stringBuilder) {
        if (!(search = search.trim()).length) {
            return list;
        }
        const reg = new RegExp(escapeRegExp(search), 'i');
        return list.filter((item, index) => {
            const v = stringBuilder(item, index);
            return reg.test(v);
        });
    }
    /**
     * Count items in this store.
     */
    totalCount() {
        return Object.keys(this.items).length;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYlNlcnZpY2VTdG9yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9PV2ViU2VydmljZVN0b3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsVUFBVSxFQUFzQixNQUFNLGVBQWUsQ0FBQztBQVUvRSxPQUFPLEVBQUUsWUFBWSxFQUFFLGFBQWEsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUN0RCxPQUFPLFdBQVcsTUFBTSxlQUFlLENBQUM7QUFLeEMsTUFBTSxLQUFLLEdBQUcsQ0FBQyxJQUF3QixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7QUFFakUsTUFBTSxLQUFLLEdBQUcsQ0FBQyxNQUFXLEVBQUUsR0FBb0IsRUFBRSxJQUFTLEVBQUUsRUFBRTtJQUM3RCxPQUFPLEVBQUUsR0FBRyxNQUFNLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQztBQUNuQyxDQUFDLEVBQ0QsUUFBUSxHQUFHLENBQUMsTUFBVyxFQUFFLEdBQW9CLEVBQUUsRUFBRTtJQUNoRCxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuQixPQUFPLEVBQUUsR0FBRyxNQUFNLEVBQUUsQ0FBQztBQUN0QixDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsT0FBTyxPQUFPLGdCQUVuQixTQUFRLFdBQWM7SUFhTDtJQVpSLEtBQUssR0FBeUIsRUFBRSxDQUFDO0lBQ2pDLFNBQVMsR0FBMkIsRUFBRSxDQUFDO0lBRWpEOzs7Ozs7T0FNRztJQUNILFlBQ0MsV0FBb0IsRUFDSCxNQUFpQyxFQUNsRCxPQUFlO1FBRWYsS0FBSyxDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUhYLFdBQU0sR0FBTixNQUFNLENBQTJCO0lBSW5ELENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILE9BQU8sQ0FBQyxFQUFVLEVBQUUsU0FBUyxHQUFHLEVBQUU7UUFDakMsTUFBTSxHQUFH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Q0FBQyxDQUFDLENBQUMsQ0FBQzthQUNyQjtTQUNEO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDZixDQUFDO0lBRUQ7Ozs7Ozs7O09BUUc7SUFDSCxNQUFNLENBQ0wsT0FBWSxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQ3ZCLFNBQStDLEVBQy9DLEdBQUcsR0FBRyxRQUFRO1FBRWQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNILE1BQU0sQ0FDTCxPQUFZLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFDdkIsTUFBYyxFQUNkLGFBQWtEO1FBRWxELElBQUksQ0FBQyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLEVBQUU7WUFDckMsT0FBTyxJQUFJLENBQUM7U0FDWjtRQUVELE1BQU0sR0FBRyxHQUFHLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUVsRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFTLEVBQUUsS0FBYSxFQUFFLEVBQUU7WUFDL0MsTUFBTSxDQUFDLEdBQUcsYUFBYSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztZQUNyQyxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSCxVQUFVO1FBQ1QsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDdkMsQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0RW50aXR5Q2FjaGUsIEdvYmxFbnRpdHksIEdvYmxTaW5nbGVQS0VudGl0eSB9IGZyb20gJ2dvYmwtdXRpbHMtdHMnO1xuaW1wb3J0IHtcblx0T0FwaUFkZFJlc3BvbnNlLFxuXHRPQXBpRGVsZXRlUmVzcG9uc2UsXG5cdE9BcGlVcGRhdGVSZXNwb25zZSxcblx0T0FwaVNlcnZpY2VSZXF1ZXN0T3B0aW9ucyxcblx0T0FwaUdldEFsbFJlc3BvbnNlLFxuXHRPQXBpR2V0UmVzcG9uc2UsXG59IGZyb20gJy4vb3pvbmUnO1xuaW1wb3J0IE9XZWJBcHAgZnJvbSAnLi9PV2ViQXBwJztcbmltcG9ydCB7IGVzY2FwZVJlZ0V4cCwgaXNQbGFpbk9iamVjdCB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IE9XZWJTZXJ2aWNlIGZyb20gJy4vT1dlYlNlcnZpY2UnO1xuaW1wb3J0IE9XZWJYSFIgZnJvbSAnLi9PV2ViWEhSJztcbmltcG9ydCB7IE9XZWJGb3JtRGF0YSB9IGZyb20gJy4vT1dlYkZvcm0nO1xuaW1wb3J0IHsgT05ldFJlcXVlc3RCb2R5IH0gZnJvbSAnLi9PV2ViTmV0JztcblxuY29uc3QgZ2V0SWQgPSAoaXRlbTogR29ibFNpbmdsZVBLRW50aXR5KSA9PiBpdGVtLnNpbmdsZVBLVmFsdWUoKTtcblxuY29uc3QgX3dpdGggPSAodGFyZ2V0OiBhbnksIGtleTogc3RyaW5nIHwgbnVtYmVyLCBpdGVtOiBhbnkpID0+IHtcblx0XHRyZXR1cm4geyAuLi50YXJnZXQsIFtrZXldOiBpdGVtIH07XG5cdH0sXG5cdF93aXRob3V0ID0gKHRhcmdldDogYW55LCBrZXk6IHN0cmluZyB8IG51bWJlcikgPT4ge1xuXHRcdGRlbGV0ZSB0YXJnZXRba2V5XTtcblx0XHRyZXR1cm4geyAuLi50YXJnZXQgfTtcblx0fTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT1dlYlNlcnZpY2VTdG9yZTxcblx0VCBleHRlbmRzIEdvYmxTaW5nbGVQS0VudGl0eVxuPiBleHRlbmRzIE9XZWJTZXJ2aWNlPFQ+IHtcblx0cHJvdGVjdGVkIGl0ZW1zOiB7IFtrZXk6IHN0cmluZ106IFQgfSA9IHt9O1xuXHRwcm90ZWN0ZWQgcmVsYXRpb25zOiB7IFtrZXk6IHN0cmluZ106IGFueSB9ID0ge307XG5cblx0LyoqXG5cdCAqIE9XZWJTZXJ2aWNlU3RvcmUgY29uc3RydWN0b3IuXG5cdCAqXG5cdCAqIEBwYXJhbSBfYXBwQ29udGV4dFxuXHQgKiBAcGFyYW0gZW50aXR5XG5cdCAqIEBwYXJhbSBzZXJ2aWNlXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvcihcblx0XHRfYXBwQ29udGV4dDogT1dlYkFwcCxcblx0XHRwcml2YXRlIHJlYWRvbmx5IGVudGl0eTogdHlwZW9mIEdvYmxTaW5nbGVQS0VudGl0eSxcblx0XHRzZXJ2aWNlOiBzdHJpbmdcblx0KSB7XG5cdFx0c3VwZXIoX2FwcENvbnRleHQsIHNlcnZpY2UpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgcmVxdWVzdCB0byBnZXQgYW4gaXRlbSBieSBpZC5cblx0ICpcblx0ICogQHBhcmFtIGlkIFRoZSBpdGVtIGlkLlxuXHQgKiBAcGFyYW0gcmVsYXRpb25zIFRoZSByZWxhdGlvbnMgdG8gcmV0cmlldmUuXG5cdCAqL1xuXHRnZXRJdGVtKGlkOiBzdHJpbmcsIHJlbGF0aW9ucyA9ICcnKTogT1dlYlhIUjxPQXBpR2V0UmVzcG9uc2U8VD4+IHtcblx0XHRjb25zdCBjdHggPSB0aGlzO1xuXG5cdFx0cmV0dXJuIHN1cGVyXG5cdFx0XHQuZ2V0SXRlbShpZCwgcmVsYXRpb25zKVxuXHRcdFx0Lm9uR29vZE5ld3MoZnVuY3Rpb24gZ29vZE5ld3NIYW5kbGVyKHJlc3BvbnNlKSB7XG5cdFx0XHRcdGN0eC5hZGRJdGVtVG9MaXN0KFxuXHRcdFx0XHRcdHJlc3BvbnNlLmpzb24uZGF0YS5pdGVtLFxuXHRcdFx0XHRcdHJlc3BvbnNlLmpzb24uZGF0YS5yZWxhdGlvbnNcblx0XHRcdFx0KTtcblx0XHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgcmVxdWVzdCB0byBnZXQgaXRlbXMgbGlzdC5cblx0ICpcblx0ICogQHBhcmFtIG9wdGlvbnNcblx0ICovXG5cdGdldEl0ZW1zKFxuXHRcdG9wdGlvbnM6IE9BcGlTZXJ2aWNlUmVxdWVzdE9wdGlvbnMgPSB7fVxuXHQpOiBPV2ViWEhSPE9BcGlHZXRBbGxSZXNwb25zZTxUPj4ge1xuXHRcdGNvbnN0IGN0eCA9IHRoaXM7XG5cblx0XHRyZXR1cm4gc3VwZXJcblx0XHRcdC5nZXRJdGVtcyhvcHRpb25zKVxuXHRcdFx0Lm9uR29vZE5ld3MoZnVuY3Rpb24gZ29vZE5ld3NIYW5kbGVyKHJlc3BvbnNlKSB7XG5cdFx0XHRcdGN0eC5hZGRJdGVtc1RvTGlzdChcblx0XHRcdFx0XHRyZXNwb25zZS5qc29uLmRhdGEuaXRlbXMsXG5cdFx0XHRcdFx0cmVzcG9uc2UuanNvbi5kYXRhLnJlbGF0aW9uc1xuXHRcdFx0XHQpO1xuXHRcdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyByZXF1ZXN0IHRvIGFkZCBuZXcgaXRlbS5cblx0ICpcblx0ICogQHBhcmFtIGRhdGFcblx0ICovXG5cdGFkZEl0ZW0oZGF0YTogT1dlYkZvcm1EYXRhKTogT1dlYlhIUjxPQXBpQWRkUmVzcG9uc2U8VD4+IHtcblx0XHRjb25zdCBjdHggPSB0aGlzO1xuXHRcdHJldHVybiBzdXBlci5hZGRJdGVtKGRhdGEpLm9uR29vZE5ld3MoZnVuY3Rpb24gZ29vZE5ld3NIYW5kbGVyKHJlc3BvbnNlKSB7XG5cdFx0XHRjdHguYWRkQ3JlYXRlZChyZXNwb25zZS5qc29uKTtcblx0XHR9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIHVwZGF0ZSByZXF1ZXN0IGZvciBhIGdpdmVuIGl0ZW0uXG5cdCAqXG5cdCAqIEBwYXJhbSBpdGVtXG5cdCAqL1xuXHR1cGRhdGVJdGVtKFxuXHRcdGl0ZW06IFQgfCBzdHJpbmcsXG5cdFx0Zm9ybURhdGE6IE9OZXRSZXF1ZXN0Qm9keSB8IG51bGwgPSBudWxsXG5cdCk6IE9XZWJYSFI8T0FwaVVwZGF0ZVJlc3BvbnNlPFQ+PiB7XG5cdFx0Y29uc3QgY3R4ID0gdGhpcztcblx0XHRsZXQgaWQsIHRhcmdldDogVCB8IHVuZGVmaW5lZDtcblxuXHRcdGlmIChpdGVtIGluc3RhbmNlb2YgR29ibEVudGl0eSkge1xuXHRcdFx0aWQgPSBnZXRJZChpdGVtKTtcblx0XHRcdHRhcmdldCA9IGl0ZW07XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlkID0gaXRlbTtcblx0XHRcdHRhcmdldCA9IHRoaXMuaWRlbnRpZnkoaWQpO1xuXHRcdH1cblxuXHRcdGNvbnN0IGRpZmYgPSBmb3JtRGF0YSA/IGZvcm1EYXRhIDogdGFyZ2V0ID8gdGFyZ2V0LnRvT2JqZWN0KHRydWUpIDoge307XG5cblx0XHR0YXJnZXQgJiYgdGFyZ2V0LmlzU2F2aW5nKHRydWUpO1xuXG5cdFx0cmV0dXJuIHN1cGVyXG5cdFx0XHQudXBkYXRlSXRlbShpZCwgZGlmZilcblx0XHRcdC5vbkdvb2ROZXdzKGZ1bmN0aW9uIGdvb2ROZXdzSGFuZGxlcihyZXNwb25zZSkge1xuXHRcdFx0XHR0YXJnZXQgJiYgY3R4LnNldFNhdmVkKHRhcmdldCwgcmVzcG9uc2UuanNvbik7XG5cdFx0XHR9KVxuXHRcdFx0Lm9uRmluaXNoKGZ1bmN0aW9uIGZpbmlzaEhhbmRsZXIoKSB7XG5cdFx0XHRcdHRhcmdldCAmJiB0YXJnZXQuaXNTYXZpbmcoZmFsc2UpO1xuXHRcdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIGRlbGV0ZSByZXF1ZXN0IGZvciBhIGdpdmVuIGl0ZW0uXG5cdCAqXG5cdCAqIEBwYXJhbSBpdGVtXG5cdCAqL1xuXHRkZWxldGVJdGVtKGl0ZW06IFQgfCBzdHJpbmcpOiBPV2ViWEhSPE9BcGlEZWxldGVSZXNwb25zZTxUPj4ge1xuXHRcdGNvbnN0IGN0eCA9IHRoaXM7XG5cdFx0bGV0IGlkLCB0YXJnZXQ6IFQgfCB1bmRlZmluZWQ7XG5cblx0XHRpZiAoaXRlbSBpbnN0YW5jZW9mIEdvYmxFbnRpdHkpIHtcblx0XHRcdGlkID0gZ2V0SWQoaXRlbSk7XG5cdFx0XHR0YXJnZXQgPSBpdGVtO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZCA9IGl0ZW07XG5cdFx0XHR0YXJnZXQgPSB0aGlzLmlkZW50aWZ5KGlkKTtcblx0XHR9XG5cblx0XHR0YXJnZXQgJiYgdGFyZ2V0LmlzRGVsZXRpbmcodHJ1ZSk7XG5cblx0XHRyZXR1cm4gc3VwZXJcblx0XHRcdC5kZWxldGVJdGVtKGlkKVxuXHRcdFx0Lm9uR29vZE5ld3MoZnVuY3Rpb24gZ29vZE5ld3NIYW5kbGVyKHJlc3BvbnNlKSB7XG5cdFx0XHRcdGN0eC5zZXREZWxldGVkKHJlc3BvbnNlLmpzb24pO1xuXHRcdFx0fSlcblx0XHRcdC5vbkZpbmlzaChmdW5jdGlvbiBmaW5pc2hIYW5kbGVyKCkge1xuXHRcdFx0XHR0YXJnZXQgJiYgdGFyZ2V0LmlzRGVsZXRpbmcoZmFsc2UpO1xuXHRcdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogQWRkcyBhIGxpc3Qgb2YgaXRlbXMgdG8gdGhpcyBzdG9yZSBsaXN0LlxuXHQgKlxuXHQgKiBAcGFyYW0gaXRlbXNcblx0ICogQHBhcmFtIHJlbGF0aW9uc1xuXHQgKi9cblx0YWRkSXRlbXNUb0xpc3QoaXRlbXM6IFRbXSB8IHsgW2tleTogc3RyaW5nXTogVCB9LCByZWxhdGlvbnM6IGFueSA9IHt9KTogdm9pZCB7XG5cdFx0Y29uc3QgY3R4ID0gdGhpcyxcblx0XHRcdGxpc3Q6IFRbXSA9IChcblx0XHRcdFx0aXNQbGFpbk9iamVjdChpdGVtcykgPyBPYmplY3QudmFsdWVzKGl0ZW1zKSA6IGl0ZW1zIHx8IFtdXG5cdFx0XHQpIGFzIFRbXTtcblxuXHRcdGxpc3QuZm9yRWFjaCgoaXRlbSkgPT4ge1xuXHRcdFx0Y29uc3QgaXRlbUlkID0gZ2V0SWQoaXRlbSk7XG5cblx0XHRcdGN0eC5zYWZlbHlBZGRJdGVtKGl0ZW0pO1xuXG5cdFx0XHRpZiAoIWN0eC5yZWxhdGlvbnNbaXRlbUlkXSkge1xuXHRcdFx0XHRjdHgucmVsYXRpb25zID0gX3dpdGgoY3R4LnJlbGF0aW9ucywgaXRlbUlkLCB7fSk7XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoY29uc3QgcmVsIGluIHJlbGF0aW9ucykge1xuXHRcdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlbGF0aW9ucywgcmVsKSkge1xuXHRcdFx0XHRcdGNvbnN0IGRhdGEgPSByZWxhdGlvbnNbcmVsXTtcblxuXHRcdFx0XHRcdGlmIChkYXRhW2l0ZW1JZF0pIHtcblx0XHRcdFx0XHRcdGN0eC5yZWxhdGlvbnNbaXRlbUlkXSA9IF93aXRoKFxuXHRcdFx0XHRcdFx0XHRjdHgucmVsYXRpb25zW2l0ZW1JZF0sXG5cdFx0XHRcdFx0XHRcdHJlbCxcblx0XHRcdFx0XHRcdFx0ZGF0YVtpdGVtSWRdXG5cdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgYSBnaXZlbiBpdGVtIGFuZCBpdHMgcmVsYXRpb25zIHRvIHRoaXMgc3RvcmUuXG5cdCAqXG5cdCAqIEBwYXJhbSBpdGVtXG5cdCAqIEBwYXJhbSByZWxhdGlvbnNcblx0ICovXG5cdGFkZEl0ZW1Ub0xpc3QoaXRlbTogVCwgcmVsYXRpb25zOiBhbnkgPSB7fSk6IHZvaWQge1xuXHRcdGNvbnN0IGN0eCA9IHRoaXMsXG5cdFx0XHRpdGVtSWQgPSBnZXRJZChpdGVtKTtcblxuXHRcdGN0eC5zYWZlbHlBZGRJdGVtKGl0ZW0pO1xuXG5cdFx0aWYgKCFjdHgucmVsYXRpb25zW2l0ZW1JZF0pIHtcblx0XHRcdGN0eC5yZWxhdGlvbnMgPSBfd2l0aChjdHgucmVsYXRpb25zLCBpdGVtSWQsIHt9KTtcblx0XHR9XG5cblx0XHRmb3IgKGNvbnN0IHJlbCBpbiByZWxhdGlvbnMpIHtcblx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocmVsYXRpb25zLCByZWwpKSB7XG5cdFx0XHRcdGN0eC5yZWxhdGlvbnNbaXRlbUlkXSA9IF93aXRoKFxuXHRcdFx0XHRcdGN0eC5yZWxhdGlvbnNbaXRlbUlkXSxcblx0XHRcdFx0XHRyZWwsXG5cdFx0XHRcdFx0cmVsYXRpb25zW3JlbF1cblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogU2FmZWx5IGFkZCBpdGVtIHRvIHRoaXMgc3RvcmUuXG5cdCAqXG5cdCAqIEBwYXJhbSBpdGVtXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRwcml2YXRlIHNhZmVseUFkZEl0ZW0oaXRlbTogVCkge1xuXHRcdGNvbnN0IGtleSA9IGdldElkKGl0ZW0pLFxuXHRcdFx0Y2FjaGVkSXRlbSA9IHRoaXMuaXRlbXNba2V5XTtcblxuXHRcdGlmIChjYWNoZWRJdGVtKSB7XG5cdFx0XHRjYWNoZWRJdGVtLmRvSHlkcmF0ZShpdGVtLnRvT2JqZWN0KCksIHRydWUpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLml0ZW1zID0gX3dpdGgodGhpcy5pdGVtcywga2V5LCBpdGVtKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBNb2RpZnkgc3VjY2Vzc2Z1bGx5IHNhdmVkIGl0ZW0gc3RhdGUgYW5kIGRhdGEuXG5cdCAqXG5cdCAqIEBwYXJhbSB0YXJnZXRcblx0ICogQHBhcmFtIHJlc3BvbnNlXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRwcml2YXRlIHNldFNhdmVkKHRhcmdldDogVCwgcmVzcG9uc2U6IE9BcGlVcGRhdGVSZXNwb25zZTxUPikge1xuXHRcdGNvbnN0IGl0ZW0gPSByZXNwb25zZS5kYXRhLml0ZW07XG5cblx0XHR0YXJnZXQuZG9IeWRyYXRlKGl0ZW0udG9PYmplY3QoKSwgdHJ1ZSk7XG5cblx0XHRyZXR1cm4gdGhpcy5zYWZlbHlBZGRJdGVtKHRhcmdldCk7XG5cdH1cblxuXHQvKipcblx0ICogQWRkcyBhIG5ld2x5IGNyZWF0ZWQgaXRlbSB0byB0aGlzIHN0b3JlLlxuXHQgKlxuXHQgKiBAcGFyYW0gcmVzcG9uc2Vcblx0ICovXG5cdHByaXZhdGUgYWRkQ3JlYXRlZChyZXNwb25zZTogT0FwaUFkZFJlc3BvbnNlPFQ+KSB7XG5cdFx0cmV0dXJuIHRoaXMuc2FmZWx5QWRkSXRlbShyZXNwb25zZS5kYXRhLml0ZW0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlbW92ZXMgYSBnaXZlbiBpdGVtIGZyb20gdGhpcyBzdG9yZSB3aGVuIGRlbGV0ZWQuXG5cdCAqXG5cdCAqIEBwYXJhbSByZXNwb25zZVxuXHQgKi9cblx0cHJpdmF0ZSBzZXREZWxldGVkKHJlc3BvbnNlOiBPQXBpRGVsZXRlUmVzcG9uc2U8VD4pIHtcblx0XHRjb25zdCBpdGVtID0gcmVzcG9uc2UuZGF0YS5pdGVtO1xuXHRcdHRoaXMuaXRlbXMgPSBfd2l0aG91dCh0aGlzLml0ZW1zLCBnZXRJZChpdGVtKSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogR2V0cyBhIGdpdmVuIGl0ZW0gcmVsYXRpb25zLlxuXHQgKlxuXHQgKiBAcGFyYW0gaXRlbVxuXHQgKiBAcGFyYW0gcmVsYXRpb25cblx0ICovXG5cdGl0ZW1SZWxhdGlvbjxaPihpdGVtOiBULCByZWxhdGlvbjogc3RyaW5nKTogWiB8IHVuZGVmaW5lZCB7XG5cdFx0Y29uc3QgaWQgPSBnZXRJZChpdGVtKTtcblx0XHRyZXR1cm4gdGhpcy5yZWxhdGlvbnNbaWRdICYmIHRoaXMucmVsYXRpb25zW2lkXVtyZWxhdGlvbl07XG5cdH1cblxuXHQvKipcblx0ICogSWRlbnRpZnkgYSBnaXZlbiBpdGVtIGluIHRoaXMgc3RvcmUgYnkgaXRzIGlkLlxuXHQgKlxuXHQgKiBAcGFyYW0gaWRcblx0ICogQHBhcmFtIGNoZWNrQ2FjaGVcblx0ICovXG5cdGlkZW50aWZ5KGlkOiBzdHJpbmcsIGNoZWNrQ2FjaGUgPSB0cnVlKTogVCB8IHVuZGVmaW5lZCB7XG5cdFx0Y29uc3QgaXRlbSA9IHRoaXMuaXRlbXNbaWRdO1xuXHRcdGxldCBjO1xuXG5cdFx0aWYgKGl0ZW0pIHJldHVybiBpdGVtO1xuXG5cdFx0aWYgKGNoZWNrQ2FjaGUpIHtcblx0XHRcdGMgPSBnZXRFbnRpdHlDYWNoZSh0aGlzLmVudGl0eS5uYW1lKSBhcyBhbnk7XG5cblx0XHRcdHJldHVybiBjICYmIGNbaWRdO1xuXHRcdH1cblxuXHRcdHJldHVybiB1bmRlZmluZWQ7XG5cdH1cblxuXHQvKipcblx0ICogR2V0cyB0aGlzIHN0b3JlIGl0ZW1zIGxpc3QuXG5cdCAqXG5cdCAqIEBwYXJhbSBpZHNcblx0ICovXG5cdGxpc3QoaWRzOiBzdHJpbmdbXSA9IFtdKTogVFtdIHtcblx0XHRjb25zdCBsaXN0OiBUW10gPSBbXSxcblx0XHRcdGxlbiA9IGlkcy5sZW5ndGg7XG5cdFx0aWYgKGxlbikge1xuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRjb25zdCBpZCA9IGlkc1tpXSxcblx0XHRcdFx0XHRpdGVtID0gdGhpcy5pZGVudGlmeShpZCk7XG5cdFx0XHRcdGlmIChpdGVtKSB7XG5cdFx0XHRcdFx0bGlzdC5wdXNoKGl0ZW0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoY29uc3Qga2V5IGluIHRoaXMuaXRlbXMpIHtcblx0XHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLml0ZW1zLCBrZXkpKSB7XG5cdFx0XHRcdFx0bGlzdC5wdXNoKHRoaXMuaXRlbXNba2V5XSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbGlzdDtcblx0fVxuXG5cdC8qKlxuXHQgKiBPcmRlciBpdGVtcy5cblx0ICpcblx0ICogQHBhcmFtIG9yZGVyXG5cdCAqL1xuXHRvcmRlckJ5KG9yZGVyOiAoYTogVCwgYjogVCkgPT4gbnVtYmVyKTogVFtdIHtcblx0XHRjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGhpcy5pdGVtcyk7XG5cblx0XHRyZXR1cm4ga2V5cy5tYXAoKGtleSkgPT4gdGhpcy5pdGVtc1trZXldKS5zb3J0KG9yZGVyKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBPcmRlciBpdGVtcyBieSB2YWx1ZSBvZiBhIGdpdmVuIGNvbHVtbi5cblx0ICpcblx0ICogQHBhcmFtIGNvbHVtblxuXHQgKi9cblx0b3JkZXJCeVZhbHVlT2YoY29sdW1uOiBzdHJpbmcpOiBUW10ge1xuXHRcdHJldHVybiB0aGlzLm9yZGVyQnkoKGE6IGFueSwgYjogYW55KSA9PiB7XG5cdFx0XHRyZXR1cm4gYVtjb2x1bW5dIC0gYltjb2x1bW5dO1xuXHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIEZpbHRlciBpdGVtcyBpbiB0aGlzIHN0b3JlIG9yIGluIGEgZ2l2ZW4gbGlzdC5cblx0ICpcblx0ICogQHBhcmFtIGxpc3Rcblx0ICogQHBhcmFtIHByZWRpY2F0ZVxuXHQgKiBAcGFyYW0gbWF4XG5cdCAqL1xuXHRmaWx0ZXIoXG5cdFx0bGlzdDogVFtdID0gdGhpcy5saXN0KCksXG5cdFx0cHJlZGljYXRlOiAodmFsdWU6IFQsIGluZGV4OiBudW1iZXIpID0+IGJvb2xlYW4sXG5cdFx0bWF4ID0gSW5maW5pdHlcblx0KTogVFtdIHtcblx0XHRjb25zdCByZXN1bHQ6IFRbXSA9IFtdLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGxlbiAmJiByZXN1bHQubGVuZ3RoIDwgbWF4OyBpKyspIHtcblx0XHRcdGlmIChwcmVkaWNhdGUobGlzdFtpXSwgaSkpIHtcblx0XHRcdFx0cmVzdWx0LnB1c2gobGlzdFtpXSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJlc3VsdDtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZWxlY3Qgc29tZSBpdGVtcyBpbiB0aGlzIHN0b3JlLlxuXHQgKlxuXHQgKiBAYWxpYXMgZmlsdGVyXG5cdCAqXG5cdCAqIEBwYXJhbSBsaXN0XG5cdCAqIEBwYXJhbSBwcmVkaWNhdGVcblx0ICogQHBhcmFtIG1heFxuXHQgKi9cblx0c2VsZWN0KFxuXHRcdGxpc3Q6IFRbXSA9IHRoaXMubGlzdCgpLFxuXHRcdHByZWRpY2F0ZTogKHZhbHVlOiBULCBpbmRleDogbnVtYmVyKSA9PiBib29sZWFuLFxuXHRcdG1heCA9IEluZmluaXR5XG5cdCk6IFRbXSB7XG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKGxpc3QsIHByZWRpY2F0ZSwgbWF4KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZWFyY2ggaXRlbXMgaW4gdGhpcyBzdG9yZSBvciBpbiBhIGdpdmVuIGl0ZW1zIGxpc3QuXG5cdCAqXG5cdCAqIEBwYXJhbSBsaXN0XG5cdCAqIEBwYXJhbSBzZWFyY2hcblx0ICogQHBhcmFtIHN0cmluZ0J1aWxkZXJcblx0ICovXG5cdHNlYXJjaChcblx0XHRsaXN0OiBUW10gPSB0aGlzLmxpc3QoKSxcblx0XHRzZWFyY2g6IHN0cmluZyxcblx0XHRzdHJpbmdCdWlsZGVyOiAodmFsdWU6IFQsIGluZGV4OiBudW1iZXIpID0+IHN0cmluZ1xuXHQpOiBUW10ge1xuXHRcdGlmICghKHNlYXJjaCA9IHNlYXJjaC50cmltKCkpLmxlbmd0aCkge1xuXHRcdFx0cmV0dXJuIGxpc3Q7XG5cdFx0fVxuXG5cdFx0Y29uc3QgcmVnID0gbmV3IFJlZ0V4cChlc2NhcGVSZWdFeHAoc2VhcmNoKSwgJ2knKTtcblxuXHRcdHJldHVybiBsaXN0LmZpbHRlcigoaXRlbTogYW55LCBpbmRleDogbnVtYmVyKSA9PiB7XG5cdFx0XHRjb25zdCB2ID0gc3RyaW5nQnVpbGRlcihpdGVtLCBpbmRleCk7XG5cdFx0XHRyZXR1cm4gcmVnLnRlc3Qodik7XG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogQ291bnQgaXRlbXMgaW4gdGhpcyBzdG9yZS5cblx0ICovXG5cdHRvdGFsQ291bnQoKTogbnVtYmVyIHtcblx0XHRyZXR1cm4gT2JqZWN0LmtleXModGhpcy5pdGVtcykubGVuZ3RoO1xuXHR9XG59XG4iXX0=