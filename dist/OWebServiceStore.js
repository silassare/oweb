import { GoblEntity } from 'gobl-utils-ts';
import OWebService from './OWebService';
import Utils from './utils/Utils';
const getId = (item) => item.singlePKValue();
const _with = (target, key, item) => {
    return { ...target, [key]: item };
}, _without = (target, key) => {
    delete target[key];
    return { ...target };
};
export default class OWebServiceStore extends OWebService {
    constructor(app_context, entity, service_name, persistent_cache = false) {
        super(app_context, service_name, persistent_cache);
        this.entity = entity;
        this.items = {};
        this.relations = {};
    }
    getItem(id, relations = '', then, fail, freeze = true, load_cache_first = false, dialog = true) {
        let ctx = this, app = this.app_context;
        return ctx.getRequest(id, relations, (response, fromCache) => {
            ctx.addItemToList(response.data.item, response.data.relations);
            then && then(response, fromCache);
        }, response => {
            dialog && app.view.dialog(response);
            fail && fail(response);
        }, freeze, load_cache_first);
    }
    getAllItems(options = {}, then, fail, freeze = true, force_cache = true, dialog = true) {
        let ctx = this, app = this.app_context;
        return ctx.getAllRequest(options, (response, fromCache) => {
            ctx.addItemsToList(response.data.items, response.data.relations);
            then && then(response, fromCache);
        }, response => {
            dialog && app.view.dialog(response);
            fail && fail(response);
        }, freeze, force_cache);
    }
    addItem(data, then, fail, freeze = true, dialog = true) {
        let ctx = this, app = this.app_context;
        return ctx.addRequest(data, result => {
            ctx.addCreated(result);
            then && then(result);
        }, response => {
            dialog && app.view.dialog(response);
            fail && fail(response);
        }, freeze);
    }
    updateItem(item, then, fail, freeze = true, dialog = true) {
        let ctx = this, app = this.app_context, id = getId(item);
        if (!item.isSaved()) {
            let diff = item.toObject(true);
            item.isSaving(true);
            return ctx.updateRequest(id, diff, result => {
                item.isSaving(false);
                ctx.setSaved(item, result);
                then && then(result);
            }, response => {
                item.isSaving(false);
                dialog && app.view.dialog(response);
                fail && fail(response);
            }, freeze);
        }
        console.error('Not modified ->', item);
        return false;
    }
    deleteItem(item, then, fail, freeze = true, dialog = true) {
        let ctx = this, app = this.app_context, id = getId(item);
        item.isDeleting(true);
        return ctx.deleteRequest(id, result => {
            item.isDeleting(false);
            ctx.setDeleted(result);
            then && then(result);
        }, response => {
            item.isDeleting(false);
            dialog && app.view.dialog(response);
            fail && fail(response);
        }, freeze);
    }
    addItemsToList(items, relations = {}) {
        let ctx = this;
        let list = (Utils.isPlainObject(items)
            ? Object.values(items)
            : items || []);
        list.forEach(item => {
            let itemId = getId(item);
            ctx.safelyAddItem(item);
            if (!ctx.relations[itemId]) {
                ctx.relations = _with(ctx.relations, itemId, {});
            }
            for (let rel in relations) {
                if (relations.hasOwnProperty(rel)) {
                    let data = relations[rel];
                    if (data[itemId]) {
                        ctx.relations[itemId] = _with(ctx.relations[itemId], rel, data[itemId]);
                    }
                }
            }
        });
    }
    addItemToList(item, relations = {}) {
        let ctx = this, itemId = getId(item);
        ctx.safelyAddItem(item);
        if (!ctx.relations[itemId]) {
            ctx.relations = _with(ctx.relations, itemId, {});
        }
        for (let rel in relations) {
            if (relations.hasOwnProperty(rel)) {
                ctx.relations[itemId] = _with(ctx.relations[itemId], rel, relations[rel]);
            }
        }
    }
    safelyAddItem(item) {
        let key = getId(item), cachedItem = this.items[key];
        if (cachedItem) {
            cachedItem.doHydrate(item.toObject(), true);
        }
        else {
            this.items = _with(this.items, key, item);
        }
        return this;
    }
    setSaved(target, response) {
        let item = response.data.item;
        target.doHydrate(item.toObject(), true);
        this.safelyAddItem(target);
    }
    addCreated(response) {
        this.safelyAddItem(response.data.item);
    }
    setDeleted(response) {
        let item = response.data.item;
        this.items = _without(this.items, getId(item));
    }
    itemRelation(item, relation) {
        let id = getId(item);
        return this.relations[id] && this.relations[id][relation];
    }
    identify(id, checkCache = true) {
        let item = this.items[id], c;
        if (item)
            return item;
        if (checkCache) {
            c = GoblEntity.subCache(this.entity.name);
            return c && c[id];
        }
        return undefined;
    }
    list(ids = []) {
        let list = [], len = ids.length;
        if (len) {
            for (let i = 0; i < len; i++) {
                let id = ids[i], item = this.identify(id);
                if (item) {
                    list.push(item);
                }
            }
        }
        else {
            for (let key in this.items) {
                if (Object.prototype.hasOwnProperty.call(this.items, key)) {
                    list.push(this.items[key]);
                }
            }
        }
        return list;
    }
    orderBy(orderFn) {
        let keys = Object.keys(this.items);
        return keys.map(key => this.items[key]).sort(orderFn);
    }
    orderByValueOf(column) {
        return this.orderBy((a, b) => {
            return a[column] - b[column];
        });
    }
    select(list = this.list(), predicate, max = Infinity) {
        let result = [], len = list.length;
        for (let i = 0; i < len && result.length < max; i++) {
            if (predicate(list[i], i)) {
                result.push(list[i]);
            }
        }
        return result;
    }
    search(list = this.list(), search, stringBuilder) {
        if (!(search = search.trim()).length) {
            return list;
        }
        let reg = new RegExp(Utils.escapeRegExp(search), 'i');
        return list.filter((item, index) => {
            let v = stringBuilder(item, index);
            return reg.test(v);
        });
    }
    totalCount() {
        return Object.keys(this.items).length;
    }
}
//# sourceMappingURL=data:application/json;base64,