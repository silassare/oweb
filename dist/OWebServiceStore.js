import { getEntityCache } from 'gobl-utils-ts';
import OWebService from './OWebService';
import { escapeRegExp, isPlainObject, logger } from './utils/Utils';
const getId = (item) => item.singlePKValue();
const _with = (target, key, item) => {
    return { ...target, [key]: item };
}, _without = (target, key) => {
    delete target[key];
    return { ...target };
};
export default class OWebServiceStore extends OWebService {
    constructor(appContext, entity, service) {
        super(appContext, service);
        this.entity = entity;
        this.items = {};
        this.relations = {};
    }
    getItem(id, relations = '') {
        const ctx = this;
        return ctx
            .getRequest(id, relations)
            .onGoodNews(function (response) {
            ctx.addItemToList(response.json.data.item, response.json.data.relations);
        })
            .send();
    }
    getAllItems(options = {}) {
        const ctx = this;
        return ctx
            .getAllRequest(options)
            .onGoodNews(function (response) {
            ctx.addItemsToList(response.json.data.items, response.json.data.relations);
        })
            .send();
    }
    addItem(data) {
        const ctx = this;
        return ctx
            .addRequest(data)
            .onGoodNews(function (response) {
            ctx.addCreated(response.json);
        })
            .send();
    }
    updateItem(item, freeze = true) {
        const ctx = this, id = getId(item);
        if (!item.isSaved()) {
            const diff = item.toObject(true);
            item.isSaving(true);
            return ctx
                .updateRequest(id, diff)
                .onGoodNews(function (response) {
                ctx.setSaved(item, response.json);
            })
                .onFinished(function () {
                item.isSaving(false);
            })
                .send();
        }
        logger.error('not updated', item);
        return false;
    }
    deleteItem(item) {
        const ctx = this, id = getId(item);
        item.isDeleting(true);
        return ctx
            .deleteRequest(id)
            .onGoodNews(function (response) {
            ctx.setDeleted(response.json);
        })
            .onFinished(function () {
            item.isDeleting(false);
        })
            .send();
    }
    addItemsToList(items, relations = {}) {
        const ctx = this, list = (isPlainObject(items)
            ? Object.values(items)
            : items || []);
        list.forEach((item) => {
            const itemId = getId(item);
            ctx.safelyAddItem(item);
            if (!ctx.relations[itemId]) {
                ctx.relations = _with(ctx.relations, itemId, {});
            }
            for (const rel in relations) {
                if (relations.hasOwnProperty(rel)) {
                    const data = relations[rel];
                    if (data[itemId]) {
                        ctx.relations[itemId] = _with(ctx.relations[itemId], rel, data[itemId]);
                    }
                }
            }
        });
    }
    addItemToList(item, relations = {}) {
        const ctx = this, itemId = getId(item);
        ctx.safelyAddItem(item);
        if (!ctx.relations[itemId]) {
            ctx.relations = _with(ctx.relations, itemId, {});
        }
        for (const rel in relations) {
            if (relations.hasOwnProperty(rel)) {
                ctx.relations[itemId] = _with(ctx.relations[itemId], rel, relations[rel]);
            }
        }
    }
    safelyAddItem(item) {
        const key = getId(item), cachedItem = this.items[key];
        if (cachedItem) {
            cachedItem.doHydrate(item.toObject(), true);
        }
        else {
            this.items = _with(this.items, key, item);
        }
        return this;
    }
    setSaved(target, response) {
        const item = response.data.item;
        target.doHydrate(item.toObject(), true);
        this.safelyAddItem(target);
    }
    addCreated(response) {
        this.safelyAddItem(response.data.item);
    }
    setDeleted(response) {
        const item = response.data.item;
        this.items = _without(this.items, getId(item));
    }
    itemRelation(item, relation) {
        const id = getId(item);
        return this.relations[id] && this.relations[id][relation];
    }
    identify(id, checkCache = true) {
        const item = this.items[id];
        let c;
        if (item)
            return item;
        if (checkCache) {
            c = getEntityCache(this.entity.name);
            return c && c[id];
        }
        return undefined;
    }
    list(ids = []) {
        const list = [], len = ids.length;
        if (len) {
            for (let i = 0; i < len; i++) {
                const id = ids[i], item = this.identify(id);
                if (item) {
                    list.push(item);
                }
            }
        }
        else {
            for (const key in this.items) {
                if (Object.prototype.hasOwnProperty.call(this.items, key)) {
                    list.push(this.items[key]);
                }
            }
        }
        return list;
    }
    orderBy(orderFn) {
        const keys = Object.keys(this.items);
        return keys.map((key) => this.items[key]).sort(orderFn);
    }
    orderByValueOf(column) {
        return this.orderBy((a, b) => {
            return a[column] - b[column];
        });
    }
    select(list = this.list(), predicate, max = Infinity) {
        const result = [], len = list.length;
        for (let i = 0; i < len && result.length < max; i++) {
            if (predicate(list[i], i)) {
                result.push(list[i]);
            }
        }
        return result;
    }
    search(list = this.list(), search, stringBuilder) {
        if (!(search = search.trim()).length) {
            return list;
        }
        const reg = new RegExp(escapeRegExp(search), 'i');
        return list.filter((item, index) => {
            const v = stringBuilder(item, index);
            return reg.test(v);
        });
    }
    totalCount() {
        return Object.keys(this.items).length;
    }
}
//# sourceMappingURL=data:application/json;base64,