import { getEntityCache, GoblEntity } from 'gobl-utils-ts';
import { escapeRegExp, isPlainObject } from './utils';
import OWebService from './OWebService';
const getId = (item) => item.singlePKValue();
const _with = (target, key, item) => {
    return { ...target, [key]: item };
};
const defaultServiceDataStore = function defaultServiceDataStore() {
    let items = {};
    const o = {
        add(item) {
            const id = getId(item);
            id in items ? o.update(item) : (items[id] = item);
            return o;
        },
        get(id) {
            return items[id];
        },
        update(item) {
            const id = getId(item);
            if (items[id]) {
                items[id].doHydrate(item.toObject(false), true);
            }
            return o;
        },
        remove(id) {
            delete items[id];
            return o;
        },
        all() {
            return Object.values(items);
        },
        filter(filterFn) {
            return Object.values(items).filter(filterFn);
        },
        relationServiceResolver() {
            return undefined;
        },
        clear() {
            items = {};
            return this;
        },
    };
    return o;
};
export default class OWebServiceStore extends OWebService {
    entity;
    store;
    relations = {};
    /**
     * OWebServiceStore constructor.
     *
     * @param _appContext
     * @param entity
     * @param service
     */
    constructor(_appContext, entity, service, store) {
        super(_appContext, service);
        this.entity = entity;
        this.store = store || defaultServiceDataStore();
    }
    /**
     * Creates request to get an item by id.
     *
     * @param id The item id.
     * @param relations The relations to retrieve.
     */
    getItem(id, relations = '') {
        const ctx = this;
        return super
            .getItem(id, relations)
            .onGoodNews(function goodNewsHandler(response) {
            ctx.addItemToList(response.json.data.item, response.json.data.relations);
        });
    }
    /**
     * Creates request to get items list.
     *
     * @param options
     */
    getItems(options = {}) {
        const ctx = this;
        return super
            .getItems(options)
            .onGoodNews(function goodNewsHandler(response) {
            ctx.addItemsToList(response.json.data.items, response.json.data.relations);
        });
    }
    /**
     * Creates request to add new item.
     *
     * @param data
     */
    addItem(data) {
        const ctx = this;
        return super.addItem(data).onGoodNews(function goodNewsHandler(response) {
            ctx.addCreated(response.json);
        });
    }
    /**
     * Creates update request for a given item.
     *
     * @param item
     */
    updateItem(item, formData = null) {
        const ctx = this;
        let id, target;
        if (item instanceof GoblEntity) {
            id = getId(item);
            target = item;
        }
        else {
            id = item;
            target = this.identify(id);
        }
        const diff = formData ? formData : target ? target.toObject(true) : {};
        target && target.isSaving(true);
        return super
            .updateItem(id, diff)
            .onGoodNews(function goodNewsHandler(response) {
            target && ctx.setSaved(target, response.json);
        })
            .onFinish(function finishHandler() {
            target && target.isSaving(false);
        });
    }
    /**
     * Creates a delete request for a given item.
     *
     * @param item
     */
    deleteItem(item) {
        const ctx = this;
        let id, target;
        if (item instanceof GoblEntity) {
            id = getId(item);
            target = item;
        }
        else {
            id = item;
            target = this.identify(id);
        }
        target && target.isDeleting(true);
        return super
            .deleteItem(id)
            .onGoodNews(function goodNewsHandler(response) {
            ctx.setDeleted(response.json);
        })
            .onFinish(function finishHandler() {
            target && target.isDeleting(false);
        });
    }
    /**
     * Adds a list of items to this store list.
     *
     * @param items
     * @param relations
     */
    addItemsToList(items, relations = {}) {
        const ctx = this, list = (isPlainObject(items) ? Object.values(items) : items || []);
        list.forEach((item) => {
            const itemId = getId(item);
            ctx.safelyAddItem(item);
            if (!ctx.relations[itemId]) {
                ctx.relations = _with(ctx.relations, itemId, {});
            }
            for (const rel in relations) {
                if (Object.prototype.hasOwnProperty.call(relations, rel)) {
                    const data = relations[rel];
                    if (data[itemId]) {
                        ctx.relations[itemId] = _with(ctx.relations[itemId], rel, data[itemId]);
                    }
                }
            }
        });
    }
    /**
     * Adds a given item and its relations to this store.
     *
     * @param item
     * @param relations
     */
    addItemToList(item, relations = {}) {
        const ctx = this, itemId = getId(item);
        ctx.safelyAddItem(item);
        if (!ctx.relations[itemId]) {
            ctx.relations = _with(ctx.relations, itemId, {});
        }
        for (const rel in relations) {
            if (Object.prototype.hasOwnProperty.call(relations, rel)) {
                ctx.relations[itemId] = _with(ctx.relations[itemId], rel, relations[rel]);
            }
        }
    }
    /**
     * Safely add item to this store.
     *
     * @param item
     * @private
     */
    safelyAddItem(item) {
        const id = getId(item), cachedItem = this.store.get(id);
        if (cachedItem) {
            item = cachedItem.doHydrate(item.toObject(), true);
        }
        return this.store.add(item);
    }
    /**
     * Modify successfully saved item state and data.
     *
     * @param target
     * @param response
     * @private
     */
    setSaved(target, response) {
        const item = response.data.item;
        target.doHydrate(item.toObject(), true);
        return this.store.add(target);
    }
    /**
     * Adds a newly created item to this store.
     *
     * @param response
     */
    addCreated(response) {
        return this.safelyAddItem(response.data.item);
    }
    /**
     * Removes a given item from this store when deleted.
     *
     * @param response
     */
    setDeleted(response) {
        return this.store.remove(getId(response.data.item));
    }
    /**
     * Identify a given item in this store by its id.
     *
     * @param id
     * @param checkCacheForMissing
     */
    identify(id, checkCacheForMissing = true) {
        const item = this.store.get(id);
        if (item)
            return item;
        if (checkCacheForMissing) {
            const cache = getEntityCache(this.entity.name);
            return cache && cache[id];
        }
        return undefined;
    }
    /**
     * Gets this store items list.
     */
    list(ids = [], checkCacheForMissing = true) {
        const len = ids.length;
        if (!len) {
            return this.store.all();
        }
        const list = [];
        for (let i = 0; i < len; i++) {
            const id = ids[i], item = this.identify(id, checkCacheForMissing);
            if (item) {
                list.push(item);
            }
        }
        return list;
    }
    /**
     * Filter items in this store or in a given list.
     *
     * @param list
     * @param predicate
     * @param max
     */
    filter(list = this.list(), predicate, max = Infinity) {
        const result = [], len = list.length;
        for (let i = 0; i < len && result.length < max; i++) {
            if (predicate(list[i])) {
                result.push(list[i]);
            }
        }
        return result;
    }
    /**
     * Select some items in this store.
     *
     * @alias filter
     *
     * @param list
     * @param predicate
     * @param max
     */
    select(list = this.list(), predicate, max = Infinity) {
        return this.filter(list, predicate, max);
    }
    /**
     * Search items in this store or in a given items list.
     *
     * @param list
     * @param search
     * @param stringBuilder
     */
    search(list = this.list(), search, stringBuilder) {
        if (!(search = search.trim()).length) {
            return list;
        }
        const reg = new RegExp(escapeRegExp(search), 'i');
        return list.filter((item) => {
            const v = stringBuilder(item);
            return reg.test(v);
        });
    }
    /**
     * Gets a given item relations.
     *
     * @param item
     * @param relation
     */
    itemRelation(item, relation) {
        const id = getId(item);
        return this.relations[id] && this.relations[id][relation];
    }
}
//# sourceMappingURL=data:application/json;base64,