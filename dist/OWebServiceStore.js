import { getEntityCache } from 'gobl-utils-ts';
import { escapeRegExp, isPlainObject } from './utils';
import OWebService from './OWebService';
const getId = (item) => item.singlePKValue();
const _with = (target, key, item) => {
    return { ...target, [key]: item };
}, _without = (target, key) => {
    delete target[key];
    return { ...target };
};
export default class OWebServiceStore extends OWebService {
    entity;
    items = {};
    relations = {};
    constructor(_appContext, entity, service) {
        super(_appContext, service);
        this.entity = entity;
    }
    getItemRequest(id, relations = '') {
        const ctx = this;
        return this.getRequest(id, relations).onGoodNews(function goodNewsHandler(response) {
            ctx.addItemToList(response.json.data.item, response.json.data.relations);
        });
    }
    getItemsListRequest(options = {}) {
        const ctx = this;
        return ctx
            .getAllRequest(options)
            .onGoodNews(function goodNewsHandler(response) {
            ctx.addItemsToList(response.json.data.items, response.json.data.relations);
        });
    }
    addItemRequest(data) {
        const ctx = this;
        return ctx.addRequest(data).onGoodNews(function goodNewsHandler(response) {
            ctx.addCreated(response.json);
        });
    }
    updateItemRequest(item) {
        const ctx = this, id = getId(item), diff = item.toObject(true);
        item.isSaving(true);
        return ctx
            .updateRequest(id, diff)
            .onGoodNews(function goodNewsHandler(response) {
            ctx.setSaved(item, response.json);
        })
            .onFinish(function finishHandler() {
            item.isSaving(false);
        });
    }
    deleteItemRequest(item) {
        const ctx = this, id = getId(item);
        item.isDeleting(true);
        return ctx
            .deleteRequest(id)
            .onGoodNews(function goodNewsHandler(response) {
            ctx.setDeleted(response.json);
        })
            .onFinish(function finishHandler() {
            item.isDeleting(false);
        });
    }
    addItemsToList(items, relations = {}) {
        const ctx = this, list = (isPlainObject(items) ? Object.values(items) : items || []);
        list.forEach((item) => {
            const itemId = getId(item);
            ctx.safelyAddItem(item);
            if (!ctx.relations[itemId]) {
                ctx.relations = _with(ctx.relations, itemId, {});
            }
            for (const rel in relations) {
                if (Object.prototype.hasOwnProperty.call(relations, rel)) {
                    const data = relations[rel];
                    if (data[itemId]) {
                        ctx.relations[itemId] = _with(ctx.relations[itemId], rel, data[itemId]);
                    }
                }
            }
        });
    }
    addItemToList(item, relations = {}) {
        const ctx = this, itemId = getId(item);
        ctx.safelyAddItem(item);
        if (!ctx.relations[itemId]) {
            ctx.relations = _with(ctx.relations, itemId, {});
        }
        for (const rel in relations) {
            if (Object.prototype.hasOwnProperty.call(relations, rel)) {
                ctx.relations[itemId] = _with(ctx.relations[itemId], rel, relations[rel]);
            }
        }
    }
    safelyAddItem(item) {
        const key = getId(item), cachedItem = this.items[key];
        if (cachedItem) {
            cachedItem.doHydrate(item.toObject(), true);
        }
        else {
            this.items = _with(this.items, key, item);
        }
        return this;
    }
    setSaved(target, response) {
        const item = response.data.item;
        target.doHydrate(item.toObject(), true);
        return this.safelyAddItem(target);
    }
    addCreated(response) {
        return this.safelyAddItem(response.data.item);
    }
    setDeleted(response) {
        const item = response.data.item;
        this.items = _without(this.items, getId(item));
        return this;
    }
    itemRelation(item, relation) {
        const id = getId(item);
        return this.relations[id] && this.relations[id][relation];
    }
    identify(id, checkCache = true) {
        const item = this.items[id];
        let c;
        if (item)
            return item;
        if (checkCache) {
            c = getEntityCache(this.entity.name);
            return c && c[id];
        }
        return undefined;
    }
    list(ids = []) {
        const list = [], len = ids.length;
        if (len) {
            for (let i = 0; i < len; i++) {
                const id = ids[i], item = this.identify(id);
                if (item) {
                    list.push(item);
                }
            }
        }
        else {
            for (const key in this.items) {
                if (Object.prototype.hasOwnProperty.call(this.items, key)) {
                    list.push(this.items[key]);
                }
            }
        }
        return list;
    }
    orderBy(order) {
        const keys = Object.keys(this.items);
        return keys.map((key) => this.items[key]).sort(order);
    }
    orderByValueOf(column) {
        return this.orderBy((a, b) => {
            return a[column] - b[column];
        });
    }
    filter(list = this.list(), predicate, max = Infinity) {
        const result = [], len = list.length;
        for (let i = 0; i < len && result.length < max; i++) {
            if (predicate(list[i], i)) {
                result.push(list[i]);
            }
        }
        return result;
    }
    select(list = this.list(), predicate, max = Infinity) {
        return this.filter(list, predicate, max);
    }
    search(list = this.list(), search, stringBuilder) {
        if (!(search = search.trim()).length) {
            return list;
        }
        const reg = new RegExp(escapeRegExp(search), 'i');
        return list.filter((item, index) => {
            const v = stringBuilder(item, index);
            return reg.test(v);
        });
    }
    totalCount() {
        return Object.keys(this.items).length;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYlNlcnZpY2VTdG9yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9PV2ViU2VydmljZVN0b3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQXNCLE1BQU0sZUFBZSxDQUFDO0FBVW5FLE9BQU8sRUFBRSxZQUFZLEVBQUUsYUFBYSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ3RELE9BQU8sV0FBVyxNQUFNLGVBQWUsQ0FBQztBQUl4QyxNQUFNLEtBQUssR0FBRyxDQUFDLElBQXdCLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUVqRSxNQUFNLEtBQUssR0FBRyxDQUFDLE1BQVcsRUFBRSxHQUFvQixFQUFFLElBQVMsRUFBRSxFQUFFO0lBQzdELE9BQU8sRUFBRSxHQUFHLE1BQU0sRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDO0FBQ25DLENBQUMsRUFDRCxRQUFRLEdBQUcsQ0FBQyxNQUFXLEVBQUUsR0FBb0IsRUFBRSxFQUFFO0lBQ2hELE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ25CLE9BQU8sRUFBRSxHQUFHLE1BQU0sRUFBRSxDQUFDO0FBQ3RCLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxPQUFPLE9BQU8sZ0JBRW5CLFNBQVEsV0FBYztJQWFMO0lBWlIsS0FBSyxHQUF5QixFQUFFLENBQUM7SUFDakMsU0FBUyxHQUEyQixFQUFFLENBQUM7SUFTakQsWUFDQyxXQUFvQixFQUNILE1BQWlDLEVBQ2xELE9BQWU7UUFFZixLQUFLLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBSFgsV0FBTSxHQUFOLE1BQU0sQ0FBMkI7SUFJbkQsQ0FBQztJQVFELGNBQWMsQ0FBQyxFQUFVLEVBQUUsU0FBUyxHQUFHLEVBQUU7UUFDeEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDO1FBRWpCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFLEVBQUUsU0FBUyxDQUFDLENBQUMsVUFBVSxDQUFDLFNBQVMsZUFBZSxDQUN4RSxRQUFRO1lBRVIsR0FBRyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDMUUsQ0FBQyxDQUFDLENBQUM7SUFDSixDQUFDO0lBT0QsbUJBQW1CLENBQ2xCLFVBQXFDLEVBQUU7UUFFdkMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDO1FBRWpCLE9BQU8sR0FBRzthQUNSLGFBQWEsQ0FBQyxPQUFPLENBQUM7YUFDdEIsVUFBVSxDQUFDLFNBQVMsZUFBZSxDQUFDLFFBQVE7WUFDNUMsR0FBRyxDQUFDLGNBQWMsQ0FDakIsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUN4QixRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQzVCLENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFPRCxjQUFjLENBQUMsSUFBa0I7UUFDaEMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLE9BQU8sR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsU0FBUyxlQUFlLENBQUMsUUFBUTtZQUN2RSxHQUFHLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFPRCxpQkFBaUIsQ0FBQyxJQUFPO1FBQ3hCLE1BQU0sR0FBRyxHQUFHLElBQUksRUFDZixFQUFFLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUNoQixJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUU1QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXBCLE9BQU8sR0FBRzthQUNSLGFBQWEsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDO2FBQ3ZCLFVBQVUsQ0FBQyxTQUFTLGVBQWUsQ0FBQyxRQUFRO1lBQzVDLEdBQUcsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNuQyxDQUFDLENBQUM7YUFDRCxRQUFRLENBQUMsU0FBUyxhQUFhO1lBQy9CLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdEIsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBT0QsaUJBQWlCLENBQUMsSUFBTztRQUN4QixNQUFNLEdBQUcsR0FBRyxJQUFJLEVBQ2YsRUFBRSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVsQixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXRCLE9BQU8sR0FBRzthQUNSLGFBQWEsQ0FBQyxFQUFFLENBQUM7YUFDakIsVUFBVSxDQUFDLFNBQVMsZUFBZSxDQUFDLFFBQVE7WUFDNUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0IsQ0FBQyxDQUFDO2FBQ0QsUUFBUSxDQUFDLFNBQVMsYUFBYTtZQUMvQixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3hCLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQVFELGNBQWMsQ0FBQyxLQUFpQyxFQUFFLFlBQWlCLEVBQUU7UUFDcEUsTUFBTSxHQUFHLEdBQUcsSUFBSSxFQUNmLElBQUksR0FBUSxDQUNYLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLEVBQUUsQ0FDbEQsQ0FBQztRQUVWLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNyQixNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7WUFFM0IsR0FBRyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUV4QixJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDM0IsR0FBRyxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxNQUFNLEVBQUUsRUFBRSxDQUFDLENBQUM7YUFDakQ7WUFFRCxLQUFLLE1BQU0sR0FBRyxJQUFJLFNBQVMsRUFBRTtnQkFDNUIsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxFQUFFO29CQUN6RCxNQUFNLElBQUksR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7b0JBRTVCLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO3dCQUNqQixHQUFHLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLEtBQUssQ0FDNUIsR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFDckIsR0FBRyxFQUNILElBQUksQ0FBQyxNQUFNLENBQUMsQ0FDWixDQUFDO3FCQUNGO2lCQUNEO2FBQ0Q7UUFDRixDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFRRCxhQUFhLENBQUMsSUFBTyxFQUFFLFlBQWlCLEVBQUU7UUFDekMsTUFBTSxHQUFHLEdBQUcsSUFBSSxFQUNmLE1BQU0sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdEIsR0FBRyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV4QixJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUMzQixHQUFHLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxFQUFFLENBQUMsQ0FBQztTQUNqRDtRQUVELEtBQUssTUFBTSxHQUFHLElBQUksU0FBUyxFQUFFO1lBQzVCLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsRUFBRTtnQkFDekQsR0FBRyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxLQUFLLENBQzVCLEdBQUcsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQ3JCLEdBQUcsRUFDSCxTQUFTLENBQUMsR0FBRyxDQUFDLENBQ2QsQ0FBQzthQUNGO1NBQ0Q7SUFDRixDQUFDO0lBUU8sYUFBYSxDQUFDLElBQU87UUFDNUIsTUFBTSxHQUFHLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUN0QixVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUU5QixJQUFJLFVBQVUsRUFBRTtZQUNmLFVBQVUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQzVDO2FBQU07WUFDTixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUMxQztRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQVNPLFFBQVEsQ0FBQyxNQUFTLEVBQUUsUUFBK0I7UUFDMUQsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7UUFFaEMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFeEMsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFPTyxVQUFVLENBQUMsUUFBNEI7UUFDOUMsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQU9PLFVBQVUsQ0FBQyxRQUErQjtRQUNqRCxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztRQUNoQyxJQUFJLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQy9DLE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQVFELFlBQVksQ0FBSSxJQUFPLEVBQUUsUUFBZ0I7UUFDeEMsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFRRCxRQUFRLENBQUMsRUFBVSxFQUFFLFVBQVUsR0FBRyxJQUFJO1FBQ3JDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLENBQUM7UUFFTixJQUFJLElBQUk7WUFBRSxPQUFPLElBQUksQ0FBQztRQUV0QixJQUFJLFVBQVUsRUFBRTtZQUNmLENBQUMsR0FBRyxjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQVEsQ0FBQztZQUU1QyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDbEI7UUFFRCxPQUFPLFNBQVMsQ0FBQztJQUNsQixDQUFDO0lBT0QsSUFBSSxDQUFDLE1BQWdCLEVBQUU7UUFDdEIsTUFBTSxJQUFJLEdBQVEsRUFBRSxFQUNuQixHQUFHLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQztRQUNsQixJQUFJLEdBQUcsRUFBRTtZQUNSLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQzdCLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFDaEIsSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQzFCLElBQUksSUFBSSxFQUFFO29CQUNULElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQ2hCO2FBQ0Q7U0FDRDthQUFNO1lBQ04sS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO2dCQUM3QixJQUFJLE1BQU0sQ0FBQyxTQUFTLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxFQUFFO29CQUMxRCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztpQkFDM0I7YUFDRDtTQUNEO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBT0QsT0FBTyxDQUFDLEtBQTZCO1FBQ3BDLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRXJDLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBT0QsY0FBYyxDQUFDLE1BQWM7UUFDNUIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBTSxFQUFFLENBQU0sRUFBRSxFQUFFO1lBQ3RDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5QixDQUFDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFTRCxNQUFNLENBQ0wsT0FBWSxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQ3ZCLFNBQStDLEVBQy9DLEdBQUcsR0FBRyxRQUFRO1FBRWQsTUFBTSxNQUFNLEdBQVEsRUFBRSxFQUNyQixHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUVuQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsR0FBRyxJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3BELElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBRTtnQkFDMUIsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNyQjtTQUNEO1FBRUQsT0FBTyxNQUFNLENBQUM7SUFDZixDQUFDO0lBV0QsTUFBTSxDQUNMLE9BQVksSUFBSSxDQUFDLElBQUksRUFBRSxFQUN2QixTQUErQyxFQUMvQyxHQUFHLEdBQUcsUUFBUTtRQUVkLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFTRCxNQUFNLENBQ0wsT0FBWSxJQUFJLENBQUMsSUFBSSxFQUFFLEVBQ3ZCLE1BQWMsRUFDZCxhQUFrRDtRQUVsRCxJQUFJLENBQUMsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxFQUFFO1lBQ3JDLE9BQU8sSUFBSSxDQUFDO1NBQ1o7UUFFRCxNQUFNLEdBQUcsR0FBRyxJQUFJLE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFbEQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBUyxFQUFFLEtBQWEsRUFBRSxFQUFFO1lBQy9DLE1BQU0sQ0FBQyxHQUFHLGFBQWEsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDckMsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUtELFVBQVU7UUFDVCxPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQztJQUN2QyxDQUFDO0NBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRFbnRpdHlDYWNoZSwgR29ibFNpbmdsZVBLRW50aXR5IH0gZnJvbSAnZ29ibC11dGlscy10cyc7XG5pbXBvcnQge1xuXHRPQXBpQWRkUmVzcG9uc2UsXG5cdE9BcGlEZWxldGVSZXNwb25zZSxcblx0T0FwaVVwZGF0ZVJlc3BvbnNlLFxuXHRPQXBpU2VydmljZVJlcXVlc3RPcHRpb25zLFxuXHRPQXBpR2V0QWxsUmVzcG9uc2UsXG5cdE9BcGlHZXRSZXNwb25zZSxcbn0gZnJvbSAnLi9vem9uZSc7XG5pbXBvcnQgT1dlYkFwcCBmcm9tICcuL09XZWJBcHAnO1xuaW1wb3J0IHsgZXNjYXBlUmVnRXhwLCBpc1BsYWluT2JqZWN0IH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgT1dlYlNlcnZpY2UgZnJvbSAnLi9PV2ViU2VydmljZSc7XG5pbXBvcnQgT1dlYlhIUiBmcm9tICcuL09XZWJYSFInO1xuaW1wb3J0IHsgT1dlYkZvcm1EYXRhIH0gZnJvbSAnLi9PV2ViRm9ybSc7XG5cbmNvbnN0IGdldElkID0gKGl0ZW06IEdvYmxTaW5nbGVQS0VudGl0eSkgPT4gaXRlbS5zaW5nbGVQS1ZhbHVlKCk7XG5cbmNvbnN0IF93aXRoID0gKHRhcmdldDogYW55LCBrZXk6IHN0cmluZyB8IG51bWJlciwgaXRlbTogYW55KSA9PiB7XG5cdFx0cmV0dXJuIHsgLi4udGFyZ2V0LCBba2V5XTogaXRlbSB9O1xuXHR9LFxuXHRfd2l0aG91dCA9ICh0YXJnZXQ6IGFueSwga2V5OiBzdHJpbmcgfCBudW1iZXIpID0+IHtcblx0XHRkZWxldGUgdGFyZ2V0W2tleV07XG5cdFx0cmV0dXJuIHsgLi4udGFyZ2V0IH07XG5cdH07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9XZWJTZXJ2aWNlU3RvcmU8XG5cdFQgZXh0ZW5kcyBHb2JsU2luZ2xlUEtFbnRpdHlcbj4gZXh0ZW5kcyBPV2ViU2VydmljZTxUPiB7XG5cdHByb3RlY3RlZCBpdGVtczogeyBba2V5OiBzdHJpbmddOiBUIH0gPSB7fTtcblx0cHJvdGVjdGVkIHJlbGF0aW9uczogeyBba2V5OiBzdHJpbmddOiBhbnkgfSA9IHt9O1xuXG5cdC8qKlxuXHQgKiBPV2ViU2VydmljZVN0b3JlIGNvbnN0cnVjdG9yLlxuXHQgKlxuXHQgKiBAcGFyYW0gX2FwcENvbnRleHRcblx0ICogQHBhcmFtIGVudGl0eVxuXHQgKiBAcGFyYW0gc2VydmljZVxuXHQgKi9cblx0Y29uc3RydWN0b3IoXG5cdFx0X2FwcENvbnRleHQ6IE9XZWJBcHAsXG5cdFx0cHJpdmF0ZSByZWFkb25seSBlbnRpdHk6IHR5cGVvZiBHb2JsU2luZ2xlUEtFbnRpdHksXG5cdFx0c2VydmljZTogc3RyaW5nXG5cdCkge1xuXHRcdHN1cGVyKF9hcHBDb250ZXh0LCBzZXJ2aWNlKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIHJlcXVlc3QgdG8gZ2V0IGFuIGl0ZW0gYnkgaWQuXG5cdCAqXG5cdCAqIEBwYXJhbSBpZCBUaGUgaXRlbSBpZC5cblx0ICogQHBhcmFtIHJlbGF0aW9ucyBUaGUgcmVsYXRpb25zIHRvIHJldHJpZXZlLlxuXHQgKi9cblx0Z2V0SXRlbVJlcXVlc3QoaWQ6IHN0cmluZywgcmVsYXRpb25zID0gJycpOiBPV2ViWEhSPE9BcGlHZXRSZXNwb25zZTxUPj4ge1xuXHRcdGNvbnN0IGN0eCA9IHRoaXM7XG5cblx0XHRyZXR1cm4gdGhpcy5nZXRSZXF1ZXN0KGlkLCByZWxhdGlvbnMpLm9uR29vZE5ld3MoZnVuY3Rpb24gZ29vZE5ld3NIYW5kbGVyKFxuXHRcdFx0cmVzcG9uc2Vcblx0XHQpIHtcblx0XHRcdGN0eC5hZGRJdGVtVG9MaXN0KHJlc3BvbnNlLmpzb24uZGF0YS5pdGVtLCByZXNwb25zZS5qc29uLmRhdGEucmVsYXRpb25zKTtcblx0XHR9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIHJlcXVlc3QgdG8gZ2V0IGl0ZW1zIGxpc3QuXG5cdCAqXG5cdCAqIEBwYXJhbSBvcHRpb25zXG5cdCAqL1xuXHRnZXRJdGVtc0xpc3RSZXF1ZXN0KFxuXHRcdG9wdGlvbnM6IE9BcGlTZXJ2aWNlUmVxdWVzdE9wdGlvbnMgPSB7fVxuXHQpOiBPV2ViWEhSPE9BcGlHZXRBbGxSZXNwb25zZTxUPj4ge1xuXHRcdGNvbnN0IGN0eCA9IHRoaXM7XG5cblx0XHRyZXR1cm4gY3R4XG5cdFx0XHQuZ2V0QWxsUmVxdWVzdChvcHRpb25zKVxuXHRcdFx0Lm9uR29vZE5ld3MoZnVuY3Rpb24gZ29vZE5ld3NIYW5kbGVyKHJlc3BvbnNlKSB7XG5cdFx0XHRcdGN0eC5hZGRJdGVtc1RvTGlzdChcblx0XHRcdFx0XHRyZXNwb25zZS5qc29uLmRhdGEuaXRlbXMsXG5cdFx0XHRcdFx0cmVzcG9uc2UuanNvbi5kYXRhLnJlbGF0aW9uc1xuXHRcdFx0XHQpO1xuXHRcdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyByZXF1ZXN0IHRvIGFkZCBuZXcgaXRlbS5cblx0ICpcblx0ICogQHBhcmFtIGRhdGFcblx0ICovXG5cdGFkZEl0ZW1SZXF1ZXN0KGRhdGE6IE9XZWJGb3JtRGF0YSk6IE9XZWJYSFI8T0FwaUFkZFJlc3BvbnNlPFQ+PiB7XG5cdFx0Y29uc3QgY3R4ID0gdGhpcztcblx0XHRyZXR1cm4gY3R4LmFkZFJlcXVlc3QoZGF0YSkub25Hb29kTmV3cyhmdW5jdGlvbiBnb29kTmV3c0hhbmRsZXIocmVzcG9uc2UpIHtcblx0XHRcdGN0eC5hZGRDcmVhdGVkKHJlc3BvbnNlLmpzb24pO1xuXHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgdXBkYXRlIHJlcXVlc3QgZm9yIGEgZ2l2ZW4gaXRlbS5cblx0ICpcblx0ICogQHBhcmFtIGl0ZW1cblx0ICovXG5cdHVwZGF0ZUl0ZW1SZXF1ZXN0KGl0ZW06IFQpOiBPV2ViWEhSPE9BcGlVcGRhdGVSZXNwb25zZTxUPj4ge1xuXHRcdGNvbnN0IGN0eCA9IHRoaXMsXG5cdFx0XHRpZCA9IGdldElkKGl0ZW0pLFxuXHRcdFx0ZGlmZiA9IGl0ZW0udG9PYmplY3QodHJ1ZSk7XG5cblx0XHRpdGVtLmlzU2F2aW5nKHRydWUpO1xuXG5cdFx0cmV0dXJuIGN0eFxuXHRcdFx0LnVwZGF0ZVJlcXVlc3QoaWQsIGRpZmYpXG5cdFx0XHQub25Hb29kTmV3cyhmdW5jdGlvbiBnb29kTmV3c0hhbmRsZXIocmVzcG9uc2UpIHtcblx0XHRcdFx0Y3R4LnNldFNhdmVkKGl0ZW0sIHJlc3BvbnNlLmpzb24pO1xuXHRcdFx0fSlcblx0XHRcdC5vbkZpbmlzaChmdW5jdGlvbiBmaW5pc2hIYW5kbGVyKCkge1xuXHRcdFx0XHRpdGVtLmlzU2F2aW5nKGZhbHNlKTtcblx0XHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBkZWxldGUgcmVxdWVzdCBmb3IgYSBnaXZlbiBpdGVtLlxuXHQgKlxuXHQgKiBAcGFyYW0gaXRlbVxuXHQgKi9cblx0ZGVsZXRlSXRlbVJlcXVlc3QoaXRlbTogVCk6IE9XZWJYSFI8T0FwaURlbGV0ZVJlc3BvbnNlPFQ+PiB7XG5cdFx0Y29uc3QgY3R4ID0gdGhpcyxcblx0XHRcdGlkID0gZ2V0SWQoaXRlbSk7XG5cblx0XHRpdGVtLmlzRGVsZXRpbmcodHJ1ZSk7XG5cblx0XHRyZXR1cm4gY3R4XG5cdFx0XHQuZGVsZXRlUmVxdWVzdChpZClcblx0XHRcdC5vbkdvb2ROZXdzKGZ1bmN0aW9uIGdvb2ROZXdzSGFuZGxlcihyZXNwb25zZSkge1xuXHRcdFx0XHRjdHguc2V0RGVsZXRlZChyZXNwb25zZS5qc29uKTtcblx0XHRcdH0pXG5cdFx0XHQub25GaW5pc2goZnVuY3Rpb24gZmluaXNoSGFuZGxlcigpIHtcblx0XHRcdFx0aXRlbS5pc0RlbGV0aW5nKGZhbHNlKTtcblx0XHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgYSBsaXN0IG9mIGl0ZW1zIHRvIHRoaXMgc3RvcmUgbGlzdC5cblx0ICpcblx0ICogQHBhcmFtIGl0ZW1zXG5cdCAqIEBwYXJhbSByZWxhdGlvbnNcblx0ICovXG5cdGFkZEl0ZW1zVG9MaXN0KGl0ZW1zOiBUW10gfCB7IFtrZXk6IHN0cmluZ106IFQgfSwgcmVsYXRpb25zOiBhbnkgPSB7fSk6IHZvaWQge1xuXHRcdGNvbnN0IGN0eCA9IHRoaXMsXG5cdFx0XHRsaXN0OiBUW10gPSAoXG5cdFx0XHRcdGlzUGxhaW5PYmplY3QoaXRlbXMpID8gT2JqZWN0LnZhbHVlcyhpdGVtcykgOiBpdGVtcyB8fCBbXVxuXHRcdFx0KSBhcyBUW107XG5cblx0XHRsaXN0LmZvckVhY2goKGl0ZW0pID0+IHtcblx0XHRcdGNvbnN0IGl0ZW1JZCA9IGdldElkKGl0ZW0pO1xuXG5cdFx0XHRjdHguc2FmZWx5QWRkSXRlbShpdGVtKTtcblxuXHRcdFx0aWYgKCFjdHgucmVsYXRpb25zW2l0ZW1JZF0pIHtcblx0XHRcdFx0Y3R4LnJlbGF0aW9ucyA9IF93aXRoKGN0eC5yZWxhdGlvbnMsIGl0ZW1JZCwge30pO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKGNvbnN0IHJlbCBpbiByZWxhdGlvbnMpIHtcblx0XHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChyZWxhdGlvbnMsIHJlbCkpIHtcblx0XHRcdFx0XHRjb25zdCBkYXRhID0gcmVsYXRpb25zW3JlbF07XG5cblx0XHRcdFx0XHRpZiAoZGF0YVtpdGVtSWRdKSB7XG5cdFx0XHRcdFx0XHRjdHgucmVsYXRpb25zW2l0ZW1JZF0gPSBfd2l0aChcblx0XHRcdFx0XHRcdFx0Y3R4LnJlbGF0aW9uc1tpdGVtSWRdLFxuXHRcdFx0XHRcdFx0XHRyZWwsXG5cdFx0XHRcdFx0XHRcdGRhdGFbaXRlbUlkXVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIGEgZ2l2ZW4gaXRlbSBhbmQgaXRzIHJlbGF0aW9ucyB0byB0aGlzIHN0b3JlLlxuXHQgKlxuXHQgKiBAcGFyYW0gaXRlbVxuXHQgKiBAcGFyYW0gcmVsYXRpb25zXG5cdCAqL1xuXHRhZGRJdGVtVG9MaXN0KGl0ZW06IFQsIHJlbGF0aW9uczogYW55ID0ge30pOiB2b2lkIHtcblx0XHRjb25zdCBjdHggPSB0aGlzLFxuXHRcdFx0aXRlbUlkID0gZ2V0SWQoaXRlbSk7XG5cblx0XHRjdHguc2FmZWx5QWRkSXRlbShpdGVtKTtcblxuXHRcdGlmICghY3R4LnJlbGF0aW9uc1tpdGVtSWRdKSB7XG5cdFx0XHRjdHgucmVsYXRpb25zID0gX3dpdGgoY3R4LnJlbGF0aW9ucywgaXRlbUlkLCB7fSk7XG5cdFx0fVxuXG5cdFx0Zm9yIChjb25zdCByZWwgaW4gcmVsYXRpb25zKSB7XG5cdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHJlbGF0aW9ucywgcmVsKSkge1xuXHRcdFx0XHRjdHgucmVsYXRpb25zW2l0ZW1JZF0gPSBfd2l0aChcblx0XHRcdFx0XHRjdHgucmVsYXRpb25zW2l0ZW1JZF0sXG5cdFx0XHRcdFx0cmVsLFxuXHRcdFx0XHRcdHJlbGF0aW9uc1tyZWxdXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIFNhZmVseSBhZGQgaXRlbSB0byB0aGlzIHN0b3JlLlxuXHQgKlxuXHQgKiBAcGFyYW0gaXRlbVxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cHJpdmF0ZSBzYWZlbHlBZGRJdGVtKGl0ZW06IFQpIHtcblx0XHRjb25zdCBrZXkgPSBnZXRJZChpdGVtKSxcblx0XHRcdGNhY2hlZEl0ZW0gPSB0aGlzLml0ZW1zW2tleV07XG5cblx0XHRpZiAoY2FjaGVkSXRlbSkge1xuXHRcdFx0Y2FjaGVkSXRlbS5kb0h5ZHJhdGUoaXRlbS50b09iamVjdCgpLCB0cnVlKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5pdGVtcyA9IF93aXRoKHRoaXMuaXRlbXMsIGtleSwgaXRlbSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogTW9kaWZ5IHN1Y2Nlc3NmdWxseSBzYXZlZCBpdGVtIHN0YXRlIGFuZCBkYXRhLlxuXHQgKlxuXHQgKiBAcGFyYW0gdGFyZ2V0XG5cdCAqIEBwYXJhbSByZXNwb25zZVxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cHJpdmF0ZSBzZXRTYXZlZCh0YXJnZXQ6IFQsIHJlc3BvbnNlOiBPQXBpVXBkYXRlUmVzcG9uc2U8VD4pIHtcblx0XHRjb25zdCBpdGVtID0gcmVzcG9uc2UuZGF0YS5pdGVtO1xuXG5cdFx0dGFyZ2V0LmRvSHlkcmF0ZShpdGVtLnRvT2JqZWN0KCksIHRydWUpO1xuXG5cdFx0cmV0dXJuIHRoaXMuc2FmZWx5QWRkSXRlbSh0YXJnZXQpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgYSBuZXdseSBjcmVhdGVkIGl0ZW0gdG8gdGhpcyBzdG9yZS5cblx0ICpcblx0ICogQHBhcmFtIHJlc3BvbnNlXG5cdCAqL1xuXHRwcml2YXRlIGFkZENyZWF0ZWQocmVzcG9uc2U6IE9BcGlBZGRSZXNwb25zZTxUPikge1xuXHRcdHJldHVybiB0aGlzLnNhZmVseUFkZEl0ZW0ocmVzcG9uc2UuZGF0YS5pdGVtKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZW1vdmVzIGEgZ2l2ZW4gaXRlbSBmcm9tIHRoaXMgc3RvcmUgd2hlbiBkZWxldGVkLlxuXHQgKlxuXHQgKiBAcGFyYW0gcmVzcG9uc2Vcblx0ICovXG5cdHByaXZhdGUgc2V0RGVsZXRlZChyZXNwb25zZTogT0FwaURlbGV0ZVJlc3BvbnNlPFQ+KSB7XG5cdFx0Y29uc3QgaXRlbSA9IHJlc3BvbnNlLmRhdGEuaXRlbTtcblx0XHR0aGlzLml0ZW1zID0gX3dpdGhvdXQodGhpcy5pdGVtcywgZ2V0SWQoaXRlbSkpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgYSBnaXZlbiBpdGVtIHJlbGF0aW9ucy5cblx0ICpcblx0ICogQHBhcmFtIGl0ZW1cblx0ICogQHBhcmFtIHJlbGF0aW9uXG5cdCAqL1xuXHRpdGVtUmVsYXRpb248Wj4oaXRlbTogVCwgcmVsYXRpb246IHN0cmluZyk6IFogfCB1bmRlZmluZWQge1xuXHRcdGNvbnN0IGlkID0gZ2V0SWQoaXRlbSk7XG5cdFx0cmV0dXJuIHRoaXMucmVsYXRpb25zW2lkXSAmJiB0aGlzLnJlbGF0aW9uc1tpZF1bcmVsYXRpb25dO1xuXHR9XG5cblx0LyoqXG5cdCAqIElkZW50aWZ5IGEgZ2l2ZW4gaXRlbSBpbiB0aGlzIHN0b3JlIGJ5IGl0cyBpZC5cblx0ICpcblx0ICogQHBhcmFtIGlkXG5cdCAqIEBwYXJhbSBjaGVja0NhY2hlXG5cdCAqL1xuXHRpZGVudGlmeShpZDogc3RyaW5nLCBjaGVja0NhY2hlID0gdHJ1ZSk6IFQgfCB1bmRlZmluZWQge1xuXHRcdGNvbnN0IGl0ZW0gPSB0aGlzLml0ZW1zW2lkXTtcblx0XHRsZXQgYztcblxuXHRcdGlmIChpdGVtKSByZXR1cm4gaXRlbTtcblxuXHRcdGlmIChjaGVja0NhY2hlKSB7XG5cdFx0XHRjID0gZ2V0RW50aXR5Q2FjaGUodGhpcy5lbnRpdHkubmFtZSkgYXMgYW55O1xuXG5cdFx0XHRyZXR1cm4gYyAmJiBjW2lkXTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgdGhpcyBzdG9yZSBpdGVtcyBsaXN0LlxuXHQgKlxuXHQgKiBAcGFyYW0gaWRzXG5cdCAqL1xuXHRsaXN0KGlkczogc3RyaW5nW10gPSBbXSk6IFRbXSB7XG5cdFx0Y29uc3QgbGlzdDogVFtdID0gW10sXG5cdFx0XHRsZW4gPSBpZHMubGVuZ3RoO1xuXHRcdGlmIChsZW4pIHtcblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdFx0Y29uc3QgaWQgPSBpZHNbaV0sXG5cdFx0XHRcdFx0aXRlbSA9IHRoaXMuaWRlbnRpZnkoaWQpO1xuXHRcdFx0XHRpZiAoaXRlbSkge1xuXHRcdFx0XHRcdGxpc3QucHVzaChpdGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKGNvbnN0IGtleSBpbiB0aGlzLml0ZW1zKSB7XG5cdFx0XHRcdGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpcy5pdGVtcywga2V5KSkge1xuXHRcdFx0XHRcdGxpc3QucHVzaCh0aGlzLml0ZW1zW2tleV0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxpc3Q7XG5cdH1cblxuXHQvKipcblx0ICogT3JkZXIgaXRlbXMuXG5cdCAqXG5cdCAqIEBwYXJhbSBvcmRlclxuXHQgKi9cblx0b3JkZXJCeShvcmRlcjogKGE6IFQsIGI6IFQpID0+IG51bWJlcik6IFRbXSB7XG5cdFx0Y29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHRoaXMuaXRlbXMpO1xuXG5cdFx0cmV0dXJuIGtleXMubWFwKChrZXkpID0+IHRoaXMuaXRlbXNba2V5XSkuc29ydChvcmRlcik7XG5cdH1cblxuXHQvKipcblx0ICogT3JkZXIgaXRlbXMgYnkgdmFsdWUgb2YgYSBnaXZlbiBjb2x1bW4uXG5cdCAqXG5cdCAqIEBwYXJhbSBjb2x1bW5cblx0ICovXG5cdG9yZGVyQnlWYWx1ZU9mKGNvbHVtbjogc3RyaW5nKTogVFtdIHtcblx0XHRyZXR1cm4gdGhpcy5vcmRlckJ5KChhOiBhbnksIGI6IGFueSkgPT4ge1xuXHRcdFx0cmV0dXJuIGFbY29sdW1uXSAtIGJbY29sdW1uXTtcblx0XHR9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBGaWx0ZXIgaXRlbXMgaW4gdGhpcyBzdG9yZSBvciBpbiBhIGdpdmVuIGxpc3QuXG5cdCAqXG5cdCAqIEBwYXJhbSBsaXN0XG5cdCAqIEBwYXJhbSBwcmVkaWNhdGVcblx0ICogQHBhcmFtIG1heFxuXHQgKi9cblx0ZmlsdGVyKFxuXHRcdGxpc3Q6IFRbXSA9IHRoaXMubGlzdCgpLFxuXHRcdHByZWRpY2F0ZTogKHZhbHVlOiBULCBpbmRleDogbnVtYmVyKSA9PiBib29sZWFuLFxuXHRcdG1heCA9IEluZmluaXR5XG5cdCk6IFRbXSB7XG5cdFx0Y29uc3QgcmVzdWx0OiBUW10gPSBbXSxcblx0XHRcdGxlbiA9IGxpc3QubGVuZ3RoO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsZW4gJiYgcmVzdWx0Lmxlbmd0aCA8IG1heDsgaSsrKSB7XG5cdFx0XHRpZiAocHJlZGljYXRlKGxpc3RbaV0sIGkpKSB7XG5cdFx0XHRcdHJlc3VsdC5wdXNoKGxpc3RbaV0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cblxuXHQvKipcblx0ICogU2VsZWN0IHNvbWUgaXRlbXMgaW4gdGhpcyBzdG9yZS5cblx0ICpcblx0ICogQGFsaWFzIGZpbHRlclxuXHQgKlxuXHQgKiBAcGFyYW0gbGlzdFxuXHQgKiBAcGFyYW0gcHJlZGljYXRlXG5cdCAqIEBwYXJhbSBtYXhcblx0ICovXG5cdHNlbGVjdChcblx0XHRsaXN0OiBUW10gPSB0aGlzLmxpc3QoKSxcblx0XHRwcmVkaWNhdGU6ICh2YWx1ZTogVCwgaW5kZXg6IG51bWJlcikgPT4gYm9vbGVhbixcblx0XHRtYXggPSBJbmZpbml0eVxuXHQpOiBUW10ge1xuXHRcdHJldHVybiB0aGlzLmZpbHRlcihsaXN0LCBwcmVkaWNhdGUsIG1heCk7XG5cdH1cblxuXHQvKipcblx0ICogU2VhcmNoIGl0ZW1zIGluIHRoaXMgc3RvcmUgb3IgaW4gYSBnaXZlbiBpdGVtcyBsaXN0LlxuXHQgKlxuXHQgKiBAcGFyYW0gbGlzdFxuXHQgKiBAcGFyYW0gc2VhcmNoXG5cdCAqIEBwYXJhbSBzdHJpbmdCdWlsZGVyXG5cdCAqL1xuXHRzZWFyY2goXG5cdFx0bGlzdDogVFtdID0gdGhpcy5saXN0KCksXG5cdFx0c2VhcmNoOiBzdHJpbmcsXG5cdFx0c3RyaW5nQnVpbGRlcjogKHZhbHVlOiBULCBpbmRleDogbnVtYmVyKSA9PiBzdHJpbmdcblx0KTogVFtdIHtcblx0XHRpZiAoIShzZWFyY2ggPSBzZWFyY2gudHJpbSgpKS5sZW5ndGgpIHtcblx0XHRcdHJldHVybiBsaXN0O1xuXHRcdH1cblxuXHRcdGNvbnN0IHJlZyA9IG5ldyBSZWdFeHAoZXNjYXBlUmVnRXhwKHNlYXJjaCksICdpJyk7XG5cblx0XHRyZXR1cm4gbGlzdC5maWx0ZXIoKGl0ZW06IGFueSwgaW5kZXg6IG51bWJlcikgPT4ge1xuXHRcdFx0Y29uc3QgdiA9IHN0cmluZ0J1aWxkZXIoaXRlbSwgaW5kZXgpO1xuXHRcdFx0cmV0dXJuIHJlZy50ZXN0KHYpO1xuXHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIENvdW50IGl0ZW1zIGluIHRoaXMgc3RvcmUuXG5cdCAqL1xuXHR0b3RhbENvdW50KCk6IG51bWJlciB7XG5cdFx0cmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuaXRlbXMpLmxlbmd0aDtcblx0fVxufVxuIl19