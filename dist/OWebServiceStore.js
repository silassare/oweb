import { getEntityCache } from 'gobl-utils-ts';
import { escapeRegExp, isPlainObject } from './utils';
import OWebService from './OWebService';
const getId = (item) => item.singlePKValue();
const _with = (target, key, item) => {
    return { ...target, [key]: item };
}, _without = (target, key) => {
    delete target[key];
    return { ...target };
};
export default class OWebServiceStore extends OWebService {
    entity;
    items = {};
    relations = {};
    /**
     * OWebServiceStore constructor.
     *
     * @param _appContext
     * @param entity
     * @param service
     */
    constructor(_appContext, entity, service) {
        super(_appContext, service);
        this.entity = entity;
    }
    /**
     * Creates request to get an item by id.
     *
     * @param id The item id.
     * @param relations The relations to retrieve.
     */
    getItemRequest(id, relations = '') {
        const ctx = this;
        return this.getRequest(id, relations)
            .onGoodNews(function goodNewsHandler(response) {
            ctx.addItemToList(response.json.data.item, response.json.data.relations);
        });
    }
    /**
     * Creates request to get items list.
     *
     * @param options
     */
    getItemsListRequest(options = {}) {
        const ctx = this;
        return ctx
            .getAllRequest(options)
            .onGoodNews(function goodNewsHandler(response) {
            ctx.addItemsToList(response.json.data.items, response.json.data.relations);
        });
    }
    /**
     * Creates request to add new item.
     *
     * @param data
     */
    addItemRequest(data) {
        const ctx = this;
        return ctx
            .addRequest(data)
            .onGoodNews(function goodNewsHandler(response) {
            ctx.addCreated(response.json);
        });
    }
    /**
     * Creates update request for a given item.
     *
     * @param item
     */
    updateItemRequest(item) {
        const ctx = this, id = getId(item), diff = item.toObject(true);
        item.isSaving(true);
        return ctx
            .updateRequest(id, diff)
            .onGoodNews(function goodNewsHandler(response) {
            ctx.setSaved(item, response.json);
        })
            .onFinish(function finishHandler() {
            item.isSaving(false);
        });
    }
    /**
     * Creates a delete request for a given item.
     *
     * @param item
     */
    deleteItemRequest(item) {
        const ctx = this, id = getId(item);
        item.isDeleting(true);
        return ctx
            .deleteRequest(id)
            .onGoodNews(function goodNewsHandler(response) {
            ctx.setDeleted(response.json);
        })
            .onFinish(function finishHandler() {
            item.isDeleting(false);
        });
    }
    /**
     * Adds a list of items to this store list.
     *
     * @param items
     * @param relations
     */
    addItemsToList(items, relations = {}) {
        const ctx = this, list = (isPlainObject(items)
            ? Object.values(items)
            : items || []);
        list.forEach((item) => {
            const itemId = getId(item);
            ctx.safelyAddItem(item);
            if (!ctx.relations[itemId]) {
                ctx.relations = _with(ctx.relations, itemId, {});
            }
            for (const rel in relations) {
                if (Object.prototype.hasOwnProperty.call(relations, rel)) {
                    const data = relations[rel];
                    if (data[itemId]) {
                        ctx.relations[itemId] = _with(ctx.relations[itemId], rel, data[itemId]);
                    }
                }
            }
        });
    }
    /**
     * Adds a given item and its relations to this store.
     *
     * @param item
     * @param relations
     */
    addItemToList(item, relations = {}) {
        const ctx = this, itemId = getId(item);
        ctx.safelyAddItem(item);
        if (!ctx.relations[itemId]) {
            ctx.relations = _with(ctx.relations, itemId, {});
        }
        for (const rel in relations) {
            if (Object.prototype.hasOwnProperty.call(relations, rel)) {
                ctx.relations[itemId] = _with(ctx.relations[itemId], rel, relations[rel]);
            }
        }
    }
    /**
     * Safely add item to this store.
     *
     * @param item
     * @private
     */
    safelyAddItem(item) {
        const key = getId(item), cachedItem = this.items[key];
        if (cachedItem) {
            cachedItem.doHydrate(item.toObject(), true);
        }
        else {
            this.items = _with(this.items, key, item);
        }
        return this;
    }
    /**
     * Modify successfully saved item state and data.
     *
     * @param target
     * @param response
     * @private
     */
    setSaved(target, response) {
        const item = response.data.item;
        target.doHydrate(item.toObject(), true);
        return this.safelyAddItem(target);
    }
    /**
     * Adds a newly created item to this store.
     *
     * @param response
     */
    addCreated(response) {
        return this.safelyAddItem(response.data.item);
    }
    /**
     * Removes a given item from this store when deleted.
     *
     * @param response
     */
    setDeleted(response) {
        const item = response.data.item;
        this.items = _without(this.items, getId(item));
        return this;
    }
    /**
     * Gets a given item relations.
     *
     * @param item
     * @param relation
     */
    itemRelation(item, relation) {
        const id = getId(item);
        return this.relations[id] && this.relations[id][relation];
    }
    /**
     * Identify a given item in this store by its id.
     *
     * @param id
     * @param checkCache
     */
    identify(id, checkCache = true) {
        const item = this.items[id];
        let c;
        if (item)
            return item;
        if (checkCache) {
            c = getEntityCache(this.entity.name);
            return c && c[id];
        }
        return undefined;
    }
    /**
     * Gets this store items list.
     *
     * @param ids
     */
    list(ids = []) {
        const list = [], len = ids.length;
        if (len) {
            for (let i = 0; i < len; i++) {
                const id = ids[i], item = this.identify(id);
                if (item) {
                    list.push(item);
                }
            }
        }
        else {
            for (const key in this.items) {
                if (Object.prototype.hasOwnProperty.call(this.items, key)) {
                    list.push(this.items[key]);
                }
            }
        }
        return list;
    }
    /**
     * Order items.
     *
     * @param order
     */
    orderBy(order) {
        const keys = Object.keys(this.items);
        return keys.map((key) => this.items[key]).sort(order);
    }
    /**
     * Order items by value of a given column.
     *
     * @param column
     */
    orderByValueOf(column) {
        return this.orderBy((a, b) => {
            return a[column] - b[column];
        });
    }
    /**
     * Filter items in this store or in a given list.
     *
     * @param list
     * @param predicate
     * @param max
     */
    filter(list = this.list(), predicate, max = Infinity) {
        const result = [], len = list.length;
        for (let i = 0; i < len && result.length < max; i++) {
            if (predicate(list[i], i)) {
                result.push(list[i]);
            }
        }
        return result;
    }
    /**
     * Select some items in this store.
     *
     * @alias filter
     *
     * @param list
     * @param predicate
     * @param max
     */
    select(list = this.list(), predicate, max = Infinity) {
        return this.filter(list, predicate, max);
    }
    /**
     * Search items in this store or in a given items list.
     *
     * @param list
     * @param search
     * @param stringBuilder
     */
    search(list = this.list(), search, stringBuilder) {
        if (!(search = search.trim()).length) {
            return list;
        }
        const reg = new RegExp(escapeRegExp(search), 'i');
        return list.filter((item, index) => {
            const v = stringBuilder(item, index);
            return reg.test(v);
        });
    }
    /**
     * Count items in this store.
     */
    totalCount() {
        return Object.keys(this.items).length;
    }
}
//# sourceMappingURL=data:application/json;base64,