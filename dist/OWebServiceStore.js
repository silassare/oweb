import { GoblEntity } from 'gobl-utils-ts';
import OWebService from './OWebService';
import { escapeRegExp, isPlainObject, noop } from './utils/Utils';
const getId = (item) => item.singlePKValue();
const _with = (target, key, item) => {
    return { ...target, [key]: item };
}, _without = (target, key) => {
    delete target[key];
    return { ...target };
};
export default class OWebServiceStore extends OWebService {
    constructor(appContext, entity, serviceName, persistentCache = false) {
        super(appContext, serviceName, persistentCache);
        this.entity = entity;
        this.items = {};
        this.relations = {};
    }
    getItem(id, relations = '', then, fail, freeze = true, loadCacheFirst = false) {
        const ctx = this;
        return ctx.getRequest(id, relations, (response, fromCache) => {
            ctx.addItemToList(response.data.item, response.data.relations);
            then && then(response, fromCache);
        }, fail || noop, freeze, loadCacheFirst);
    }
    getAllItems(options = {}, then, fail, freeze = true, forceCache = true) {
        const ctx = this;
        return ctx.getAllRequest(options, (response, fromCache) => {
            ctx.addItemsToList(response.data.items, response.data.relations);
            then && then(response, fromCache);
        }, fail || noop, freeze, forceCache);
    }
    addItem(data, then, fail, freeze = true) {
        const ctx = this;
        return ctx.addRequest(data, (result) => {
            ctx.addCreated(result);
            then && then(result);
        }, fail || noop, freeze);
    }
    updateItem(item, then, fail, freeze = true) {
        const ctx = this, id = getId(item);
        if (!item.isSaved()) {
            const diff = item.toObject(true);
            item.isSaving(true);
            return ctx.updateRequest(id, diff, (result) => {
                item.isSaving(false);
                ctx.setSaved(item, result);
                then && then(result);
            }, (response, com) => {
                item.isSaving(false);
                fail && fail(response, com);
            }, freeze);
        }
        console.error('Not modified ->', item);
        return false;
    }
    deleteItem(item, then, fail, freeze = true) {
        const ctx = this, id = getId(item);
        item.isDeleting(true);
        return ctx.deleteRequest(id, (result) => {
            item.isDeleting(false);
            ctx.setDeleted(result);
            then && then(result);
        }, (response, com) => {
            item.isDeleting(false);
            fail && fail(response, com);
        }, freeze);
    }
    addItemsToList(items, relations = {}) {
        const ctx = this, list = (isPlainObject(items)
            ? Object.values(items)
            : items || []);
        list.forEach((item) => {
            const itemId = getId(item);
            ctx.safelyAddItem(item);
            if (!ctx.relations[itemId]) {
                ctx.relations = _with(ctx.relations, itemId, {});
            }
            for (const rel in relations) {
                if (relations.hasOwnProperty(rel)) {
                    const data = relations[rel];
                    if (data[itemId]) {
                        ctx.relations[itemId] = _with(ctx.relations[itemId], rel, data[itemId]);
                    }
                }
            }
        });
    }
    addItemToList(item, relations = {}) {
        const ctx = this, itemId = getId(item);
        ctx.safelyAddItem(item);
        if (!ctx.relations[itemId]) {
            ctx.relations = _with(ctx.relations, itemId, {});
        }
        for (const rel in relations) {
            if (relations.hasOwnProperty(rel)) {
                ctx.relations[itemId] = _with(ctx.relations[itemId], rel, relations[rel]);
            }
        }
    }
    safelyAddItem(item) {
        const key = getId(item), cachedItem = this.items[key];
        if (cachedItem) {
            cachedItem.doHydrate(item.toObject(), true);
        }
        else {
            this.items = _with(this.items, key, item);
        }
        return this;
    }
    setSaved(target, response) {
        const item = response.data.item;
        target.doHydrate(item.toObject(), true);
        this.safelyAddItem(target);
    }
    addCreated(response) {
        this.safelyAddItem(response.data.item);
    }
    setDeleted(response) {
        const item = response.data.item;
        this.items = _without(this.items, getId(item));
    }
    itemRelation(item, relation) {
        const id = getId(item);
        return this.relations[id] && this.relations[id][relation];
    }
    identify(id, checkCache = true) {
        const item = this.items[id];
        let c;
        if (item)
            return item;
        if (checkCache) {
            c = GoblEntity.subCache(this.entity.name);
            return c && c[id];
        }
        return undefined;
    }
    list(ids = []) {
        const list = [], len = ids.length;
        if (len) {
            for (let i = 0; i < len; i++) {
                const id = ids[i], item = this.identify(id);
                if (item) {
                    list.push(item);
                }
            }
        }
        else {
            for (const key in this.items) {
                if (Object.prototype.hasOwnProperty.call(this.items, key)) {
                    list.push(this.items[key]);
                }
            }
        }
        return list;
    }
    orderBy(orderFn) {
        const keys = Object.keys(this.items);
        return keys.map((key) => this.items[key]).sort(orderFn);
    }
    orderByValueOf(column) {
        return this.orderBy((a, b) => {
            return a[column] - b[column];
        });
    }
    select(list = this.list(), predicate, max = Infinity) {
        const result = [], len = list.length;
        for (let i = 0; i < len && result.length < max; i++) {
            if (predicate(list[i], i)) {
                result.push(list[i]);
            }
        }
        return result;
    }
    search(list = this.list(), search, stringBuilder) {
        if (!(search = search.trim()).length) {
            return list;
        }
        const reg = new RegExp(escapeRegExp(search), 'i');
        return list.filter((item, index) => {
            const v = stringBuilder(item, index);
            return reg.test(v);
        });
    }
    totalCount() {
        return Object.keys(this.items).length;
    }
}
//# sourceMappingURL=data:application/json;base64,