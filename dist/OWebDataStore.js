import OWebEvent from './OWebEvent';
import { id, logger } from './utils';
const ls = window.localStorage, parse = function parse(data) {
    let value;
    if (data !== null) {
        try {
            value = JSON.parse(data);
        }
        catch (e) {
            logger.error(e);
        }
    }
    return value;
};
export default class OWebDataStore extends OWebEvent {
    static EVT_DATA_STORE_CLEARED = id();
    _key;
    _data = {};
    constructor(_appContext) {
        super();
        this._key = _appContext.getAppName();
        if (ls) {
            this._data = parse(ls.getItem(this._key)) || {};
        }
    }
    /**
     * Sets key/value pair in the store.
     *
     * @param key The data key name.
     * @param value The data value.
     */
    set(key, value) {
        this._data[key] = value;
        this._persist();
        return false;
    }
    /**
     * Gets data with the given key.
     *
     * When the key is a regexp all data with a key name that match the given
     * regexp will be returned in an object.
     *
     * @param key The data key name.
     */
    get(key) {
        if (key instanceof RegExp) {
            const list = Object.keys(this._data), result = {};
            for (let i = 0; i < list.length; i++) {
                const k = list[i];
                if (key.test(k)) {
                    result[k] = this._data[k];
                }
            }
            return result;
        }
        else {
            return this._data[key];
        }
    }
    /**
     * Removes data with the given key.
     *
     * When the key is a regexp all data with a key name that match the given
     * regexp will be removed.
     *
     * @param key
     */
    remove(key) {
        if (ls) {
            if (key instanceof RegExp) {
                const list = Object.keys(this._data);
                for (let i = 0; i < list.length; i++) {
                    const k = list[i];
                    if (key.test(k)) {
                        delete this._data[k];
                    }
                }
            }
            else {
                delete this._data[key];
            }
            this._persist();
            return true;
        }
        return false;
    }
    /**
     * Clear the data store.
     */
    clear() {
        this._data = {};
        this._persist();
        this.trigger(OWebDataStore.EVT_DATA_STORE_CLEARED);
        return true;
    }
    /**
     * Register data store clear event handler.
     *
     * @param cb
     */
    onClear(cb) {
        return this.on(OWebDataStore.EVT_DATA_STORE_CLEARED, cb);
    }
    /**
     * Helper to make data store persistent.
     *
     * @private
     */
    _persist() {
        if (ls) {
            try {
                ls.setItem(this._key, JSON.stringify(this._data));
                return true;
            }
            catch (e) {
                logger.error(e);
            }
        }
        return false;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYkRhdGFTdG9yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9PV2ViRGF0YVN0b3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sU0FBUyxNQUFNLGFBQWEsQ0FBQztBQUNwQyxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxNQUFNLFNBQVMsQ0FBQztBQWVyQyxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsWUFBWSxFQUM3QixLQUFLLEdBQUcsU0FBUyxLQUFLLENBQUMsSUFBbUI7SUFDekMsSUFBSSxLQUFVLENBQUM7SUFFZixJQUFJLElBQUksS0FBSyxJQUFJLEVBQUU7UUFDbEIsSUFBSTtZQUNILEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3pCO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDWCxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2hCO0tBQ0Q7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNkLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxPQUFPLE9BQU8sYUFBYyxTQUFRLFNBQVM7SUFDbkQsTUFBTSxDQUFVLHNCQUFzQixHQUFHLEVBQUUsRUFBRSxDQUFDO0lBQzdCLElBQUksQ0FBUztJQUN0QixLQUFLLEdBQWtDLEVBQUUsQ0FBQztJQUVsRCxZQUFZLFdBQW9CO1FBQy9CLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLElBQUksR0FBRyxXQUFXLENBQUMsVUFBVSxFQUFFLENBQUM7UUFFckMsSUFBSSxFQUFFLEVBQUU7WUFDUCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUNoRDtJQUNGLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILEdBQUcsQ0FBQyxHQUFXLEVBQUUsS0FBaUI7UUFDakMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7UUFFeEIsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRWhCLE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQztJQUVEOzs7Ozs7O09BT0c7SUFDSCxHQUFHLENBQUMsR0FBb0I7UUFDdkIsSUFBSSxHQUFHLFlBQVksTUFBTSxFQUFFO1lBQzFCLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUNuQyxNQUFNLEdBQVEsRUFBRSxDQUFDO1lBRWxCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNyQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xCLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTtvQkFDaEIsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQzFCO2FBQ0Q7WUFFRCxPQUFPLE1BQU0sQ0FBQztTQUNkO2FBQU07WUFDTixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDdkI7SUFDRixDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNILE1BQU0sQ0FBQyxHQUFvQjtRQUMxQixJQUFJLEVBQUUsRUFBRTtZQUNQLElBQUksR0FBRyxZQUFZLE1BQU0sRUFBRTtnQkFDMUIsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBRXJDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUNyQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ2xCLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRTt3QkFDaEIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO3FCQUNyQjtpQkFDRDthQUNEO2lCQUFNO2dCQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUN2QjtZQUVELElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUVoQixPQUFPLElBQUksQ0FBQztTQUNaO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxLQUFLO1FBQ0osSUFBSSxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7UUFFaEIsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRWhCLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLHNCQUFzQixDQUFDLENBQUM7UUFFbkQsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE9BQU8sQ0FBQyxFQUF3QjtRQUMvQixPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLHNCQUFzQixFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRDs7OztPQUlHO0lBQ0ssUUFBUTtRQUNmLElBQUksRUFBRSxFQUFFO1lBQ1AsSUFBSTtnQkFDSCxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDbEQsT0FBTyxJQUFJLENBQUM7YUFDWjtZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNYLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDaEI7U0FDRDtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBPV2ViQXBwIGZyb20gJy4vT1dlYkFwcCc7XG5pbXBvcnQgT1dlYkV2ZW50IGZyb20gJy4vT1dlYkV2ZW50JztcbmltcG9ydCB7IGlkLCBsb2dnZXIgfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGludGVyZmFjZSBPSlNPTlNlcmlhbGl6YWJsZSB7XG5cdHRvSlNPTigpOiBPSlNPTlZhbHVlO1xufVxuXG5leHBvcnQgdHlwZSBPSlNPTlZhbHVlID1cblx0fCBzdHJpbmdcblx0fCBudW1iZXJcblx0fCBib29sZWFuXG5cdHwgRGF0ZVxuXHR8IE9KU09OU2VyaWFsaXphYmxlXG5cdHwgeyBba2V5OiBzdHJpbmddOiBPSlNPTlZhbHVlIH1cblx0fCBPSlNPTlZhbHVlW107XG5cbmNvbnN0IGxzID0gd2luZG93LmxvY2FsU3RvcmFnZSxcblx0cGFyc2UgPSBmdW5jdGlvbiBwYXJzZShkYXRhOiBzdHJpbmcgfCBudWxsKTogYW55IHtcblx0XHRsZXQgdmFsdWU6IGFueTtcblxuXHRcdGlmIChkYXRhICE9PSBudWxsKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHR2YWx1ZSA9IEpTT04ucGFyc2UoZGF0YSk7XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdGxvZ2dlci5lcnJvcihlKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9XZWJEYXRhU3RvcmUgZXh0ZW5kcyBPV2ViRXZlbnQge1xuXHRzdGF0aWMgcmVhZG9ubHkgRVZUX0RBVEFfU1RPUkVfQ0xFQVJFRCA9IGlkKCk7XG5cdHByaXZhdGUgcmVhZG9ubHkgX2tleTogc3RyaW5nO1xuXHRwcml2YXRlIF9kYXRhOiB7IFtrZXk6IHN0cmluZ106IE9KU09OVmFsdWUgfSA9IHt9O1xuXG5cdGNvbnN0cnVjdG9yKF9hcHBDb250ZXh0OiBPV2ViQXBwKSB7XG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLl9rZXkgPSBfYXBwQ29udGV4dC5nZXRBcHBOYW1lKCk7XG5cblx0XHRpZiAobHMpIHtcblx0XHRcdHRoaXMuX2RhdGEgPSBwYXJzZShscy5nZXRJdGVtKHRoaXMuX2tleSkpIHx8IHt9O1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBTZXRzIGtleS92YWx1ZSBwYWlyIGluIHRoZSBzdG9yZS5cblx0ICpcblx0ICogQHBhcmFtIGtleSBUaGUgZGF0YSBrZXkgbmFtZS5cblx0ICogQHBhcmFtIHZhbHVlIFRoZSBkYXRhIHZhbHVlLlxuXHQgKi9cblx0c2V0KGtleTogc3RyaW5nLCB2YWx1ZTogT0pTT05WYWx1ZSk6IGJvb2xlYW4ge1xuXHRcdHRoaXMuX2RhdGFba2V5XSA9IHZhbHVlO1xuXG5cdFx0dGhpcy5fcGVyc2lzdCgpO1xuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldHMgZGF0YSB3aXRoIHRoZSBnaXZlbiBrZXkuXG5cdCAqXG5cdCAqIFdoZW4gdGhlIGtleSBpcyBhIHJlZ2V4cCBhbGwgZGF0YSB3aXRoIGEga2V5IG5hbWUgdGhhdCBtYXRjaCB0aGUgZ2l2ZW5cblx0ICogcmVnZXhwIHdpbGwgYmUgcmV0dXJuZWQgaW4gYW4gb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0ga2V5IFRoZSBkYXRhIGtleSBuYW1lLlxuXHQgKi9cblx0Z2V0KGtleTogc3RyaW5nIHwgUmVnRXhwKTogYW55IHtcblx0XHRpZiAoa2V5IGluc3RhbmNlb2YgUmVnRXhwKSB7XG5cdFx0XHRjb25zdCBsaXN0ID0gT2JqZWN0LmtleXModGhpcy5fZGF0YSksXG5cdFx0XHRcdHJlc3VsdDogYW55ID0ge307XG5cblx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRjb25zdCBrID0gbGlzdFtpXTtcblx0XHRcdFx0aWYgKGtleS50ZXN0KGspKSB7XG5cdFx0XHRcdFx0cmVzdWx0W2tdID0gdGhpcy5fZGF0YVtrXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5fZGF0YVtrZXldO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBSZW1vdmVzIGRhdGEgd2l0aCB0aGUgZ2l2ZW4ga2V5LlxuXHQgKlxuXHQgKiBXaGVuIHRoZSBrZXkgaXMgYSByZWdleHAgYWxsIGRhdGEgd2l0aCBhIGtleSBuYW1lIHRoYXQgbWF0Y2ggdGhlIGdpdmVuXG5cdCAqIHJlZ2V4cCB3aWxsIGJlIHJlbW92ZWQuXG5cdCAqXG5cdCAqIEBwYXJhbSBrZXlcblx0ICovXG5cdHJlbW92ZShrZXk6IHN0cmluZyB8IFJlZ0V4cCk6IGJvb2xlYW4ge1xuXHRcdGlmIChscykge1xuXHRcdFx0aWYgKGtleSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuXHRcdFx0XHRjb25zdCBsaXN0ID0gT2JqZWN0LmtleXModGhpcy5fZGF0YSk7XG5cblx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0Y29uc3QgayA9IGxpc3RbaV07XG5cdFx0XHRcdFx0aWYgKGtleS50ZXN0KGspKSB7XG5cdFx0XHRcdFx0XHRkZWxldGUgdGhpcy5fZGF0YVtrXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlbGV0ZSB0aGlzLl9kYXRhW2tleV07XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuX3BlcnNpc3QoKTtcblxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0LyoqXG5cdCAqIENsZWFyIHRoZSBkYXRhIHN0b3JlLlxuXHQgKi9cblx0Y2xlYXIoKTogYm9vbGVhbiB7XG5cdFx0dGhpcy5fZGF0YSA9IHt9O1xuXG5cdFx0dGhpcy5fcGVyc2lzdCgpO1xuXG5cdFx0dGhpcy50cmlnZ2VyKE9XZWJEYXRhU3RvcmUuRVZUX0RBVEFfU1RPUkVfQ0xFQVJFRCk7XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZWdpc3RlciBkYXRhIHN0b3JlIGNsZWFyIGV2ZW50IGhhbmRsZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSBjYlxuXHQgKi9cblx0b25DbGVhcihjYjogKHRoaXM6IHRoaXMpID0+IHZvaWQpOiB0aGlzIHtcblx0XHRyZXR1cm4gdGhpcy5vbihPV2ViRGF0YVN0b3JlLkVWVF9EQVRBX1NUT1JFX0NMRUFSRUQsIGNiKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBIZWxwZXIgdG8gbWFrZSBkYXRhIHN0b3JlIHBlcnNpc3RlbnQuXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRwcml2YXRlIF9wZXJzaXN0KCk6IGJvb2xlYW4ge1xuXHRcdGlmIChscykge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0bHMuc2V0SXRlbSh0aGlzLl9rZXksIEpTT04uc3RyaW5naWZ5KHRoaXMuX2RhdGEpKTtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdGxvZ2dlci5lcnJvcihlKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cbiJdfQ==