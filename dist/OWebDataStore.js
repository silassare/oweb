const ls = window.localStorage, parse = function (data) {
    let value = undefined;
    if (data !== null) {
        try {
            value = JSON.parse(data);
        }
        catch (e) {
            console.error(e);
        }
    }
    return value;
};
export default class OWebDataStore {
    static save(keyName, data) {
        if (ls) {
            try {
                ls.setItem(keyName, JSON.stringify(data));
                return true;
            }
            catch (e) {
                console.error(e);
            }
        }
        return false;
    }
    static load(keyName) {
        if (ls) {
            if (arguments[0] instanceof RegExp) {
                let keyReg = arguments[0];
                let list = Object.keys(ls);
                let result = {};
                for (let i = 0; i < list.length; i++) {
                    let k = list[i];
                    if (keyReg.test(k)) {
                        result[k] = parse(ls.getItem(k));
                    }
                }
                return result;
            }
            else {
                return parse(ls.getItem(keyName));
            }
        }
        return null;
    }
    static remove(keyName) {
        if (ls) {
            if (arguments[0] instanceof RegExp) {
                let list = Object.keys(ls);
                let keyReg = arguments[0];
                let count = 0;
                for (let i = 0; i < list.length; i++) {
                    let k = list[i];
                    if (keyReg.test(k)) {
                        ls.removeItem(k);
                        count++;
                    }
                }
            }
            else {
                ls.removeItem(keyName);
            }
            return true;
        }
        return false;
    }
    static clear() {
        return ls && !ls.clear() && true;
    }
}
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYkRhdGFTdG9yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9PV2ViRGF0YVN0b3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sRUFBRSxHQUFNLE1BQU0sQ0FBQyxZQUFZLEVBQzlCLEtBQUssR0FBRyxVQUFVLElBQW1CO0lBQ3BDLElBQUksS0FBSyxHQUFRLFNBQVMsQ0FBQztJQUUzQixJQUFJLElBQUksS0FBSyxJQUFJLEVBQUU7UUFDbEIsSUFBSTtZQUNILEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3pCO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDWCxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pCO0tBQ0Q7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNkLENBQUMsQ0FBQztBQUVMLE1BQU0sQ0FBQyxPQUFPO0lBRWIsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFlLEVBQUUsSUFBUztRQUNyQyxJQUFJLEVBQUUsRUFBRTtZQUNQLElBQUk7Z0JBQ0gsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUMxQyxPQUFPLElBQUksQ0FBQzthQUNaO1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1gsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNqQjtTQUNEO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZCxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFlO1FBQzFCLElBQUksRUFBRSxFQUFFO1lBQ1AsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLFlBQVksTUFBTSxFQUFFO2dCQUNuQyxJQUFJLE1BQU0sR0FBUSxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQy9CLElBQUksSUFBSSxHQUFVLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7Z0JBQ2xDLElBQUksTUFBTSxHQUFRLEVBQUUsQ0FBQztnQkFFckIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7b0JBQ3JDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDaEIsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO3dCQUNuQixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztxQkFDakM7aUJBQ0Q7Z0JBRUQsT0FBTyxNQUFNLENBQUM7YUFFZDtpQkFBTTtnQkFDTixPQUFPLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7YUFDbEM7U0FDRDtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBZTtRQUM1QixJQUFJLEVBQUUsRUFBRTtZQUNQLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxZQUFZLE1BQU0sRUFBRTtnQkFDbkMsSUFBSSxJQUFJLEdBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztnQkFDN0IsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMxQixJQUFJLEtBQUssR0FBSSxDQUFDLENBQUM7Z0JBRWYsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7b0JBQ3JDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDaEIsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO3dCQUNuQixFQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO3dCQUNqQixLQUFLLEVBQUUsQ0FBQztxQkFDUjtpQkFDRDthQUNEO2lCQUFNO2dCQUNOLEVBQUUsQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDdkI7WUFFRCxPQUFPLElBQUksQ0FBQztTQUNaO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZCxDQUFDO0lBRUQsTUFBTSxDQUFDLEtBQUs7UUFDWCxPQUFPLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsSUFBSSxJQUFJLENBQUM7SUFDbEMsQ0FBQztDQUNEO0FBQUEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGxzICAgID0gd2luZG93LmxvY2FsU3RvcmFnZSxcclxuXHQgIHBhcnNlID0gZnVuY3Rpb24gKGRhdGE6IHN0cmluZyB8IG51bGwpOiBhbnkge1xyXG5cdFx0ICBsZXQgdmFsdWU6IGFueSA9IHVuZGVmaW5lZDtcclxuXHJcblx0XHQgIGlmIChkYXRhICE9PSBudWxsKSB7XHJcblx0XHRcdCAgdHJ5IHtcclxuXHRcdFx0XHQgIHZhbHVlID0gSlNPTi5wYXJzZShkYXRhKTtcclxuXHRcdFx0ICB9IGNhdGNoIChlKSB7XHJcblx0XHRcdFx0ICBjb25zb2xlLmVycm9yKGUpO1xyXG5cdFx0XHQgIH1cclxuXHRcdCAgfVxyXG5cclxuXHRcdCAgcmV0dXJuIHZhbHVlO1xyXG5cdCAgfTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9XZWJEYXRhU3RvcmUge1xyXG5cclxuXHRzdGF0aWMgc2F2ZShrZXlOYW1lOiBzdHJpbmcsIGRhdGE6IGFueSk6IGJvb2xlYW4ge1xyXG5cdFx0aWYgKGxzKSB7XHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0bHMuc2V0SXRlbShrZXlOYW1lLCBKU09OLnN0cmluZ2lmeShkYXRhKSk7XHJcblx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdH0gY2F0Y2ggKGUpIHtcclxuXHRcdFx0XHRjb25zb2xlLmVycm9yKGUpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGxvYWQoa2V5TmFtZTogc3RyaW5nKTogYW55IHtcclxuXHRcdGlmIChscykge1xyXG5cdFx0XHRpZiAoYXJndW1lbnRzWzBdIGluc3RhbmNlb2YgUmVnRXhwKSB7XHJcblx0XHRcdFx0bGV0IGtleVJlZyAgICAgID0gYXJndW1lbnRzWzBdO1xyXG5cdFx0XHRcdGxldCBsaXN0ICAgICAgICA9IE9iamVjdC5rZXlzKGxzKTtcclxuXHRcdFx0XHRsZXQgcmVzdWx0OiBhbnkgPSB7fTtcclxuXHJcblx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0XHRsZXQgayA9IGxpc3RbaV07XHJcblx0XHRcdFx0XHRpZiAoa2V5UmVnLnRlc3QoaykpIHtcclxuXHRcdFx0XHRcdFx0cmVzdWx0W2tdID0gcGFyc2UobHMuZ2V0SXRlbShrKSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRyZXR1cm4gcGFyc2UobHMuZ2V0SXRlbShrZXlOYW1lKSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gbnVsbDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyByZW1vdmUoa2V5TmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XHJcblx0XHRpZiAobHMpIHtcclxuXHRcdFx0aWYgKGFyZ3VtZW50c1swXSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xyXG5cdFx0XHRcdGxldCBsaXN0ICAgPSBPYmplY3Qua2V5cyhscyk7XHJcblx0XHRcdFx0bGV0IGtleVJlZyA9IGFyZ3VtZW50c1swXTtcclxuXHRcdFx0XHRsZXQgY291bnQgID0gMDtcclxuXHJcblx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0XHRsZXQgayA9IGxpc3RbaV07XHJcblx0XHRcdFx0XHRpZiAoa2V5UmVnLnRlc3QoaykpIHtcclxuXHRcdFx0XHRcdFx0bHMucmVtb3ZlSXRlbShrKTtcclxuXHRcdFx0XHRcdFx0Y291bnQrKztcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0bHMucmVtb3ZlSXRlbShrZXlOYW1lKTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGNsZWFyKCk6IGJvb2xlYW4ge1xyXG5cdFx0cmV0dXJuIGxzICYmICFscy5jbGVhcigpICYmIHRydWU7XHJcblx0fVxyXG59OyJdfQ==