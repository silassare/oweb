import OWebEvent from "./OWebEvent";
const ls = window.localStorage, parse = function (data) {
    let value = undefined;
    if (data !== null) {
        try {
            value = JSON.parse(data);
        }
        catch (e) {
            console.error(e);
        }
    }
    return value;
};
export default class OWebDataStore extends OWebEvent {
    constructor(_app_context) {
        super();
        this._app_context = _app_context;
        this.data = {};
        this.key = _app_context.getAppName();
        this.data = parse(ls.getItem(this.key)) || {};
    }
    save(keyName, data) {
        this.data[keyName] = data;
        this._persist();
        return false;
    }
    _persist() {
        if (ls) {
            try {
                ls.setItem(this.key, JSON.stringify(this.data));
                return true;
            }
            catch (e) {
                console.error(e);
            }
        }
        return false;
    }
    load(keyName) {
        if (arguments[0] instanceof RegExp) {
            let keyReg = arguments[0];
            let list = Object.keys(this.data);
            let result = {};
            for (let i = 0; i < list.length; i++) {
                let k = list[i];
                if (keyReg.test(k)) {
                    result[k] = this.data[k];
                }
            }
            return result;
        }
        else {
            return this.data[keyName];
        }
    }
    remove(keyName) {
        if (ls) {
            if (arguments[0] instanceof RegExp) {
                let list = Object.keys(this.data);
                let keyReg = arguments[0];
                for (let i = 0; i < list.length; i++) {
                    let k = list[i];
                    if (keyReg.test(k)) {
                        delete this.data[k];
                    }
                }
            }
            else {
                delete this.data[keyName];
            }
            this._persist();
            return true;
        }
        return false;
    }
    clear() {
        this.data = {};
        this._persist();
        this.trigger(OWebDataStore.EVT_DATA_STORE_CLEAR);
        return true;
    }
    onClear(cb) {
        return this.on(OWebDataStore.EVT_DATA_STORE_CLEAR, cb);
    }
}
OWebDataStore.EVT_DATA_STORE_CLEAR = "OWebDataStore:clear";
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYkRhdGFTdG9yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9PV2ViRGF0YVN0b3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sU0FBUyxNQUFNLGFBQWEsQ0FBQztBQUVwQyxNQUFNLEVBQUUsR0FBTSxNQUFNLENBQUMsWUFBWSxFQUM5QixLQUFLLEdBQUcsVUFBVSxJQUFtQjtJQUNwQyxJQUFJLEtBQUssR0FBUSxTQUFTLENBQUM7SUFFM0IsSUFBSSxJQUFJLEtBQUssSUFBSSxFQUFFO1FBQ2xCLElBQUk7WUFDSCxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN6QjtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1gsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNqQjtLQUNEO0lBRUQsT0FBTyxLQUFLLENBQUM7QUFDZCxDQUFDLENBQUM7QUFFTCxNQUFNLENBQUMsT0FBTyxvQkFBcUIsU0FBUSxTQUFTO0lBS25ELFlBQTZCLFlBQXFCO1FBQ2pELEtBQUssRUFBRSxDQUFDO1FBRG9CLGlCQUFZLEdBQVosWUFBWSxDQUFTO1FBRjFDLFNBQUksR0FBMkIsRUFBRSxDQUFDO1FBSXpDLElBQUksQ0FBQyxHQUFHLEdBQUksWUFBWSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQ3RDLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQy9DLENBQUM7SUFFRCxJQUFJLENBQUMsT0FBZSxFQUFFLElBQVM7UUFFOUIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxJQUFJLENBQUM7UUFFMUIsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRWhCLE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQztJQUVELFFBQVE7UUFFUCxJQUFJLEVBQUUsRUFBRTtZQUNQLElBQUk7Z0JBQ0gsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7Z0JBQ2hELE9BQU8sSUFBSSxDQUFDO2FBQ1o7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDWCxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ2pCO1NBQ0Q7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNkLENBQUM7SUFFRCxJQUFJLENBQUMsT0FBZTtRQUNuQixJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsWUFBWSxNQUFNLEVBQUU7WUFDbkMsSUFBSSxNQUFNLEdBQVEsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQy9CLElBQUksSUFBSSxHQUFVLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3pDLElBQUksTUFBTSxHQUFRLEVBQUUsQ0FBQztZQUVyQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDckMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNoQixJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ25CLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUN6QjthQUNEO1lBRUQsT0FBTyxNQUFNLENBQUM7U0FDZDthQUFNO1lBQ04sT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzFCO0lBQ0YsQ0FBQztJQUVELE1BQU0sQ0FBQyxPQUFlO1FBQ3JCLElBQUksRUFBRSxFQUFFO1lBQ1AsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLFlBQVksTUFBTSxFQUFFO2dCQUNuQyxJQUFJLElBQUksR0FBSyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDcEMsSUFBSSxNQUFNLEdBQUcsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUUxQixLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtvQkFDckMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNoQixJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7d0JBQ25CLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztxQkFDcEI7aUJBQ0Q7YUFDRDtpQkFBTTtnQkFDTixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDMUI7WUFFRCxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFFaEIsT0FBTyxJQUFJLENBQUM7U0FDWjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQztJQUVELEtBQUs7UUFDSixJQUFJLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQztRQUVmLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUVoQixJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDO1FBRWpELE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQUVELE9BQU8sQ0FBQyxFQUFjO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsb0JBQW9CLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDeEQsQ0FBQzs7QUF4RmUsa0NBQW9CLEdBQUcscUJBQXFCLENBQUM7QUF5RjdELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgT1dlYkFwcCBmcm9tIFwiLi9PV2ViQXBwXCI7XHJcbmltcG9ydCBPV2ViRXZlbnQgZnJvbSBcIi4vT1dlYkV2ZW50XCI7XHJcblxyXG5jb25zdCBscyAgICA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UsXHJcblx0ICBwYXJzZSA9IGZ1bmN0aW9uIChkYXRhOiBzdHJpbmcgfCBudWxsKTogYW55IHtcclxuXHRcdCAgbGV0IHZhbHVlOiBhbnkgPSB1bmRlZmluZWQ7XHJcblxyXG5cdFx0ICBpZiAoZGF0YSAhPT0gbnVsbCkge1xyXG5cdFx0XHQgIHRyeSB7XHJcblx0XHRcdFx0ICB2YWx1ZSA9IEpTT04ucGFyc2UoZGF0YSk7XHJcblx0XHRcdCAgfSBjYXRjaCAoZSkge1xyXG5cdFx0XHRcdCAgY29uc29sZS5lcnJvcihlKTtcclxuXHRcdFx0ICB9XHJcblx0XHQgIH1cclxuXHJcblx0XHQgIHJldHVybiB2YWx1ZTtcclxuXHQgIH07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPV2ViRGF0YVN0b3JlIGV4dGVuZHMgT1dlYkV2ZW50IHtcclxuXHRzdGF0aWMgcmVhZG9ubHkgRVZUX0RBVEFfU1RPUkVfQ0xFQVIgPSBcIk9XZWJEYXRhU3RvcmU6Y2xlYXJcIjtcclxuXHRwcml2YXRlIHJlYWRvbmx5IGtleTogc3RyaW5nO1xyXG5cdHByaXZhdGUgZGF0YTogYW55ICAgICAgICAgICAgICAgICAgICA9IHt9O1xyXG5cclxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IF9hcHBfY29udGV4dDogT1dlYkFwcCkge1xyXG5cdFx0c3VwZXIoKTtcclxuXHRcdHRoaXMua2V5ICA9IF9hcHBfY29udGV4dC5nZXRBcHBOYW1lKCk7XHJcblx0XHR0aGlzLmRhdGEgPSBwYXJzZShscy5nZXRJdGVtKHRoaXMua2V5KSkgfHwge307XHJcblx0fVxyXG5cclxuXHRzYXZlKGtleU5hbWU6IHN0cmluZywgZGF0YTogYW55KTogYm9vbGVhbiB7XHJcblxyXG5cdFx0dGhpcy5kYXRhW2tleU5hbWVdID0gZGF0YTtcclxuXHJcblx0XHR0aGlzLl9wZXJzaXN0KCk7XHJcblxyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxuXHJcblx0X3BlcnNpc3QoKTogYm9vbGVhbiB7XHJcblxyXG5cdFx0aWYgKGxzKSB7XHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0bHMuc2V0SXRlbSh0aGlzLmtleSwgSlNPTi5zdHJpbmdpZnkodGhpcy5kYXRhKSk7XHJcblx0XHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHRcdH0gY2F0Y2ggKGUpIHtcclxuXHRcdFx0XHRjb25zb2xlLmVycm9yKGUpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxuXHJcblx0bG9hZChrZXlOYW1lOiBzdHJpbmcpOiBhbnkge1xyXG5cdFx0aWYgKGFyZ3VtZW50c1swXSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xyXG5cdFx0XHRsZXQga2V5UmVnICAgICAgPSBhcmd1bWVudHNbMF07XHJcblx0XHRcdGxldCBsaXN0ICAgICAgICA9IE9iamVjdC5rZXlzKHRoaXMuZGF0YSk7XHJcblx0XHRcdGxldCByZXN1bHQ6IGFueSA9IHt9O1xyXG5cclxuXHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0bGV0IGsgPSBsaXN0W2ldO1xyXG5cdFx0XHRcdGlmIChrZXlSZWcudGVzdChrKSkge1xyXG5cdFx0XHRcdFx0cmVzdWx0W2tdID0gdGhpcy5kYXRhW2tdO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHJldHVybiB0aGlzLmRhdGFba2V5TmFtZV07XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRyZW1vdmUoa2V5TmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XHJcblx0XHRpZiAobHMpIHtcclxuXHRcdFx0aWYgKGFyZ3VtZW50c1swXSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xyXG5cdFx0XHRcdGxldCBsaXN0ICAgPSBPYmplY3Qua2V5cyh0aGlzLmRhdGEpO1xyXG5cdFx0XHRcdGxldCBrZXlSZWcgPSBhcmd1bWVudHNbMF07XHJcblxyXG5cdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xyXG5cdFx0XHRcdFx0bGV0IGsgPSBsaXN0W2ldO1xyXG5cdFx0XHRcdFx0aWYgKGtleVJlZy50ZXN0KGspKSB7XHJcblx0XHRcdFx0XHRcdGRlbGV0ZSB0aGlzLmRhdGFba107XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmRhdGFba2V5TmFtZV07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdHRoaXMuX3BlcnNpc3QoKTtcclxuXHJcblx0XHRcdHJldHVybiB0cnVlO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBmYWxzZTtcclxuXHR9XHJcblxyXG5cdGNsZWFyKCk6IGJvb2xlYW4ge1xyXG5cdFx0dGhpcy5kYXRhID0ge307XHJcblxyXG5cdFx0dGhpcy5fcGVyc2lzdCgpO1xyXG5cclxuXHRcdHRoaXMudHJpZ2dlcihPV2ViRGF0YVN0b3JlLkVWVF9EQVRBX1NUT1JFX0NMRUFSKTtcclxuXHJcblx0XHRyZXR1cm4gdHJ1ZTtcclxuXHR9XHJcblxyXG5cdG9uQ2xlYXIoY2I6ICgpID0+IHZvaWQpIHtcclxuXHRcdHJldHVybiB0aGlzLm9uKE9XZWJEYXRhU3RvcmUuRVZUX0RBVEFfU1RPUkVfQ0xFQVIsIGNiKTtcclxuXHR9XHJcbn07Il19