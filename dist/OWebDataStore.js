import OWebEvent from './OWebEvent';
import { id, logger } from './utils';
const ls = window.localStorage, parse = function parse(data) {
    let value;
    if (data !== null) {
        try {
            value = JSON.parse(data);
        }
        catch (e) {
            logger.error(e);
        }
    }
    return value;
};
export default class OWebDataStore extends OWebEvent {
    static EVT_DATA_STORE_CLEARED = id();
    _key;
    _data = {};
    constructor(_appContext) {
        super();
        this._key = _appContext.getAppName();
        this._data = parse(ls.getItem(this._key)) || {};
    }
    set(key, value) {
        this._data[key] = value;
        this._persist();
        return false;
    }
    get(key) {
        if (key instanceof RegExp) {
            const list = Object.keys(this._data), result = {};
            for (let i = 0; i < list.length; i++) {
                const k = list[i];
                if (key.test(k)) {
                    result[k] = this._data[k];
                }
            }
            return result;
        }
        else {
            return this._data[key];
        }
    }
    remove(key) {
        if (ls) {
            if (key instanceof RegExp) {
                const list = Object.keys(this._data);
                for (let i = 0; i < list.length; i++) {
                    const k = list[i];
                    if (key.test(k)) {
                        delete this._data[k];
                    }
                }
            }
            else {
                delete this._data[key];
            }
            this._persist();
            return true;
        }
        return false;
    }
    clear() {
        this._data = {};
        this._persist();
        this.trigger(OWebDataStore.EVT_DATA_STORE_CLEARED);
        return true;
    }
    onClear(cb) {
        return this.on(OWebDataStore.EVT_DATA_STORE_CLEARED, cb);
    }
    _persist() {
        if (ls) {
            try {
                ls.setItem(this._key, JSON.stringify(this._data));
                return true;
            }
            catch (e) {
                logger.error(e);
            }
        }
        return false;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYkRhdGFTdG9yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9PV2ViRGF0YVN0b3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sU0FBUyxNQUFNLGFBQWEsQ0FBQztBQUNwQyxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxNQUFNLFNBQVMsQ0FBQztBQWVyQyxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsWUFBWSxFQUM3QixLQUFLLEdBQUcsU0FBUyxLQUFLLENBQUMsSUFBbUI7SUFDekMsSUFBSSxLQUFVLENBQUM7SUFFZixJQUFJLElBQUksS0FBSyxJQUFJLEVBQUU7UUFDbEIsSUFBSTtZQUNILEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3pCO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDWCxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2hCO0tBQ0Q7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNkLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxPQUFPLE9BQU8sYUFBYyxTQUFRLFNBQVM7SUFDbkQsTUFBTSxDQUFVLHNCQUFzQixHQUFHLEVBQUUsRUFBRSxDQUFDO0lBQzdCLElBQUksQ0FBUztJQUN0QixLQUFLLEdBQWtDLEVBQUUsQ0FBQztJQUVsRCxZQUFZLFdBQW9CO1FBQy9CLEtBQUssRUFBRSxDQUFDO1FBQ1IsSUFBSSxDQUFDLElBQUksR0FBRyxXQUFXLENBQUMsVUFBVSxFQUFFLENBQUM7UUFDckMsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDakQsQ0FBQztJQVFELEdBQUcsQ0FBQyxHQUFXLEVBQUUsS0FBaUI7UUFDakMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7UUFFeEIsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRWhCLE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQztJQVVELEdBQUcsQ0FBQyxHQUFvQjtRQUN2QixJQUFJLEdBQUcsWUFBWSxNQUFNLEVBQUU7WUFDMUIsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQ25DLE1BQU0sR0FBUSxFQUFFLENBQUM7WUFFbEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3JDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDbEIsSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUNoQixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDMUI7YUFDRDtZQUVELE9BQU8sTUFBTSxDQUFDO1NBQ2Q7YUFBTTtZQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN2QjtJQUNGLENBQUM7SUFVRCxNQUFNLENBQUMsR0FBb0I7UUFDMUIsSUFBSSxFQUFFLEVBQUU7WUFDUCxJQUFJLEdBQUcsWUFBWSxNQUFNLEVBQUU7Z0JBQzFCLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUVyQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtvQkFDckMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNsQixJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7d0JBQ2hCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztxQkFDckI7aUJBQ0Q7YUFDRDtpQkFBTTtnQkFDTixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDdkI7WUFFRCxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFFaEIsT0FBTyxJQUFJLENBQUM7U0FDWjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQztJQUtELEtBQUs7UUFDSixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUVoQixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsc0JBQXNCLENBQUMsQ0FBQztRQUVuRCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFPRCxPQUFPLENBQUMsRUFBd0I7UUFDL0IsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxzQkFBc0IsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBT08sUUFBUTtRQUNmLElBQUksRUFBRSxFQUFFO1lBQ1AsSUFBSTtnQkFDSCxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDbEQsT0FBTyxJQUFJLENBQUM7YUFDWjtZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNYLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDaEI7U0FDRDtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBPV2ViQXBwIGZyb20gJy4vT1dlYkFwcCc7XG5pbXBvcnQgT1dlYkV2ZW50IGZyb20gJy4vT1dlYkV2ZW50JztcbmltcG9ydCB7IGlkLCBsb2dnZXIgfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IGludGVyZmFjZSBPSlNPTlNlcmlhbGl6YWJsZSB7XG5cdHRvSlNPTigpOiBPSlNPTlZhbHVlO1xufVxuXG5leHBvcnQgdHlwZSBPSlNPTlZhbHVlID1cblx0fCBzdHJpbmdcblx0fCBudW1iZXJcblx0fCBib29sZWFuXG5cdHwgRGF0ZVxuXHR8IE9KU09OU2VyaWFsaXphYmxlXG5cdHwgeyBba2V5OiBzdHJpbmddOiBPSlNPTlZhbHVlIH1cblx0fCBPSlNPTlZhbHVlW107XG5cbmNvbnN0IGxzID0gd2luZG93LmxvY2FsU3RvcmFnZSxcblx0cGFyc2UgPSBmdW5jdGlvbiBwYXJzZShkYXRhOiBzdHJpbmcgfCBudWxsKTogYW55IHtcblx0XHRsZXQgdmFsdWU6IGFueTtcblxuXHRcdGlmIChkYXRhICE9PSBudWxsKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHR2YWx1ZSA9IEpTT04ucGFyc2UoZGF0YSk7XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdGxvZ2dlci5lcnJvcihlKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9XZWJEYXRhU3RvcmUgZXh0ZW5kcyBPV2ViRXZlbnQge1xuXHRzdGF0aWMgcmVhZG9ubHkgRVZUX0RBVEFfU1RPUkVfQ0xFQVJFRCA9IGlkKCk7XG5cdHByaXZhdGUgcmVhZG9ubHkgX2tleTogc3RyaW5nO1xuXHRwcml2YXRlIF9kYXRhOiB7IFtrZXk6IHN0cmluZ106IE9KU09OVmFsdWUgfSA9IHt9O1xuXG5cdGNvbnN0cnVjdG9yKF9hcHBDb250ZXh0OiBPV2ViQXBwKSB7XG5cdFx0c3VwZXIoKTtcblx0XHR0aGlzLl9rZXkgPSBfYXBwQ29udGV4dC5nZXRBcHBOYW1lKCk7XG5cdFx0dGhpcy5fZGF0YSA9IHBhcnNlKGxzLmdldEl0ZW0odGhpcy5fa2V5KSkgfHwge307XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyBrZXkvdmFsdWUgcGFpciBpbiB0aGUgc3RvcmUuXG5cdCAqXG5cdCAqIEBwYXJhbSBrZXkgVGhlIGRhdGEga2V5IG5hbWUuXG5cdCAqIEBwYXJhbSB2YWx1ZSBUaGUgZGF0YSB2YWx1ZS5cblx0ICovXG5cdHNldChrZXk6IHN0cmluZywgdmFsdWU6IE9KU09OVmFsdWUpOiBib29sZWFuIHtcblx0XHR0aGlzLl9kYXRhW2tleV0gPSB2YWx1ZTtcblxuXHRcdHRoaXMuX3BlcnNpc3QoKTtcblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIGRhdGEgd2l0aCB0aGUgZ2l2ZW4ga2V5LlxuXHQgKlxuXHQgKiBXaGVuIHRoZSBrZXkgaXMgYSByZWdleHAgYWxsIGRhdGEgd2l0aCBhIGtleSBuYW1lIHRoYXQgbWF0Y2ggdGhlIGdpdmVuXG5cdCAqIHJlZ2V4cCB3aWxsIGJlIHJldHVybmVkIGluIGFuIG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIGtleSBUaGUgZGF0YSBrZXkgbmFtZS5cblx0ICovXG5cdGdldChrZXk6IHN0cmluZyB8IFJlZ0V4cCk6IGFueSB7XG5cdFx0aWYgKGtleSBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuXHRcdFx0Y29uc3QgbGlzdCA9IE9iamVjdC5rZXlzKHRoaXMuX2RhdGEpLFxuXHRcdFx0XHRyZXN1bHQ6IGFueSA9IHt9O1xuXG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0Y29uc3QgayA9IGxpc3RbaV07XG5cdFx0XHRcdGlmIChrZXkudGVzdChrKSkge1xuXHRcdFx0XHRcdHJlc3VsdFtrXSA9IHRoaXMuX2RhdGFba107XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHJlc3VsdDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmV0dXJuIHRoaXMuX2RhdGFba2V5XTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogUmVtb3ZlcyBkYXRhIHdpdGggdGhlIGdpdmVuIGtleS5cblx0ICpcblx0ICogV2hlbiB0aGUga2V5IGlzIGEgcmVnZXhwIGFsbCBkYXRhIHdpdGggYSBrZXkgbmFtZSB0aGF0IG1hdGNoIHRoZSBnaXZlblxuXHQgKiByZWdleHAgd2lsbCBiZSByZW1vdmVkLlxuXHQgKlxuXHQgKiBAcGFyYW0ga2V5XG5cdCAqL1xuXHRyZW1vdmUoa2V5OiBzdHJpbmcgfCBSZWdFeHApOiBib29sZWFuIHtcblx0XHRpZiAobHMpIHtcblx0XHRcdGlmIChrZXkgaW5zdGFuY2VvZiBSZWdFeHApIHtcblx0XHRcdFx0Y29uc3QgbGlzdCA9IE9iamVjdC5rZXlzKHRoaXMuX2RhdGEpO1xuXG5cdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdGNvbnN0IGsgPSBsaXN0W2ldO1xuXHRcdFx0XHRcdGlmIChrZXkudGVzdChrKSkge1xuXHRcdFx0XHRcdFx0ZGVsZXRlIHRoaXMuX2RhdGFba107XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgdGhpcy5fZGF0YVtrZXldO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLl9wZXJzaXN0KCk7XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDbGVhciB0aGUgZGF0YSBzdG9yZS5cblx0ICovXG5cdGNsZWFyKCk6IGJvb2xlYW4ge1xuXHRcdHRoaXMuX2RhdGEgPSB7fTtcblxuXHRcdHRoaXMuX3BlcnNpc3QoKTtcblxuXHRcdHRoaXMudHJpZ2dlcihPV2ViRGF0YVN0b3JlLkVWVF9EQVRBX1NUT1JFX0NMRUFSRUQpO1xuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHQvKipcblx0ICogUmVnaXN0ZXIgZGF0YSBzdG9yZSBjbGVhciBldmVudCBoYW5kbGVyLlxuXHQgKlxuXHQgKiBAcGFyYW0gY2Jcblx0ICovXG5cdG9uQ2xlYXIoY2I6ICh0aGlzOiB0aGlzKSA9PiB2b2lkKTogdGhpcyB7XG5cdFx0cmV0dXJuIHRoaXMub24oT1dlYkRhdGFTdG9yZS5FVlRfREFUQV9TVE9SRV9DTEVBUkVELCBjYik7XG5cdH1cblxuXHQvKipcblx0ICogSGVscGVyIHRvIG1ha2UgZGF0YSBzdG9yZSBwZXJzaXN0ZW50LlxuXHQgKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cHJpdmF0ZSBfcGVyc2lzdCgpOiBib29sZWFuIHtcblx0XHRpZiAobHMpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGxzLnNldEl0ZW0odGhpcy5fa2V5LCBKU09OLnN0cmluZ2lmeSh0aGlzLl9kYXRhKSk7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRsb2dnZXIuZXJyb3IoZSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG4iXX0=