import OWebEvent from "./OWebEvent";
import Utils from "./utils/Utils";
const ls = window.localStorage, parse = function (data) {
    let value = undefined;
    if (data !== null) {
        try {
            value = JSON.parse(data);
        }
        catch (e) {
            console.error(e);
        }
    }
    return value;
};
export default class OWebDataStore extends OWebEvent {
    constructor(_app_context) {
        super();
        this._app_context = _app_context;
        this.data = {};
        this.key = _app_context.getAppName();
        this.data = parse(ls.getItem(this.key)) || {};
    }
    save(keyName, data) {
        this.data[keyName] = data;
        this._persist();
        return false;
    }
    _persist() {
        if (ls) {
            try {
                ls.setItem(this.key, JSON.stringify(this.data));
                return true;
            }
            catch (e) {
                console.error(e);
            }
        }
        return false;
    }
    load(keyName) {
        if (arguments[0] instanceof RegExp) {
            let keyReg = arguments[0];
            let list = Object.keys(this.data);
            let result = {};
            for (let i = 0; i < list.length; i++) {
                let k = list[i];
                if (keyReg.test(k)) {
                    result[k] = this.data[k];
                }
            }
            return result;
        }
        else {
            return this.data[keyName];
        }
    }
    remove(keyName) {
        if (ls) {
            if (arguments[0] instanceof RegExp) {
                let list = Object.keys(this.data);
                let keyReg = arguments[0];
                for (let i = 0; i < list.length; i++) {
                    let k = list[i];
                    if (keyReg.test(k)) {
                        delete this.data[k];
                    }
                }
            }
            else {
                delete this.data[keyName];
            }
            this._persist();
            return true;
        }
        return false;
    }
    clear() {
        this.data = {};
        this._persist();
        this.trigger(OWebDataStore.EVT_DATA_STORE_CLEAR);
        return true;
    }
    onClear(cb) {
        return this.on(OWebDataStore.EVT_DATA_STORE_CLEAR, cb);
    }
}
OWebDataStore.EVT_DATA_STORE_CLEAR = Utils.id();
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYkRhdGFTdG9yZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9PV2ViRGF0YVN0b3JlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sU0FBUyxNQUFNLGFBQWEsQ0FBQztBQUNwQyxPQUFPLEtBQUssTUFBTSxlQUFlLENBQUM7QUFFbEMsTUFBTSxFQUFFLEdBQU0sTUFBTSxDQUFDLFlBQVksRUFDOUIsS0FBSyxHQUFHLFVBQVUsSUFBbUI7SUFDcEMsSUFBSSxLQUFLLEdBQVEsU0FBUyxDQUFDO0lBRTNCLElBQUksSUFBSSxLQUFLLElBQUksRUFBRTtRQUNsQixJQUFJO1lBQ0gsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDekI7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUNYLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDakI7S0FDRDtJQUVELE9BQU8sS0FBSyxDQUFDO0FBQ2QsQ0FBQyxDQUFDO0FBRUwsTUFBTSxDQUFDLE9BQU8sb0JBQXFCLFNBQVEsU0FBUztJQUtuRCxZQUE2QixZQUFxQjtRQUNqRCxLQUFLLEVBQUUsQ0FBQztRQURvQixpQkFBWSxHQUFaLFlBQVksQ0FBUztRQUYxQyxTQUFJLEdBQTJCLEVBQUUsQ0FBQztRQUl6QyxJQUFJLENBQUMsR0FBRyxHQUFJLFlBQVksQ0FBQyxVQUFVLEVBQUUsQ0FBQztRQUN0QyxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMvQyxDQUFDO0lBRUQsSUFBSSxDQUFDLE9BQWUsRUFBRSxJQUFTO1FBRTlCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBRTFCLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUVoQixPQUFPLEtBQUssQ0FBQztJQUNkLENBQUM7SUFFRCxRQUFRO1FBRVAsSUFBSSxFQUFFLEVBQUU7WUFDUCxJQUFJO2dCQUNILEVBQUUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO2dCQUNoRCxPQUFPLElBQUksQ0FBQzthQUNaO1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1gsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUNqQjtTQUNEO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDZCxDQUFDO0lBRUQsSUFBSSxDQUFDLE9BQWU7UUFDbkIsSUFBSSxTQUFTLENBQUMsQ0FBQyxDQUFDLFlBQVksTUFBTSxFQUFFO1lBQ25DLElBQUksTUFBTSxHQUFRLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMvQixJQUFJLElBQUksR0FBVSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN6QyxJQUFJLE1BQU0sR0FBUSxFQUFFLENBQUM7WUFFckIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3JDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDaEIsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO29CQUNuQixNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztpQkFDekI7YUFDRDtZQUVELE9BQU8sTUFBTSxDQUFDO1NBQ2Q7YUFBTTtZQUNOLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUMxQjtJQUNGLENBQUM7SUFFRCxNQUFNLENBQUMsT0FBZTtRQUNyQixJQUFJLEVBQUUsRUFBRTtZQUNQLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxZQUFZLE1BQU0sRUFBRTtnQkFDbkMsSUFBSSxJQUFJLEdBQUssTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3BDLElBQUksTUFBTSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFFMUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7b0JBQ3JDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDaEIsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO3dCQUNuQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7cUJBQ3BCO2lCQUNEO2FBQ0Q7aUJBQU07Z0JBQ04sT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQzFCO1lBRUQsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBRWhCLE9BQU8sSUFBSSxDQUFDO1NBQ1o7UUFFRCxPQUFPLEtBQUssQ0FBQztJQUNkLENBQUM7SUFFRCxLQUFLO1FBQ0osSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7UUFFZixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsb0JBQW9CLENBQUMsQ0FBQztRQUVqRCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFRCxPQUFPLENBQUMsRUFBYztRQUNyQixPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLG9CQUFvQixFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3hELENBQUM7O0FBeEZlLGtDQUFvQixHQUFHLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQztBQXlGbEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBPV2ViQXBwIGZyb20gXCIuL09XZWJBcHBcIjtcclxuaW1wb3J0IE9XZWJFdmVudCBmcm9tIFwiLi9PV2ViRXZlbnRcIjtcclxuaW1wb3J0IFV0aWxzIGZyb20gXCIuL3V0aWxzL1V0aWxzXCI7XHJcblxyXG5jb25zdCBscyAgICA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UsXHJcblx0ICBwYXJzZSA9IGZ1bmN0aW9uIChkYXRhOiBzdHJpbmcgfCBudWxsKTogYW55IHtcclxuXHRcdCAgbGV0IHZhbHVlOiBhbnkgPSB1bmRlZmluZWQ7XHJcblxyXG5cdFx0ICBpZiAoZGF0YSAhPT0gbnVsbCkge1xyXG5cdFx0XHQgIHRyeSB7XHJcblx0XHRcdFx0ICB2YWx1ZSA9IEpTT04ucGFyc2UoZGF0YSk7XHJcblx0XHRcdCAgfSBjYXRjaCAoZSkge1xyXG5cdFx0XHRcdCAgY29uc29sZS5lcnJvcihlKTtcclxuXHRcdFx0ICB9XHJcblx0XHQgIH1cclxuXHJcblx0XHQgIHJldHVybiB2YWx1ZTtcclxuXHQgIH07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPV2ViRGF0YVN0b3JlIGV4dGVuZHMgT1dlYkV2ZW50IHtcclxuXHRzdGF0aWMgcmVhZG9ubHkgRVZUX0RBVEFfU1RPUkVfQ0xFQVIgPSBVdGlscy5pZCgpO1xyXG5cdHByaXZhdGUgcmVhZG9ubHkga2V5OiBzdHJpbmc7XHJcblx0cHJpdmF0ZSBkYXRhOiBhbnkgICAgICAgICAgICAgICAgICAgID0ge307XHJcblxyXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgX2FwcF9jb250ZXh0OiBPV2ViQXBwKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0dGhpcy5rZXkgID0gX2FwcF9jb250ZXh0LmdldEFwcE5hbWUoKTtcclxuXHRcdHRoaXMuZGF0YSA9IHBhcnNlKGxzLmdldEl0ZW0odGhpcy5rZXkpKSB8fCB7fTtcclxuXHR9XHJcblxyXG5cdHNhdmUoa2V5TmFtZTogc3RyaW5nLCBkYXRhOiBhbnkpOiBib29sZWFuIHtcclxuXHJcblx0XHR0aGlzLmRhdGFba2V5TmFtZV0gPSBkYXRhO1xyXG5cclxuXHRcdHRoaXMuX3BlcnNpc3QoKTtcclxuXHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fVxyXG5cclxuXHRfcGVyc2lzdCgpOiBib29sZWFuIHtcclxuXHJcblx0XHRpZiAobHMpIHtcclxuXHRcdFx0dHJ5IHtcclxuXHRcdFx0XHRscy5zZXRJdGVtKHRoaXMua2V5LCBKU09OLnN0cmluZ2lmeSh0aGlzLmRhdGEpKTtcclxuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcclxuXHRcdFx0fSBjYXRjaCAoZSkge1xyXG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoZSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fVxyXG5cclxuXHRsb2FkKGtleU5hbWU6IHN0cmluZyk6IGFueSB7XHJcblx0XHRpZiAoYXJndW1lbnRzWzBdIGluc3RhbmNlb2YgUmVnRXhwKSB7XHJcblx0XHRcdGxldCBrZXlSZWcgICAgICA9IGFyZ3VtZW50c1swXTtcclxuXHRcdFx0bGV0IGxpc3QgICAgICAgID0gT2JqZWN0LmtleXModGhpcy5kYXRhKTtcclxuXHRcdFx0bGV0IHJlc3VsdDogYW55ID0ge307XHJcblxyXG5cdFx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcclxuXHRcdFx0XHRsZXQgayA9IGxpc3RbaV07XHJcblx0XHRcdFx0aWYgKGtleVJlZy50ZXN0KGspKSB7XHJcblx0XHRcdFx0XHRyZXN1bHRba10gPSB0aGlzLmRhdGFba107XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0cmV0dXJuIHRoaXMuZGF0YVtrZXlOYW1lXTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHJlbW92ZShrZXlOYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcclxuXHRcdGlmIChscykge1xyXG5cdFx0XHRpZiAoYXJndW1lbnRzWzBdIGluc3RhbmNlb2YgUmVnRXhwKSB7XHJcblx0XHRcdFx0bGV0IGxpc3QgICA9IE9iamVjdC5rZXlzKHRoaXMuZGF0YSk7XHJcblx0XHRcdFx0bGV0IGtleVJlZyA9IGFyZ3VtZW50c1swXTtcclxuXHJcblx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgaSsrKSB7XHJcblx0XHRcdFx0XHRsZXQgayA9IGxpc3RbaV07XHJcblx0XHRcdFx0XHRpZiAoa2V5UmVnLnRlc3QoaykpIHtcclxuXHRcdFx0XHRcdFx0ZGVsZXRlIHRoaXMuZGF0YVtrXTtcclxuXHRcdFx0XHRcdH1cclxuXHRcdFx0XHR9XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0ZGVsZXRlIHRoaXMuZGF0YVtrZXlOYW1lXTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0dGhpcy5fcGVyc2lzdCgpO1xyXG5cclxuXHRcdFx0cmV0dXJuIHRydWU7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIGZhbHNlO1xyXG5cdH1cclxuXHJcblx0Y2xlYXIoKTogYm9vbGVhbiB7XHJcblx0XHR0aGlzLmRhdGEgPSB7fTtcclxuXHJcblx0XHR0aGlzLl9wZXJzaXN0KCk7XHJcblxyXG5cdFx0dGhpcy50cmlnZ2VyKE9XZWJEYXRhU3RvcmUuRVZUX0RBVEFfU1RPUkVfQ0xFQVIpO1xyXG5cclxuXHRcdHJldHVybiB0cnVlO1xyXG5cdH1cclxuXHJcblx0b25DbGVhcihjYjogKCkgPT4gdm9pZCkge1xyXG5cdFx0cmV0dXJuIHRoaXMub24oT1dlYkRhdGFTdG9yZS5FVlRfREFUQV9TVE9SRV9DTEVBUiwgY2IpO1xyXG5cdH1cclxufTsiXX0=