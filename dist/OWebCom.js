import OWebEvent from './OWebEvent';
import OWebFS from './OWebFS';
import Utils from './utils/Utils';
const file_alias_errors = ['OZ_FILE_ALIAS_UNKNOWN', 'OZ_FILE_ALIAS_NOT_FOUND', 'OZ_FILE_ALIAS_PARSE_ERROR'];
let searchAndReplaceMarkedFile = function (data) {
    let form_data = new FormData(), has_marked_file = false, check = (value, name) => {
        let v = value;
        if (OWebFS.isMarkedFile(v)) {
            v = OWebFS.createFileAlias(v);
            has_marked_file = true;
        }
        form_data.append(name, v);
    };
    if (data) {
        if (data instanceof FormData) {
            data.forEach(check);
        }
        else if (Utils.isPlainObject(data)) {
            Object.keys(data).forEach(function (key_name) {
                check(data[key_name], key_name);
            });
        }
    }
    return has_marked_file ? form_data : false;
};
export default class OWebCom extends OWebEvent {
    constructor(app_context, options) {
        super();
        this.app_context = app_context;
        this._busy = false;
        if (options && !Utils.isPlainObject(options)) {
            throw new TypeError(`[OWebCom] require an 'object' as options not:  ${typeof options}.`);
        }
        this._options = Object.assign({ method: 'GET', dataType: 'json', data: {}, crossDomain: true, badNewsShow: false, 
            // increase request timeout for mobile device
            timeout: app_context.isMobileApp() ? 10000 : undefined }, options || {});
        this._original_data = options.data || {};
        this._modified_data = searchAndReplaceMarkedFile(options.data);
        if (this._modified_data) {
            this._options.data = this._modified_data;
        }
    }
    /**
     * Prepare the request before sending.
     *
     * @private
     */
    _prepare() {
        let m = this, real_method = m._options.method, replace_methods = ['PATCH', 'PUT', 'DELETE'], api_key_header = this.app_context.configs.get('OZ_API_KEY_HEADER_NAME'), real_method_header = this.app_context.configs.get('OZ_API_REAL_METHOD_HEADER_NAME');
        let headers = (this._options.headers = this._options.headers || {});
        headers[api_key_header] = this.app_context.configs.get('OZ_API_KEY');
        // we update request method
        if (~replace_methods.indexOf(real_method)) {
            headers[real_method_header] = real_method;
            this._options.method = 'POST';
        }
        if (this._options.data instanceof FormData) {
            this._options.processData = false;
            this._options.contentType = false;
        }
        // workaround because jqXHR does not expose upload property
        this._options.xhr = function () {
            let xhr = $.ajaxSetup({}).xhr();
            // allow CORS
            xhr.withCredentials = true;
            if (xhr.upload) {
                xhr.upload.addEventListener('progress', (e) => {
                    let percent = 0;
                    let position = e.loaded || e.position; // e.position
                    let total = e.total;
                    if (e.lengthComputable) {
                        percent = Math.floor(position / total * 100);
                    }
                    m.trigger(OWebCom.EVT_COM_UPLOAD_PROGRESS, [e, position, total, percent]);
                }, false);
            }
            return xhr;
        };
    }
    /**
     * Handle server response.
     *
     * > Called only when the connection to the server was successfully established.
     *
     * @param response The server response.
     * @private
     */
    _handleResponse(response) {
        let m = this;
        if (response.stime) {
            m.app_context.user.setSessionExpire(response.stime);
        }
        if (response.error === 0) {
            m.trigger(OWebCom.EVT_COM_REQUEST_SUCCESS, [response, m]);
            m.trigger(OWebCom.EVT_COM_FINISH, [response, m]);
        }
        else {
            if (response.msg === 'OZ_ERROR_YOU_MUST_LOGIN') {
                m.trigger(OWebCom.EVT_COM_REQUEST_ERROR, [response, m]);
                m.app_context.forceLogin();
            }
            else if (~file_alias_errors.indexOf(response.msg)) {
                // our attempt to minimize file upload failed
                console.warn('[OWebCom] unable to minimize file upload data ->', response, m._options.data);
                this._modified_data = false;
                this._options.data = this._original_data;
                m._busy = false;
                m.send();
            }
            else {
                if (m._options.badNewsShow) {
                    m.app_context.view.dialog({
                        type: 'error',
                        text: response.msg,
                        data: response.data
                    });
                }
                m.trigger(OWebCom.EVT_COM_REQUEST_ERROR, [response, m]);
                m.trigger(OWebCom.EVT_COM_FINISH, [response, m]);
            }
        }
    }
    /**
     * Send request.
     */
    send() {
        let m = this;
        this._prepare();
        if (this._busy) {
            console.warn('[OWebCom] instance is busy ->', m);
            return;
        }
        if (this._options) {
            this._busy = true;
            this._request = $.ajax(m._options)
                .done((response) => {
                m._handleResponse(response);
            })
                .fail((request) => {
                let network_error = !Utils.isPlainObject(request['responseJSON']);
                if (network_error) {
                    console.error('[OWebCom] request network error ->', request);
                    m.trigger(OWebCom.EVT_COM_NETWORK_ERROR, [request, m]);
                }
                else {
                    console.error('[OWebCom] request server error ->', request);
                    m._handleResponse(request['responseJSON']);
                }
            });
        }
    }
    /**
     * Try to abort the current request.
     */
    abort() {
        this._busy = false;
        if (this._request) {
            this._request.abort();
        }
    }
}
OWebCom.SELF = Utils.id();
OWebCom.EVT_COM_REQUEST_SUCCESS = Utils.id();
OWebCom.EVT_COM_REQUEST_ERROR = Utils.id();
OWebCom.EVT_COM_NETWORK_ERROR = Utils.id();
OWebCom.EVT_COM_UPLOAD_PROGRESS = Utils.id();
OWebCom.EVT_COM_FINISH = Utils.id();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYkNvbS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9PV2ViQ29tLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sU0FBUyxNQUFNLGFBQWEsQ0FBQztBQUNwQyxPQUFPLE1BQU0sTUFBTSxVQUFVLENBQUM7QUFDOUIsT0FBTyxLQUFLLE1BQU0sZUFBZSxDQUFDO0FBeUJsQyxNQUFNLGlCQUFpQixHQUFHLENBQUUsdUJBQXVCLEVBQUUseUJBQXlCLEVBQUUsMkJBQTJCLENBQUUsQ0FBQztBQUU5RyxJQUFJLDBCQUEwQixHQUFHLFVBQVMsSUFBd0M7SUFDakYsSUFBSSxTQUFTLEdBQUcsSUFBSSxRQUFRLEVBQUUsRUFDN0IsZUFBZSxHQUFHLEtBQUssRUFDdkIsS0FBSyxHQUFHLENBQUMsS0FBVSxFQUFFLElBQVksRUFBRSxFQUFFO1FBQ3BDLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQztRQUVkLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFBRTtZQUMzQixDQUFDLEdBQUcsTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUM5QixlQUFlLEdBQUcsSUFBSSxDQUFDO1NBQ3ZCO1FBRUQsU0FBUyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDM0IsQ0FBQyxDQUFDO0lBRUgsSUFBSSxJQUFJLEVBQUU7UUFDVCxJQUFJLElBQUksWUFBWSxRQUFRLEVBQUU7WUFDNUIsSUFBWSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM3QjthQUFNLElBQUksS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNyQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFTLFFBQVE7Z0JBQzFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7WUFDakMsQ0FBQyxD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SSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2xCLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDdEI7SUFDRixDQUFDOztBQWhMZSxZQUFJLEdBQUcsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDO0FBQ2xCLCtCQUF1QixHQUFHLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQztBQUNyQyw2QkFBcUIsR0FBRyxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUM7QUFDbkMsNkJBQXFCLEdBQUcsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDO0FBQ25DLCtCQUF1QixHQUFHLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQztBQUNyQyxzQkFBYyxHQUFHLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBPV2ViQXBwIGZyb20gJy4vT1dlYkFwcCc7XG5pbXBvcnQgT1dlYkV2ZW50IGZyb20gJy4vT1dlYkV2ZW50JztcbmltcG9ydCBPV2ViRlMgZnJvbSAnLi9PV2ViRlMnO1xuaW1wb3J0IFV0aWxzIGZyb20gJy4vdXRpbHMvVXRpbHMnO1xuaW1wb3J0IGpxWEhSID0gSlF1ZXJ5LmpxWEhSO1xuXG5leHBvcnQgaW50ZXJmYWNlIGlDb21SZXNwb25zZSB7XG5cdGVycm9yOiBudW1iZXI7XG5cdG1zZzogc3RyaW5nO1xuXHRkYXRhPzogYW55O1xuXHR1dGltZTogbnVtYmVyO1xuXHRzdGltZT86IG51bWJlcjtcblx0bmV0ZXJyb3I/OiBib29sZWFuO1xufVxuXG5leHBvcnQgdHlwZSB0Q29tT3B0aW9ucyA9IHtcblx0dXJsOiBzdHJpbmc7XG5cdG1ldGhvZDogc3RyaW5nO1xuXHR4aHI/OiBhbnk7XG5cdGhlYWRlcnM/OiB7fTtcblx0ZGF0YT86IHt9O1xuXHRkYXRhVHlwZT86IHN0cmluZztcblx0Y3Jvc3NEb21haW4/OiBib29sZWFuO1xuXHRwcm9jZXNzRGF0YT86IGJvb2xlYW47XG5cdGNvbnRlbnRUeXBlPzogYW55O1xuXHRiYWROZXdzU2hvdz86IGJvb2xlYW47XG5cdHRpbWVvdXQ/OiBudW1iZXI7XG59O1xuY29uc3QgZmlsZV9hbGlhc19lcnJvcnMgPSBbICdPWl9GSUxFX0FMSUFTX1VOS05PV04nLCAnT1pfRklMRV9BTElBU19OT1RfRk9VTkQnLCAnT1pfRklMRV9BTElBU19QQVJTRV9FUlJPUicgXTtcblxubGV0IHNlYXJjaEFuZFJlcGxhY2VNYXJrZWRGaWxlID0gZnVuY3Rpb24oZGF0YT86IHsgW2tleTogc3RyaW5nXTogYW55IH0gfCBGb3JtRGF0YSkge1xuXHRsZXQgZm9ybV9kYXRhID0gbmV3IEZvcm1EYXRhKCksXG5cdFx0aGFzX21hcmtlZF9maWxlID0gZmFsc2UsXG5cdFx0Y2hlY2sgPSAodmFsdWU6IGFueSwgbmFtZTogc3RyaW5nKSA9PiB7XG5cdFx0XHRsZXQgdiA9IHZhbHVlO1xuXG5cdFx0XHRpZiAoT1dlYkZTLmlzTWFya2VkRmlsZSh2KSkge1xuXHRcdFx0XHR2ID0gT1dlYkZTLmNyZWF0ZUZpbGVBbGlhcyh2KTtcblx0XHRcdFx0aGFzX21hcmtlZF9maWxlID0gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0Zm9ybV9kYXRhLmFwcGVuZChuYW1lLCB2KTtcblx0XHR9O1xuXG5cdGlmIChkYXRhKSB7XG5cdFx0aWYgKGRhdGEgaW5zdGFuY2VvZiBGb3JtRGF0YSkge1xuXHRcdFx0KGRhdGEgYXMgYW55KS5mb3JFYWNoKGNoZWNrKTtcblx0XHR9IGVsc2UgaWYgKFV0aWxzLmlzUGxhaW5PYmplY3QoZGF0YSkpIHtcblx0XHRcdE9iamVjdC5rZXlzKGRhdGEpLmZvckVhY2goZnVuY3Rpb24oa2V5X25hbWUpIHtcblx0XHRcdFx0Y2hlY2soZGF0YVtrZXlfbmFtZV0sIGtleV9uYW1lKTtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBoYXNfbWFya2VkX2ZpbGUgPyBmb3JtX2RhdGEgOiBmYWxzZTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9XZWJDb20gZXh0ZW5kcyBPV2ViRXZlbnQge1xuXHRzdGF0aWMgcmVhZG9ubHkgU0VMRiA9IFV0aWxzLmlkKCk7XG5cdHN0YXRpYyByZWFkb25seSBFVlRfQ09NX1JFUVVFU1RfU1VDQ0VTUyA9IFV0aWxzLmlkKCk7XG5cdHN0YXRpYyByZWFkb25seSBFVlRfQ09NX1JFUVVFU1RfRVJST1IgPSBVdGlscy5pZCgpO1xuXHRzdGF0aWMgcmVhZG9ubHkgRVZUX0NPTV9ORVRXT1JLX0VSUk9SID0gVXRpbHMuaWQoKTtcblx0c3RhdGljIHJlYWRvbmx5IEVWVF9DT01fVVBMT0FEX1BST0dSRVNTID0gVXRpbHMuaWQoKTtcblx0c3RhdGljIHJlYWRvbmx5IEVWVF9DT01fRklOSVNIID0gVXRpbHMuaWQoKTtcblxuXHRwcml2YXRlIHJlYWRvbmx5IF9vcHRpb25zOiB0Q29tT3B0aW9ucztcblx0cHJpdmF0ZSByZWFkb25seSBfb3JpZ2luYWxfZGF0YTogYW55O1xuXHRwcml2YXRlIF9tb2RpZmllZF9kYXRhOiBGb3JtRGF0YSB8IGJvb2xlYW47XG5cdHByaXZhdGUgX2J1c3k6IGJvb2xlYW4gPSBmYWxzZTtcblx0cHJpdmF0ZSBfcmVxdWVzdD86IGpxWEhSO1xuXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgYXBwX2NvbnRleHQ6IE9XZWJBcHAsIG9wdGlvbnM6IHRDb21PcHRpb25zKSB7XG5cdFx0c3VwZXIoKTtcblxuXHRcdGlmIChvcHRpb25zICYmICFVdGlscy5pc1BsYWluT2JqZWN0KG9wdGlvbnMpKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKGBbT1dlYkNvbV0gcmVxdWlyZSBhbiAnb2JqZWN0JyBhcyBvcHRpb25zIG5vdDogICR7dHlwZW9mIG9wdGlvbnN9LmApO1xuXHRcdH1cblxuXHRcdHRoaXMuX29wdGlvbnMgPSB7XG5cdFx0XHRtZXRob2Q6ICdHRVQnLFxuXHRcdFx0ZGF0YVR5cGU6ICdqc29uJyxcblx0XHRcdGRhdGE6IHt9LFxuXHRcdFx0Y3Jvc3NEb21haW46IHRydWUsXG5cdFx0XHRiYWROZXdzU2hvdzogZmFsc2UsXG5cdFx0XHQvLyBpbmNyZWFzZSByZXF1ZXN0IHRpbWVvdXQgZm9yIG1vYmlsZSBkZXZpY2Vcblx0XHRcdHRpbWVvdXQ6IGFwcF9jb250ZXh0LmlzTW9iaWxlQXBwKCkgPyAxMDAwMCA6IHVuZGVmaW5lZCxcblx0XHRcdC4uLm9wdGlvbnMgfHwge31cblx0XHR9O1xuXHRcdHRoaXMuX29yaWdpbmFsX2RhdGEgPSBvcHRpb25zLmRhdGEgfHwge307XG5cdFx0dGhpcy5fbW9kaWZpZWRfZGF0YSA9IHNlYXJjaEFuZFJlcGxhY2VNYXJrZWRGaWxlKG9wdGlvbnMuZGF0YSk7XG5cblx0XHRpZiAodGhpcy5fbW9kaWZpZWRfZGF0YSkge1xuXHRcdFx0dGhpcy5fb3B0aW9ucy5kYXRhID0gdGhpcy5fbW9kaWZpZWRfZGF0YTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogUHJlcGFyZSB0aGUgcmVxdWVzdCBiZWZvcmUgc2VuZGluZy5cblx0ICpcblx0ICogQHByaXZhdGVcblx0ICovXG5cdHByaXZhdGUgX3ByZXBhcmUoKSB7XG5cdFx0bGV0IG0gPSB0aGlzLFxuXHRcdFx0cmVhbF9tZXRob2QgPSBtLl9vcHRpb25zLm1ldGhvZCxcblx0XHRcdHJlcGxhY2VfbWV0aG9kcyA9IFsgJ1BBVENIJywgJ1BVVCcsICdERUxFVEUnIF0sXG5cdFx0XHRhcGlfa2V5X2hlYWRlciA9IHRoaXMuYXBwX2NvbnRleHQuY29uZmlncy5nZXQoJ09aX0FQSV9LRVlfSEVBREVSX05BTUUnKSxcblx0XHRcdHJlYWxfbWV0aG9kX2hlYWRlciA9IHRoaXMuYXBwX2NvbnRleHQuY29uZmlncy5nZXQoJ09aX0FQSV9SRUFMX01FVEhPRF9IRUFERVJfTkFNRScpO1xuXG5cdFx0bGV0IGhlYWRlcnM6IGFueSA9ICh0aGlzLl9vcHRpb25zLmhlYWRlcnMgPSB0aGlzLl9vcHRpb25zLmhlYWRlcnMgfHwge30pO1xuXHRcdGhlYWRlcnNbYXBpX2tleV9oZWFkZXJdID0gdGhpcy5hcHBfY29udGV4dC5jb25maWdzLmdldCgnT1pfQVBJX0tFWScpO1xuXG5cdFx0Ly8gd2UgdXBkYXRlIHJlcXVlc3QgbWV0aG9kXG5cdFx0aWYgKH5yZXBsYWNlX21ldGhvZHMuaW5kZXhPZihyZWFsX21ldGhvZCkpIHtcblx0XHRcdGhlYWRlcnNbcmVhbF9tZXRob2RfaGVhZGVyXSA9IHJlYWxfbWV0aG9kO1xuXHRcdFx0dGhpcy5fb3B0aW9ucy5tZXRob2QgPSAnUE9TVCc7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuX29wdGlvbnMuZGF0YSBpbnN0YW5jZW9mIEZvcm1EYXRhKSB7XG5cdFx0XHR0aGlzLl9vcHRpb25zLnByb2Nlc3NEYXRhID0gZmFsc2U7XG5cdFx0XHR0aGlzLl9vcHRpb25zLmNvbnRlbnRUeXBlID0gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gd29ya2Fyb3VuZCBiZWNhdXNlIGpxWEhSIGRvZXMgbm90IGV4cG9zZSB1cGxvYWQgcHJvcGVydHlcblx0XHR0aGlzLl9vcHRpb25zLnhociA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0bGV0IHhociA9ICQuYWpheFNldHVwKHt9KS54aHIhKCk7XG5cblx0XHRcdC8vIGFsbG93IENPUlNcblx0XHRcdHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuXG5cdFx0XHRpZiAoeGhyLnVwbG9hZCkge1xuXHRcdFx0XHR4aHIudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoXG5cdFx0XHRcdFx0J3Byb2dyZXNzJyxcblx0XHRcdFx0XHQoZTogYW55KSA9PiB7XG5cdFx0XHRcdFx0XHRsZXQgcGVyY2VudCA9IDA7XG5cdFx0XHRcdFx0XHRsZXQgcG9zaXRpb24gPSBlLmxvYWRlZCB8fCBlLnBvc2l0aW9uOyAvLyBlLnBvc2l0aW9uXG5cdFx0XHRcdFx0XHRsZXQgdG90YWwgPSBlLnRvdGFsO1xuXG5cdFx0XHRcdFx0XHRpZiAoZS5sZW5ndGhDb21wdXRhYmxlKSB7XG5cdFx0XHRcdFx0XHRcdHBlcmNlbnQgPSBNYXRoLmZsb29yKHBvc2l0aW9uIC8gdG90YWwgKiAxMDApO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRtLnRyaWdnZXIoT1dlYkNvbS5FVlRfQ09NX1VQTE9BRF9QUk9HUkVTUywgWyBlLCBwb3NpdGlvbiwgdG90YWwsIHBlcmNlbnQgXSk7XG5cdFx0XHRcdFx0fSxcblx0XHRcdFx0XHRmYWxzZVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geGhyO1xuXHRcdH07XG5cdH1cblxuXHQvKipcblx0ICogSGFuZGxlIHNlcnZlciByZXNwb25zZS5cblx0ICpcblx0ICogPiBDYWxsZWQgb25seSB3aGVuIHRoZSBjb25uZWN0aW9uIHRvIHRoZSBzZXJ2ZXIgd2FzIHN1Y2Nlc3NmdWxseSBlc3RhYmxpc2hlZC5cblx0ICpcblx0ICogQHBhcmFtIHJlc3BvbnNlIFRoZSBzZXJ2ZXIgcmVzcG9uc2UuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRwcml2YXRlIF9oYW5kbGVSZXNwb25zZShyZXNwb25zZTogaUNvbVJlc3BvbnNlKSB7XG5cdFx0bGV0IG0gPSB0aGlzO1xuXG5cdFx0aWYgKHJlc3BvbnNlLnN0aW1lKSB7XG5cdFx0XHRtLmFwcF9jb250ZXh0LnVzZXIuc2V0U2Vzc2lvbkV4cGlyZShyZXNwb25zZS5zdGltZSk7XG5cdFx0fVxuXG5cdFx0aWYgKHJlc3BvbnNlLmVycm9yID09PSAwKSB7XG5cdFx0XHRtLnRyaWdnZXIoT1dlYkNvbS5FVlRfQ09NX1JFUVVFU1RfU1VDQ0VTUywgWyByZXNwb25zZSwgbSBdKTtcblx0XHRcdG0udHJpZ2dlcihPV2ViQ29tLkVWVF9DT01fRklOSVNILCBbIHJlc3BvbnNlLCBtIF0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpZiAocmVzcG9uc2UubXNnID09PSAnT1pfRVJST1JfWU9VX01VU1RfTE9HSU4nKSB7XG5cdFx0XHRcdG0udHJpZ2dlcihPV2ViQ29tLkVWVF9DT01fUkVRVUVTVF9FUlJPUiwgWyByZXNwb25zZSwgbSBdKTtcblx0XHRcdFx0bS5hcHBfY29udGV4dC5mb3JjZUxvZ2luKCk7XG5cdFx0XHR9IGVsc2UgaWYgKH5maWxlX2FsaWFzX2Vycm9ycy5pbmRleE9mKHJlc3BvbnNlLm1zZykpIHtcblx0XHRcdFx0Ly8gb3VyIGF0dGVtcHQgdG8gbWluaW1pemUgZmlsZSB1cGxvYWQgZmFpbGVkXG5cdFx0XHRcdGNvbnNvbGUud2FybignW09XZWJDb21dIHVuYWJsZSB0byBtaW5pbWl6ZSBmaWxlIHVwbG9hZCBkYXRhIC0+JywgcmVzcG9uc2UsIG0uX29wdGlvbnMuZGF0YSk7XG5cdFx0XHRcdHRoaXMuX21vZGlmaWVkX2RhdGEgPSBmYWxzZTtcblx0XHRcdFx0dGhpcy5fb3B0aW9ucy5kYXRhID0gdGhpcy5fb3JpZ2luYWxfZGF0YTtcblx0XHRcdFx0bS5fYnVzeSA9IGZhbHNlO1xuXHRcdFx0XHRtLnNlbmQoKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmIChtLl9vcHRpb25zLmJhZE5ld3NTaG93KSB7XG5cdFx0XHRcdFx0bS5hcHBfY29udGV4dC52aWV3LmRpYWxvZyh7XG5cdFx0XHRcdFx0XHR0eXBlOiAnZXJyb3InLFxuXHRcdFx0XHRcdFx0dGV4dDogcmVzcG9uc2UubXNnLFxuXHRcdFx0XHRcdFx0ZGF0YTogcmVzcG9uc2UuZGF0YVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0bS50cmlnZ2VyKE9XZWJDb20uRVZUX0NPTV9SRVFVRVNUX0VSUk9SLCBbIHJlc3BvbnNlLCBtIF0pO1xuXHRcdFx0XHRtLnRyaWdnZXIoT1dlYkNvbS5FVlRfQ09NX0ZJTklTSCwgWyByZXNwb25zZSwgbSBdKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogU2VuZCByZXF1ZXN0LlxuXHQgKi9cblx0c2VuZCgpIHtcblx0XHRsZXQgbSA9IHRoaXM7XG5cdFx0dGhpcy5fcHJlcGFyZSgpO1xuXG5cdFx0aWYgKHRoaXMuX2J1c3kpIHtcblx0XHRcdGNvbnNvbGUud2FybignW09XZWJDb21dIGluc3RhbmNlIGlzIGJ1c3kgLT4nLCBtKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5fb3B0aW9ucykge1xuXHRcdFx0dGhpcy5fYnVzeSA9IHRydWU7XG5cdFx0XHR0aGlzLl9yZXF1ZXN0ID0gJC5hamF4KG0uX29wdGlvbnMpXG5cdFx0XHRcdC5kb25lKChyZXNwb25zZTogYW55KSA9PiB7XG5cdFx0XHRcdFx0bS5faGFuZGxlUmVzcG9uc2UocmVzcG9uc2UpO1xuXHRcdFx0XHR9KVxuXHRcdFx0XHQuZmFpbCgocmVxdWVzdDogYW55KSA9PiB7XG5cdFx0XHRcdFx0bGV0IG5ldHdvcmtfZXJyb3IgPSAhVXRpbHMuaXNQbGFpbk9iamVjdChyZXF1ZXN0WydyZXNwb25zZUpTT04nXSk7XG5cdFx0XHRcdFx0aWYgKG5ldHdvcmtfZXJyb3IpIHtcblx0XHRcdFx0XHRcdGNvbnNvbGUuZXJyb3IoJ1tPV2ViQ29tXSByZXF1ZXN0IG5ldHdvcmsgZXJyb3IgLT4nLCByZXF1ZXN0KTtcblx0XHRcdFx0XHRcdG0udHJpZ2dlcihPV2ViQ29tLkVWVF9DT01fTkVUV09SS19FUlJPUiwgWyByZXF1ZXN0LCBtIF0pO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCdbT1dlYkNvbV0gcmVxdWVzdCBzZXJ2ZXIgZXJyb3IgLT4nLCByZXF1ZXN0KTtcblx0XHRcdFx0XHRcdG0uX2hhbmRsZVJlc3BvbnNlKHJlcXVlc3RbJ3Jlc3BvbnNlSlNPTiddKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBUcnkgdG8gYWJvcnQgdGhlIGN1cnJlbnQgcmVxdWVzdC5cblx0ICovXG5cdGFib3J0KCkge1xuXHRcdHRoaXMuX2J1c3kgPSBmYWxzZTtcblx0XHRpZiAodGhpcy5fcmVxdWVzdCkge1xuXHRcdFx0dGhpcy5fcmVxdWVzdC5hYm9ydCgpO1xuXHRcdH1cblx0fVxufVxuIl19