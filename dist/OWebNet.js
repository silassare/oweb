import OWebEvent from './OWebEvent';
import { id } from './utils';
const eventHandlerMessage = '[OWebNet] Register event handler before calling send.';
export default class OWebNet extends OWebEvent {
    url;
    options;
    static SELF = id();
    static EVT_ERROR = id();
    static EVT_RESPONSE = id();
    static EVT_HTTP_SUCCESS = id();
    static EVT_HTTP_ERROR = id();
    static EVT_FINISH = id();
    static EVT_GOOD_NEWS = id();
    static EVT_BAD_NEWS = id();
    static EVT_FAIL = id();
    static EVT_UPLOAD_PROGRESS = id();
    static EVT_DOWNLOAD_PROGRESS = id();
    constructor(url, options) {
        super();
        this.url = url;
        this.options = options;
    }
    assertNotSent(message) {
        if (this.isSent()) {
            throw Error(message);
        }
    }
    onResponse(handler) {
        this.assertNotSent(eventHandlerMessage);
        return this.on(OWebNet.EVT_RESPONSE, handler);
    }
    onHttpSuccess(handler) {
        this.assertNotSent(eventHandlerMessage);
        return this.on(OWebNet.EVT_HTTP_SUCCESS, handler);
    }
    onFinish(handler) {
        this.assertNotSent(eventHandlerMessage);
        return this.on(OWebNet.EVT_FINISH, handler);
    }
    onGoodNews(handler) {
        this.assertNotSent(eventHandlerMessage);
        return this.on(OWebNet.EVT_GOOD_NEWS, handler);
    }
    onBadNews(handler) {
        this.assertNotSent(eventHandlerMessage);
        return this.on(OWebNet.EVT_BAD_NEWS, handler);
    }
    onError(handler) {
        this.assertNotSent(eventHandlerMessage);
        return this.on(OWebNet.EVT_ERROR, handler);
    }
    onHttpError(handler) {
        this.assertNotSent(eventHandlerMessage);
        return this.on(OWebNet.EVT_HTTP_ERROR, handler);
    }
    onFail(handler) {
        this.assertNotSent(eventHandlerMessage);
        return this.on(OWebNet.EVT_FAIL, handler);
    }
    onUploadProgress(handler) {
        this.assertNotSent(eventHandlerMessage);
        return this.on(OWebNet.EVT_UPLOAD_PROGRESS, handler);
    }
    onDownloadProgress(handler) {
        this.assertNotSent(eventHandlerMessage);
        return this.on(OWebNet.EVT_DOWNLOAD_PROGRESS, handler);
    }
}
//# sourceMappingURL=data:application/json;base64,