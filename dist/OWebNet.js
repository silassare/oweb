import OWebEvent from './OWebEvent';
import { id } from './utils';
const eventHandlerMessage = '[OWebNet] Register event handler before calling send.';
export default class OWebNet extends OWebEvent {
    url;
    options;
    static SELF = id();
    static EVT_ERROR = id(); // on error: abort, timeout, network
    static EVT_RESPONSE = id(); // request sent and the server responded.
    static EVT_HTTP_SUCCESS = id(); // request sent and http response status code is in success range
    static EVT_HTTP_ERROR = id(); // request sent and http response status code is not in success range
    static EVT_FINISH = id(); // request finished
    static EVT_GOOD_NEWS = id(); // the response is a good news [depends on provided options]
    static EVT_BAD_NEWS = id(); // the response is a bad news [depends on provided options]
    static EVT_FAIL = id(); // the request failed: there is a general error, an http status error or a bad news
    static EVT_UPLOAD_PROGRESS = id(); // on upload progress
    static EVT_DOWNLOAD_PROGRESS = id(); // on download progress
    /**
     * OWebNet constructor.
     *
     * @param url
     * @param options
     * @protected
     */
    constructor(url, options) {
        super();
        this.url = url;
        this.options = options;
    }
    /**
     * Assertion that throws error when request is already sent.
     *
     * @param message
     * @private
     */
    assertNotSent(message) {
        if (this.isSent()) {
            throw Error(message);
        }
    }
    /**
     * Called when request sent and the server responded.
     *
     * @param handler
     */
    onResponse(handler) {
        this.assertNotSent(eventHandlerMessage);
        return this.on(OWebNet.EVT_RESPONSE, handler);
    }
    /**
     * Called when request sent and http response status code is in success range.
     *
     * @param handler
     */
    onHttpSuccess(handler) {
        this.assertNotSent(eventHandlerMessage);
        return this.on(OWebNet.EVT_HTTP_SUCCESS, handler);
    }
    /**
     * Always called when the request finished.
     *
     * @param handler
     */
    onFinish(handler) {
        this.assertNotSent(eventHandlerMessage);
        return this.on(OWebNet.EVT_FINISH, handler);
    }
    /**
     * Called when `options.responseType` is `json` and `options.isGoodNews` returns `true`.
     *
     * @param handler
     */
    onGoodNews(handler) {
        this.assertNotSent(eventHandlerMessage);
        return this.on(OWebNet.EVT_GOOD_NEWS, handler);
    }
    /**
     * Called when `options.responseType` is `json` and `options.isGoodNews` returns `false`.
     *
     * @param handler
     */
    onBadNews(handler) {
        this.assertNotSent(eventHandlerMessage);
        return this.on(OWebNet.EVT_BAD_NEWS, handler);
    }
    /**
     * Called on error: abort, timeout, network
     *
     * @param handler
     */
    onError(handler) {
        this.assertNotSent(eventHandlerMessage);
        return this.on(OWebNet.EVT_ERROR, handler);
    }
    /**
     * Called when request sent and http response status code is in error range.
     *
     * @param handler
     */
    onHttpError(handler) {
        this.assertNotSent(eventHandlerMessage);
        return this.on(OWebNet.EVT_HTTP_ERROR, handler);
    }
    /**
     * Called when there is a general error, an http status error or a bad news.
     *
     * @param handler
     */
    onFail(handler) {
        this.assertNotSent(eventHandlerMessage);
        return this.on(OWebNet.EVT_FAIL, handler);
    }
    /**
     * Listen to download progress event.
     *
     * NOTE: this is not supported by all browser.
     *
     * @param handler
     */
    onUploadProgress(handler) {
        this.assertNotSent(eventHandlerMessage);
        return this.on(OWebNet.EVT_UPLOAD_PROGRESS, handler);
    }
    /**
     * Listen to download progress event.
     *
     * @param handler
     */
    onDownloadProgress(handler) {
        this.assertNotSent(eventHandlerMessage);
        return this.on(OWebNet.EVT_DOWNLOAD_PROGRESS, handler);
    }
}
//# sourceMappingURL=data:application/json;base64,