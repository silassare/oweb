import OWebEvent from './OWebEvent';
import { id } from './utils/Utils';
export default class OWebView extends OWebEvent {
    constructor() {
        super();
        this._freezeCounter = 0;
        console.log('[OWebView] ready!');
    }
    /**
     * Checks if the view is frozen.
     */
    isFrozen() {
        return Boolean(this._freezeCounter);
    }
    /**
     * To freeze the view.
     */
    freeze() {
        ++this._freezeCounter;
        if (this._freezeCounter === 1) {
            this.trigger(OWebView.EVT_VIEW_FREEZE);
        }
        return this;
    }
    /**
     * Unfreeze the view.
     */
    unfreeze() {
        if (this.isFrozen()) {
            --this._freezeCounter;
            if (!this.isFrozen()) {
                this.trigger(OWebView.EVT_VIEW_UNFREEZE);
            }
        }
        return this;
    }
    /**
     * Trigger dialog event to the view.
     * @param dialog
     * @param canUseAlert
     */
    dialog(dialog, canUseAlert = false) {
        let d = dialog;
        if (d.error) {
            d = {
                type: d.error ? 'error' : 'done',
                text: d.msg,
                data: d.data || {},
            };
        }
        this.trigger(OWebView.EVT_VIEW_DIALOG, [d, canUseAlert]);
    }
    /**
     * Register freeze event handler.
     *
     * @param handler
     */
    onFreeze(handler) {
        return this.on(OWebView.EVT_VIEW_FREEZE, handler);
    }
    /**
     * Register unfreeze event handler.
     *
     * @param handler
     */
    onUnFreeze(handler) {
        return this.on(OWebView.EVT_VIEW_UNFREEZE, handler);
    }
    /**
     * Register dialog event handler.
     *
     * @param handler
     */
    onDialog(handler) {
        return this.on(OWebView.EVT_VIEW_DIALOG, handler);
    }
}
OWebView.SELF = id();
OWebView.EVT_VIEW_FREEZE = id();
OWebView.EVT_VIEW_UNFREEZE = id();
OWebView.EVT_VIEW_DIALOG = id();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYlZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvT1dlYlZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxTQUFTLE1BQU0sYUFBYSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFRbkMsTUFBTSxDQUFDLE9BQU8sT0FBTyxRQUFTLFNBQVEsU0FBUztJQVE5QztRQUNDLEtBQUssRUFBRSxDQUFDO1FBSEQsbUJBQWMsR0FBVyxDQUFDLENBQUM7UUFJbEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRDs7T0FFRztJQUNILFFBQVE7UUFDUCxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsTUFBTTtRQUNMLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQztRQUV0QixJQUFJLElBQUksQ0FBQyxjQUFjLEtBQUssQ0FBQyxFQUFFO1lBQzlCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQ3ZDO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBRUQ7O09BRUc7SUFDSCxRQUFRO1FBQ1AsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDcEIsRUFBRSxJQUFJLENBQUMsY0FBYyxDQUFDO1lBRXRCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUU7Z0JBQ3JCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLENBQUM7YUFDekM7U0FDRDtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxNQUFNLENBQUMsTUFBa0MsRUFBRSxjQUF1QixLQUFLO1FBQ3RFLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUVmLElBQUssQ0FBa0IsQ0FBQyxLQUFLLEVBQUU7WUFDOUIsQ0FBQyxHQUFHO2dCQUNILElBQUksRUFBRyxDQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNO2dCQUNsRCxJQUFJLEVBQUcsQ0FBa0IsQ0FBQyxHQUFHO2dCQUM3QixJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxFQUFFO2FBQ2xCLENBQUM7U0FDRjtRQUVELElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsUUFBUSxDQUFDLE9BQTZCO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsVUFBVSxDQUFDLE9BQTZCO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsaUJBQWlCLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxRQUFRLENBQ1AsT0FJUztRQUVULE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ25ELENBQUM7O0FBakdlLGFBQUksR0FBRyxFQUFFLEVBQUUsQ0FBQztBQUNaLHdCQUFlLEdBQUcsRUFBRSxFQUFFLENBQUM7QUFDdkIsMEJBQWlCLEdBQUcsRUFBRSxFQUFFLENBQUM7QUFDekIsd0JBQWUsR0FBRyxFQUFFLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElDb21SZXNwb25zZSB9IGZyb20gJy4vT1dlYkNvbSc7XHJcbmltcG9ydCBPV2ViRXZlbnQgZnJvbSAnLi9PV2ViRXZlbnQnO1xyXG5pbXBvcnQgeyBpZCB9IGZyb20gJy4vdXRpbHMvVXRpbHMnO1xyXG5cclxuZXhwb3J0IHR5cGUgdFZpZXdEaWFsb2cgPSB7XHJcblx0dHlwZTogJ2luZm8nIHwgJ2Vycm9yJyB8ICdkb25lJztcclxuXHR0ZXh0OiBzdHJpbmc7XHJcblx0ZGF0YT86IHt9O1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT1dlYlZpZXcgZXh0ZW5kcyBPV2ViRXZlbnQge1xyXG5cdHN0YXRpYyByZWFkb25seSBTRUxGID0gaWQoKTtcclxuXHRzdGF0aWMgcmVhZG9ubHkgRVZUX1ZJRVdfRlJFRVpFID0gaWQoKTtcclxuXHRzdGF0aWMgcmVhZG9ubHkgRVZUX1ZJRVdfVU5GUkVFWkUgPSBpZCgpO1xyXG5cdHN0YXRpYyByZWFkb25seSBFVlRfVklFV19ESUFMT0cgPSBpZCgpO1xyXG5cclxuXHRwcml2YXRlIF9mcmVlemVDb3VudGVyOiBudW1iZXIgPSAwO1xyXG5cclxuXHRjb25zdHJ1Y3RvcigpIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHRjb25zb2xlLmxvZygnW09XZWJWaWV3XSByZWFkeSEnKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIENoZWNrcyBpZiB0aGUgdmlldyBpcyBmcm96ZW4uXHJcblx0ICovXHJcblx0aXNGcm96ZW4oKTogYm9vbGVhbiB7XHJcblx0XHRyZXR1cm4gQm9vbGVhbih0aGlzLl9mcmVlemVDb3VudGVyKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRvIGZyZWV6ZSB0aGUgdmlldy5cclxuXHQgKi9cclxuXHRmcmVlemUoKSB7XHJcblx0XHQrK3RoaXMuX2ZyZWV6ZUNvdW50ZXI7XHJcblxyXG5cdFx0aWYgKHRoaXMuX2ZyZWV6ZUNvdW50ZXIgPT09IDEpIHtcclxuXHRcdFx0dGhpcy50cmlnZ2VyKE9XZWJWaWV3LkVWVF9WSUVXX0ZSRUVaRSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBVbmZyZWV6ZSB0aGUgdmlldy5cclxuXHQgKi9cclxuXHR1bmZyZWV6ZSgpIHtcclxuXHRcdGlmICh0aGlzLmlzRnJvemVuKCkpIHtcclxuXHRcdFx0LS10aGlzLl9mcmVlemVDb3VudGVyO1xyXG5cclxuXHRcdFx0aWYgKCF0aGlzLmlzRnJvemVuKCkpIHtcclxuXHRcdFx0XHR0aGlzLnRyaWdnZXIoT1dlYlZpZXcuRVZUX1ZJRVdfVU5GUkVFWkUpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBUcmlnZ2VyIGRpYWxvZyBldmVudCB0byB0aGUgdmlldy5cclxuXHQgKiBAcGFyYW0gZGlhbG9nXHJcblx0ICogQHBhcmFtIGNhblVzZUFsZXJ0XHJcblx0ICovXHJcblx0ZGlhbG9nKGRpYWxvZzogdFZpZXdEaWFsb2cgfCBJQ29tUmVzcG9uc2UsIGNhblVzZUFsZXJ0OiBib29sZWFuID0gZmFsc2UpIHtcclxuXHRcdGxldCBkID0gZGlhbG9nO1xyXG5cclxuXHRcdGlmICgoZCBhcyBJQ29tUmVzcG9uc2UpLmVycm9yKSB7XHJcblx0XHRcdGQgPSB7XHJcblx0XHRcdFx0dHlwZTogKGQgYXMgSUNvbVJlc3BvbnNlKS5lcnJvciA/ICdlcnJvcicgOiAnZG9uZScsXHJcblx0XHRcdFx0dGV4dDogKGQgYXMgSUNvbVJlc3BvbnNlKS5tc2csXHJcblx0XHRcdFx0ZGF0YTogZC5kYXRhIHx8IHt9LFxyXG5cdFx0XHR9O1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMudHJpZ2dlcihPV2ViVmlldy5FVlRfVklFV19ESUFMT0csIFtkLCBjYW5Vc2VBbGVydF0pO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogUmVnaXN0ZXIgZnJlZXplIGV2ZW50IGhhbmRsZXIuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gaGFuZGxlclxyXG5cdCAqL1xyXG5cdG9uRnJlZXplKGhhbmRsZXI6ICh0aGlzOiB0aGlzKSA9PiB2b2lkKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5vbihPV2ViVmlldy5FVlRfVklFV19GUkVFWkUsIGhhbmRsZXIpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogUmVnaXN0ZXIgdW5mcmVlemUgZXZlbnQgaGFuZGxlci5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBoYW5kbGVyXHJcblx0ICovXHJcblx0b25VbkZyZWV6ZShoYW5kbGVyOiAodGhpczogdGhpcykgPT4gdm9pZCkge1xyXG5cdFx0cmV0dXJuIHRoaXMub24oT1dlYlZpZXcuRVZUX1ZJRVdfVU5GUkVFWkUsIGhhbmRsZXIpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogUmVnaXN0ZXIgZGlhbG9nIGV2ZW50IGhhbmRsZXIuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gaGFuZGxlclxyXG5cdCAqL1xyXG5cdG9uRGlhbG9nKFxyXG5cdFx0aGFuZGxlcjogKFxyXG5cdFx0XHR0aGlzOiB0aGlzLFxyXG5cdFx0XHRkaWFsb2c6IHRWaWV3RGlhbG9nLFxyXG5cdFx0XHRjYW5Vc2VBbGVydDogYm9vbGVhbixcclxuXHRcdCkgPT4gdm9pZCxcclxuXHQpIHtcclxuXHRcdHJldHVybiB0aGlzLm9uKE9XZWJWaWV3LkVWVF9WSUVXX0RJQUxPRywgaGFuZGxlcik7XHJcblx0fVxyXG59XHJcbiJdfQ==