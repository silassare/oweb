import OWebEvent from "./OWebEvent";
import Utils from "./utils/Utils";
export default class OWebView extends OWebEvent {
    constructor() {
        super();
        this._freeze_counter = 0;
        console.log("[OWebView] ready!");
    }
    /**
     * Checks if the view is frozen.
     */
    isFrozen() {
        return Boolean(this._freeze_counter);
    }
    /**
     * To freeze the view.
     */
    freeze() {
        ++this._freeze_counter;
        if (this._freeze_counter === 1) {
            this.trigger(OWebView.EVT_VIEW_FREEZE);
        }
        return this;
    }
    /**
     * Unfreeze the view.
     */
    unfreeze() {
        if (this.isFrozen()) {
            --this._freeze_counter;
            if (!this.isFrozen()) {
                this.trigger(OWebView.EVT_VIEW_UNFREEZE);
            }
        }
        return this;
    }
    /**
     * Trigger dialog event to the view.
     * @param dialog
     * @param can_use_alert
     */
    dialog(dialog, can_use_alert = false) {
        let d = dialog;
        if (d.error) {
            d = {
                "type": d.error ? "error" : "done",
                "text": d.msg,
                "data": d.data || {}
            };
        }
        this.trigger(OWebView.EVT_VIEW_DIALOG, [d, can_use_alert]);
    }
    /**
     * Register freeze event handler.
     *
     * @param handler
     */
    onFreeze(handler) {
        return this.on(OWebView.EVT_VIEW_FREEZE, handler);
    }
    /**
     * Register unfreeze event handler.
     *
     * @param handler
     */
    onUnFreeze(handler) {
        return this.on(OWebView.EVT_VIEW_UNFREEZE, handler);
    }
    /**
     * Register dialog event handler.
     *
     * @param handler
     */
    onDialog(handler) {
        return this.on(OWebView.EVT_VIEW_DIALOG, handler);
    }
}
OWebView.SELF = Utils.id();
OWebView.EVT_VIEW_FREEZE = Utils.id();
OWebView.EVT_VIEW_UNFREEZE = Utils.id();
OWebView.EVT_VIEW_DIALOG = Utils.id();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYlZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvT1dlYlZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxTQUFTLE1BQU0sYUFBYSxDQUFDO0FBQ3BDLE9BQU8sS0FBSyxNQUFNLGVBQWUsQ0FBQztBQVFsQyxNQUFNLENBQUMsT0FBTyxlQUFnQixTQUFRLFNBQVM7SUFTOUM7UUFDQyxLQUFLLEVBQUUsQ0FBQztRQUhELG9CQUFlLEdBQVcsQ0FBQyxDQUFDO1FBSW5DLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxRQUFRO1FBQ1AsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRDs7T0FFRztJQUNILE1BQU07UUFDTCxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUM7UUFFdkIsSUFBSSxJQUFJLENBQUMsZUFBZSxLQUFLLENBQUMsRUFBRTtZQUMvQixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQztTQUN2QztRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQUVEOztPQUVHO0lBQ0gsUUFBUTtRQUNQLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ3BCLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQztZQUV2QixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFO2dCQUNyQixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO2FBQ3pDO1NBQ0Q7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLE1BQWtDLEVBQUUsZ0JBQXlCLEtBQUs7UUFDeEUsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBRWYsSUFBSyxDQUFrQixDQUFDLEtBQUssRUFBRTtZQUM5QixDQUFDLEdBQUc7Z0JBQ0gsTUFBTSxFQUFHLENBQWtCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU07Z0JBQ3BELE1BQU0sRUFBRyxDQUFrQixDQUFDLEdBQUc7Z0JBQy9CLE1BQU0sRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLEVBQUU7YUFDcEIsQ0FBQztTQUNGO1FBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxRQUFRLENBQUMsT0FBNkI7UUFDckMsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxVQUFVLENBQUMsT0FBNkI7UUFDdkMsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILFFBQVEsQ0FBQyxPQUEwRTtRQUNsRixPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNuRCxDQUFDOztBQTNGZSxhQUFJLEdBQWdCLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQztBQUMvQix3QkFBZSxHQUFLLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQztBQUMvQiwwQkFBaUIsR0FBRyxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUM7QUFDL0Isd0JBQWUsR0FBSyxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2lDb21SZXNwb25zZX0gZnJvbSBcIi4vT1dlYkNvbVwiO1xyXG5pbXBvcnQgT1dlYkV2ZW50IGZyb20gXCIuL09XZWJFdmVudFwiO1xyXG5pbXBvcnQgVXRpbHMgZnJvbSBcIi4vdXRpbHMvVXRpbHNcIjtcclxuXHJcbmV4cG9ydCB0eXBlIHRWaWV3RGlhbG9nID0ge1xyXG5cdHR5cGU6IFwiaW5mb1wiIHwgXCJlcnJvclwiIHwgXCJkb25lXCIsXHJcblx0dGV4dDogc3RyaW5nLFxyXG5cdGRhdGE/OiB7fVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT1dlYlZpZXcgZXh0ZW5kcyBPV2ViRXZlbnQge1xyXG5cclxuXHRzdGF0aWMgcmVhZG9ubHkgU0VMRiAgICAgICAgICAgICAgPSBVdGlscy5pZCgpO1xyXG5cdHN0YXRpYyByZWFkb25seSBFVlRfVklFV19GUkVFWkUgICA9IFV0aWxzLmlkKCk7XHJcblx0c3RhdGljIHJlYWRvbmx5IEVWVF9WSUVXX1VORlJFRVpFID0gVXRpbHMuaWQoKTtcclxuXHRzdGF0aWMgcmVhZG9ubHkgRVZUX1ZJRVdfRElBTE9HICAgPSBVdGlscy5pZCgpO1xyXG5cclxuXHRwcml2YXRlIF9mcmVlemVfY291bnRlcjogbnVtYmVyID0gMDtcclxuXHJcblx0Y29uc3RydWN0b3IoKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0Y29uc29sZS5sb2coXCJbT1dlYlZpZXddIHJlYWR5IVwiKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIENoZWNrcyBpZiB0aGUgdmlldyBpcyBmcm96ZW4uXHJcblx0ICovXHJcblx0aXNGcm96ZW4oKTogYm9vbGVhbiB7XHJcblx0XHRyZXR1cm4gQm9vbGVhbih0aGlzLl9mcmVlemVfY291bnRlcik7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBUbyBmcmVlemUgdGhlIHZpZXcuXHJcblx0ICovXHJcblx0ZnJlZXplKCkge1xyXG5cdFx0Kyt0aGlzLl9mcmVlemVfY291bnRlcjtcclxuXHJcblx0XHRpZiAodGhpcy5fZnJlZXplX2NvdW50ZXIgPT09IDEpIHtcclxuXHRcdFx0dGhpcy50cmlnZ2VyKE9XZWJWaWV3LkVWVF9WSUVXX0ZSRUVaRSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBVbmZyZWV6ZSB0aGUgdmlldy5cclxuXHQgKi9cclxuXHR1bmZyZWV6ZSgpIHtcclxuXHRcdGlmICh0aGlzLmlzRnJvemVuKCkpIHtcclxuXHRcdFx0LS10aGlzLl9mcmVlemVfY291bnRlcjtcclxuXHJcblx0XHRcdGlmICghdGhpcy5pc0Zyb3plbigpKSB7XHJcblx0XHRcdFx0dGhpcy50cmlnZ2VyKE9XZWJWaWV3LkVWVF9WSUVXX1VORlJFRVpFKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogVHJpZ2dlciBkaWFsb2cgZXZlbnQgdG8gdGhlIHZpZXcuXHJcblx0ICogQHBhcmFtIGRpYWxvZ1xyXG5cdCAqIEBwYXJhbSBjYW5fdXNlX2FsZXJ0XHJcblx0ICovXHJcblx0ZGlhbG9nKGRpYWxvZzogdFZpZXdEaWFsb2cgfCBpQ29tUmVzcG9uc2UsIGNhbl91c2VfYWxlcnQ6IGJvb2xlYW4gPSBmYWxzZSkge1xyXG5cdFx0bGV0IGQgPSBkaWFsb2c7XHJcblxyXG5cdFx0aWYgKChkIGFzIGlDb21SZXNwb25zZSkuZXJyb3IpIHtcclxuXHRcdFx0ZCA9IHtcclxuXHRcdFx0XHRcInR5cGVcIjogKGQgYXMgaUNvbVJlc3BvbnNlKS5lcnJvciA/IFwiZXJyb3JcIiA6IFwiZG9uZVwiLFxyXG5cdFx0XHRcdFwidGV4dFwiOiAoZCBhcyBpQ29tUmVzcG9uc2UpLm1zZyxcclxuXHRcdFx0XHRcImRhdGFcIjogZC5kYXRhIHx8IHt9XHJcblx0XHRcdH07XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy50cmlnZ2VyKE9XZWJWaWV3LkVWVF9WSUVXX0RJQUxPRywgW2QsIGNhbl91c2VfYWxlcnRdKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJlZ2lzdGVyIGZyZWV6ZSBldmVudCBoYW5kbGVyLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGhhbmRsZXJcclxuXHQgKi9cclxuXHRvbkZyZWV6ZShoYW5kbGVyOiAodGhpczogdGhpcykgPT4gdm9pZCkge1xyXG5cdFx0cmV0dXJuIHRoaXMub24oT1dlYlZpZXcuRVZUX1ZJRVdfRlJFRVpFLCBoYW5kbGVyKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJlZ2lzdGVyIHVuZnJlZXplIGV2ZW50IGhhbmRsZXIuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gaGFuZGxlclxyXG5cdCAqL1xyXG5cdG9uVW5GcmVlemUoaGFuZGxlcjogKHRoaXM6IHRoaXMpID0+IHZvaWQpIHtcclxuXHRcdHJldHVybiB0aGlzLm9uKE9XZWJWaWV3LkVWVF9WSUVXX1VORlJFRVpFLCBoYW5kbGVyKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJlZ2lzdGVyIGRpYWxvZyBldmVudCBoYW5kbGVyLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGhhbmRsZXJcclxuXHQgKi9cclxuXHRvbkRpYWxvZyhoYW5kbGVyOiAodGhpczogdGhpcywgZGlhbG9nOiB0Vmlld0RpYWxvZywgY2FuX3VzZV9hbGVydDogYm9vbGVhbikgPT4gdm9pZCkge1xyXG5cdFx0cmV0dXJuIHRoaXMub24oT1dlYlZpZXcuRVZUX1ZJRVdfRElBTE9HLCBoYW5kbGVyKTtcclxuXHR9XHJcbn0iXX0=