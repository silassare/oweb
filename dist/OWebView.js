import OWebEvent from './OWebEvent';
import { id, logger } from './utils';
export default class OWebView extends OWebEvent {
    static SELF = id();
    static EVT_VIEW_FREEZE = id();
    static EVT_VIEW_UNFREEZE = id();
    static EVT_VIEW_DIALOG = id();
    _freezeCounter = 0;
    constructor() {
        super();
        logger.info('[OWebView] ready!');
    }
    /**
     * Checks if the view is frozen.
     */
    isFrozen() {
        return Boolean(this._freezeCounter);
    }
    /**
     * To freeze the view.
     */
    freeze() {
        ++this._freezeCounter;
        if (this._freezeCounter === 1) {
            this.trigger(OWebView.EVT_VIEW_FREEZE);
        }
        return this;
    }
    /**
     * Unfreeze the view.
     */
    unfreeze() {
        if (this.isFrozen()) {
            --this._freezeCounter;
            if (!this.isFrozen()) {
                this.trigger(OWebView.EVT_VIEW_UNFREEZE);
            }
        }
        return this;
    }
    /**
     * Trigger dialog event to the view.
     * @param dialog
     * @param canUseAlert
     */
    dialog(dialog, canUseAlert = false) {
        let d = dialog;
        if (d.error) {
            d = {
                type: d.error ? 'error' : 'done',
                text: d.msg,
                data: d.data || {},
            };
        }
        this.trigger(OWebView.EVT_VIEW_DIALOG, [d, canUseAlert]);
    }
    /**
     * Register freeze event handler.
     *
     * @param handler
     */
    onFreeze(handler) {
        return this.on(OWebView.EVT_VIEW_FREEZE, handler);
    }
    /**
     * Register unfreeze event handler.
     *
     * @param handler
     */
    onUnFreeze(handler) {
        return this.on(OWebView.EVT_VIEW_UNFREEZE, handler);
    }
    /**
     * Register dialog event handler.
     *
     * @param handler
     */
    onDialog(handler) {
        return this.on(OWebView.EVT_VIEW_DIALOG, handler);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYlZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvT1dlYlZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxTQUFTLE1BQU0sYUFBYSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBVXJDLE1BQU0sQ0FBQyxPQUFPLE9BQU8sUUFBUyxTQUFRLFNBQVM7SUFDOUMsTUFBTSxDQUFVLElBQUksR0FBRyxFQUFFLEVBQUUsQ0FBQztJQUM1QixNQUFNLENBQVUsZUFBZSxHQUFHLEVBQUUsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sQ0FBVSxpQkFBaUIsR0FBRyxFQUFFLEVBQUUsQ0FBQztJQUN6QyxNQUFNLENBQVUsZUFBZSxHQUFHLEVBQUUsRUFBRSxDQUFDO0lBRS9CLGNBQWMsR0FBRyxDQUFDLENBQUM7SUFFM0I7UUFDQyxLQUFLLEVBQUUsQ0FBQztRQUNSLE1BQU0sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxRQUFRO1FBQ1AsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBQ3JDLENBQUM7SUFFRDs7T0FFRztJQUNILE1BQU07UUFDTCxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUM7UUFFdEIsSUFBSSxJQUFJLENBQUMsY0FBYyxLQUFLLENBQUMsRUFBRTtZQUM5QixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQztTQUN2QztRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQUVEOztPQUVHO0lBQ0gsUUFBUTtRQUNQLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ3BCLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQztZQUV0QixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFO2dCQUNyQixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO2FBQ3pDO1NBQ0Q7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUNMLE1BQW1ELEVBQ25ELFdBQVcsR0FBRyxLQUFLO1FBRW5CLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUVmLElBQUssQ0FBdUIsQ0FBQyxLQUFLLEVBQUU7WUFDbkMsQ0FBQyxHQUFHO2dCQUNILElBQUksRUFBRyxDQUF1QixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNO2dCQUN2RCxJQUFJLEVBQUcsQ0FBdUIsQ0FBQyxHQUFHO2dCQUNsQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxFQUFFO2FBQ2xCLENBQUM7U0FDRjtRQUVELElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUMsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsUUFBUSxDQUFDLE9BQTZCO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsVUFBVSxDQUFDLE9BQTZCO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsaUJBQWlCLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxRQUFRLENBQ1AsT0FJUztRQUVULE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ25ELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgT1dlYkV2ZW50IGZyb20gJy4vT1dlYkV2ZW50JztcbmltcG9ydCB7IGlkLCBsb2dnZXIgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IE9BcGlSZXNwb25zZSB9IGZyb20gJy4vb3pvbmUnO1xuaW1wb3J0IHsgT05ldEVycm9yIH0gZnJvbSAnLi9PV2ViTmV0JztcblxuZXhwb3J0IHR5cGUgT1ZpZXdEaWFsb2cgPSB7XG5cdHR5cGU6ICdpbmZvJyB8ICdlcnJvcicgfCAnZG9uZSc7XG5cdHRleHQ6IHN0cmluZztcblx0ZGF0YT86IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT1dlYlZpZXcgZXh0ZW5kcyBPV2ViRXZlbnQge1xuXHRzdGF0aWMgcmVhZG9ubHkgU0VMRiA9IGlkKCk7XG5cdHN0YXRpYyByZWFkb25seSBFVlRfVklFV19GUkVFWkUgPSBpZCgpO1xuXHRzdGF0aWMgcmVhZG9ubHkgRVZUX1ZJRVdfVU5GUkVFWkUgPSBpZCgpO1xuXHRzdGF0aWMgcmVhZG9ubHkgRVZUX1ZJRVdfRElBTE9HID0gaWQoKTtcblxuXHRwcml2YXRlIF9mcmVlemVDb3VudGVyID0gMDtcblxuXHRjb25zdHJ1Y3RvcigpIHtcblx0XHRzdXBlcigpO1xuXHRcdGxvZ2dlci5pbmZvKCdbT1dlYlZpZXddIHJlYWR5IScpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENoZWNrcyBpZiB0aGUgdmlldyBpcyBmcm96ZW4uXG5cdCAqL1xuXHRpc0Zyb3plbigpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gQm9vbGVhbih0aGlzLl9mcmVlemVDb3VudGVyKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBUbyBmcmVlemUgdGhlIHZpZXcuXG5cdCAqL1xuXHRmcmVlemUoKTp0aGlzIHtcblx0XHQrK3RoaXMuX2ZyZWV6ZUNvdW50ZXI7XG5cblx0XHRpZiAodGhpcy5fZnJlZXplQ291bnRlciA9PT0gMSkge1xuXHRcdFx0dGhpcy50cmlnZ2VyKE9XZWJWaWV3LkVWVF9WSUVXX0ZSRUVaRSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogVW5mcmVlemUgdGhlIHZpZXcuXG5cdCAqL1xuXHR1bmZyZWV6ZSgpOnRoaXMge1xuXHRcdGlmICh0aGlzLmlzRnJvemVuKCkpIHtcblx0XHRcdC0tdGhpcy5fZnJlZXplQ291bnRlcjtcblxuXHRcdFx0aWYgKCF0aGlzLmlzRnJvemVuKCkpIHtcblx0XHRcdFx0dGhpcy50cmlnZ2VyKE9XZWJWaWV3LkVWVF9WSUVXX1VORlJFRVpFKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBUcmlnZ2VyIGRpYWxvZyBldmVudCB0byB0aGUgdmlldy5cblx0ICogQHBhcmFtIGRpYWxvZ1xuXHQgKiBAcGFyYW0gY2FuVXNlQWxlcnRcblx0ICovXG5cdGRpYWxvZyhcblx0XHRkaWFsb2c6IE9WaWV3RGlhbG9nIHwgT0FwaVJlc3BvbnNlPGFueT4gfCBPTmV0RXJyb3IsXG5cdFx0Y2FuVXNlQWxlcnQgPSBmYWxzZVxuXHQpOnZvaWQge1xuXHRcdGxldCBkID0gZGlhbG9nO1xuXG5cdFx0aWYgKChkIGFzIE9BcGlSZXNwb25zZTxhbnk+KS5lcnJvcikge1xuXHRcdFx0ZCA9IHtcblx0XHRcdFx0dHlwZTogKGQgYXMgT0FwaVJlc3BvbnNlPGFueT4pLmVycm9yID8gJ2Vycm9yJyA6ICdkb25lJyxcblx0XHRcdFx0dGV4dDogKGQgYXMgT0FwaVJlc3BvbnNlPGFueT4pLm1zZyxcblx0XHRcdFx0ZGF0YTogZC5kYXRhIHx8IHt9LFxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHR0aGlzLnRyaWdnZXIoT1dlYlZpZXcuRVZUX1ZJRVdfRElBTE9HLCBbZCwgY2FuVXNlQWxlcnRdKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZWdpc3RlciBmcmVlemUgZXZlbnQgaGFuZGxlci5cblx0ICpcblx0ICogQHBhcmFtIGhhbmRsZXJcblx0ICovXG5cdG9uRnJlZXplKGhhbmRsZXI6ICh0aGlzOiB0aGlzKSA9PiB2b2lkKSA6dGhpc3tcblx0XHRyZXR1cm4gdGhpcy5vbihPV2ViVmlldy5FVlRfVklFV19GUkVFWkUsIGhhbmRsZXIpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlZ2lzdGVyIHVuZnJlZXplIGV2ZW50IGhhbmRsZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSBoYW5kbGVyXG5cdCAqL1xuXHRvblVuRnJlZXplKGhhbmRsZXI6ICh0aGlzOiB0aGlzKSA9PiB2b2lkKTp0aGlzIHtcblx0XHRyZXR1cm4gdGhpcy5vbihPV2ViVmlldy5FVlRfVklFV19VTkZSRUVaRSwgaGFuZGxlcik7XG5cdH1cblxuXHQvKipcblx0ICogUmVnaXN0ZXIgZGlhbG9nIGV2ZW50IGhhbmRsZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSBoYW5kbGVyXG5cdCAqL1xuXHRvbkRpYWxvZyhcblx0XHRoYW5kbGVyOiAoXG5cdFx0XHR0aGlzOiB0aGlzLFxuXHRcdFx0ZGlhbG9nOiBPVmlld0RpYWxvZyxcblx0XHRcdGNhblVzZUFsZXJ0OiBib29sZWFuLFxuXHRcdCkgPT4gdm9pZFxuXHQpOnRoaXMge1xuXHRcdHJldHVybiB0aGlzLm9uKE9XZWJWaWV3LkVWVF9WSUVXX0RJQUxPRywgaGFuZGxlcik7XG5cdH1cbn1cbiJdfQ==