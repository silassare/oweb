import OWebEvent from './OWebEvent';
import { id, logger } from './utils';
export default class OWebView extends OWebEvent {
    static SELF = id();
    static EVT_VIEW_FREEZE = id();
    static EVT_VIEW_UNFREEZE = id();
    static EVT_VIEW_DIALOG = id();
    _freezeCounter = 0;
    constructor() {
        super();
        logger.info('[OWebView] ready!');
    }
    isFrozen() {
        return Boolean(this._freezeCounter);
    }
    freeze() {
        ++this._freezeCounter;
        if (this._freezeCounter === 1) {
            this.trigger(OWebView.EVT_VIEW_FREEZE);
        }
        return this;
    }
    unfreeze() {
        if (this.isFrozen()) {
            --this._freezeCounter;
            if (!this.isFrozen()) {
                this.trigger(OWebView.EVT_VIEW_UNFREEZE);
            }
        }
        return this;
    }
    dialog(dialog, canUseAlert = false) {
        let d = dialog;
        if (d.error) {
            d = {
                type: d.error ? 'error' : 'done',
                text: d.msg,
                data: d.data || {},
            };
        }
        this.trigger(OWebView.EVT_VIEW_DIALOG, [d, canUseAlert]);
    }
    onFreeze(handler) {
        return this.on(OWebView.EVT_VIEW_FREEZE, handler);
    }
    onUnFreeze(handler) {
        return this.on(OWebView.EVT_VIEW_UNFREEZE, handler);
    }
    onDialog(handler) {
        return this.on(OWebView.EVT_VIEW_DIALOG, handler);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYlZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvT1dlYlZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxTQUFTLE1BQU0sYUFBYSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBVXJDLE1BQU0sQ0FBQyxPQUFPLE9BQU8sUUFBUyxTQUFRLFNBQVM7SUFDOUMsTUFBTSxDQUFVLElBQUksR0FBRyxFQUFFLEVBQUUsQ0FBQztJQUM1QixNQUFNLENBQVUsZUFBZSxHQUFHLEVBQUUsRUFBRSxDQUFDO0lBQ3ZDLE1BQU0sQ0FBVSxpQkFBaUIsR0FBRyxFQUFFLEVBQUUsQ0FBQztJQUN6QyxNQUFNLENBQVUsZUFBZSxHQUFHLEVBQUUsRUFBRSxDQUFDO0lBRS9CLGNBQWMsR0FBRyxDQUFDLENBQUM7SUFFM0I7UUFDQyxLQUFLLEVBQUUsQ0FBQztRQUNSLE1BQU0sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBS0QsUUFBUTtRQUNQLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBS0QsTUFBTTtRQUNMLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQztRQUV0QixJQUFJLElBQUksQ0FBQyxjQUFjLEtBQUssQ0FBQyxFQUFFO1lBQzlCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQ3ZDO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBS0QsUUFBUTtRQUNQLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ3BCLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQztZQUV0QixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFO2dCQUNyQixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO2FBQ3pDO1NBQ0Q7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFPRCxNQUFNLENBQ0wsTUFBbUQsRUFDbkQsV0FBVyxHQUFHLEtBQUs7UUFFbkIsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBRWYsSUFBSyxDQUF1QixDQUFDLEtBQUssRUFBRTtZQUNuQyxDQUFDLEdBQUc7Z0JBQ0gsSUFBSSxFQUFHLENBQXVCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU07Z0JBQ3ZELElBQUksRUFBRyxDQUF1QixDQUFDLEdBQUc7Z0JBQ2xDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLEVBQUU7YUFDbEIsQ0FBQztTQUNGO1FBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUM7SUFDMUQsQ0FBQztJQU9ELFFBQVEsQ0FBQyxPQUE2QjtRQUNyQyxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBT0QsVUFBVSxDQUFDLE9BQTZCO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsaUJBQWlCLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQU9ELFFBQVEsQ0FDUCxPQUF3RTtRQUV4RSxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNuRCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE9XZWJFdmVudCBmcm9tICcuL09XZWJFdmVudCc7XG5pbXBvcnQgeyBpZCwgbG9nZ2VyIH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBPQXBpUmVzcG9uc2UgfSBmcm9tICcuL296b25lJztcbmltcG9ydCB7IE9OZXRFcnJvciB9IGZyb20gJy4vT1dlYk5ldCc7XG5cbmV4cG9ydCB0eXBlIE9WaWV3RGlhbG9nID0ge1xuXHR0eXBlOiAnaW5mbycgfCAnZXJyb3InIHwgJ2RvbmUnO1xuXHR0ZXh0OiBzdHJpbmc7XG5cdGRhdGE/OiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9XZWJWaWV3IGV4dGVuZHMgT1dlYkV2ZW50IHtcblx0c3RhdGljIHJlYWRvbmx5IFNFTEYgPSBpZCgpO1xuXHRzdGF0aWMgcmVhZG9ubHkgRVZUX1ZJRVdfRlJFRVpFID0gaWQoKTtcblx0c3RhdGljIHJlYWRvbmx5IEVWVF9WSUVXX1VORlJFRVpFID0gaWQoKTtcblx0c3RhdGljIHJlYWRvbmx5IEVWVF9WSUVXX0RJQUxPRyA9IGlkKCk7XG5cblx0cHJpdmF0ZSBfZnJlZXplQ291bnRlciA9IDA7XG5cblx0Y29uc3RydWN0b3IoKSB7XG5cdFx0c3VwZXIoKTtcblx0XHRsb2dnZXIuaW5mbygnW09XZWJWaWV3XSByZWFkeSEnKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDaGVja3MgaWYgdGhlIHZpZXcgaXMgZnJvemVuLlxuXHQgKi9cblx0aXNGcm96ZW4oKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIEJvb2xlYW4odGhpcy5fZnJlZXplQ291bnRlcik7XG5cdH1cblxuXHQvKipcblx0ICogVG8gZnJlZXplIHRoZSB2aWV3LlxuXHQgKi9cblx0ZnJlZXplKCk6IHRoaXMge1xuXHRcdCsrdGhpcy5fZnJlZXplQ291bnRlcjtcblxuXHRcdGlmICh0aGlzLl9mcmVlemVDb3VudGVyID09PSAxKSB7XG5cdFx0XHR0aGlzLnRyaWdnZXIoT1dlYlZpZXcuRVZUX1ZJRVdfRlJFRVpFKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBVbmZyZWV6ZSB0aGUgdmlldy5cblx0ICovXG5cdHVuZnJlZXplKCk6IHRoaXMge1xuXHRcdGlmICh0aGlzLmlzRnJvemVuKCkpIHtcblx0XHRcdC0tdGhpcy5fZnJlZXplQ291bnRlcjtcblxuXHRcdFx0aWYgKCF0aGlzLmlzRnJvemVuKCkpIHtcblx0XHRcdFx0dGhpcy50cmlnZ2VyKE9XZWJWaWV3LkVWVF9WSUVXX1VORlJFRVpFKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBUcmlnZ2VyIGRpYWxvZyBldmVudCB0byB0aGUgdmlldy5cblx0ICogQHBhcmFtIGRpYWxvZ1xuXHQgKiBAcGFyYW0gY2FuVXNlQWxlcnRcblx0ICovXG5cdGRpYWxvZyhcblx0XHRkaWFsb2c6IE9WaWV3RGlhbG9nIHwgT0FwaVJlc3BvbnNlPGFueT4gfCBPTmV0RXJyb3IsXG5cdFx0Y2FuVXNlQWxlcnQgPSBmYWxzZVxuXHQpOiB2b2lkIHtcblx0XHRsZXQgZCA9IGRpYWxvZztcblxuXHRcdGlmICgoZCBhcyBPQXBpUmVzcG9uc2U8YW55PikuZXJyb3IpIHtcblx0XHRcdGQgPSB7XG5cdFx0XHRcdHR5cGU6IChkIGFzIE9BcGlSZXNwb25zZTxhbnk+KS5lcnJvciA/ICdlcnJvcicgOiAnZG9uZScsXG5cdFx0XHRcdHRleHQ6IChkIGFzIE9BcGlSZXNwb25zZTxhbnk+KS5tc2csXG5cdFx0XHRcdGRhdGE6IGQuZGF0YSB8fCB7fSxcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0dGhpcy50cmlnZ2VyKE9XZWJWaWV3LkVWVF9WSUVXX0RJQUxPRywgW2QsIGNhblVzZUFsZXJ0XSk7XG5cdH1cblxuXHQvKipcblx0ICogUmVnaXN0ZXIgZnJlZXplIGV2ZW50IGhhbmRsZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSBoYW5kbGVyXG5cdCAqL1xuXHRvbkZyZWV6ZShoYW5kbGVyOiAodGhpczogdGhpcykgPT4gdm9pZCk6IHRoaXMge1xuXHRcdHJldHVybiB0aGlzLm9uKE9XZWJWaWV3LkVWVF9WSUVXX0ZSRUVaRSwgaGFuZGxlcik7XG5cdH1cblxuXHQvKipcblx0ICogUmVnaXN0ZXIgdW5mcmVlemUgZXZlbnQgaGFuZGxlci5cblx0ICpcblx0ICogQHBhcmFtIGhhbmRsZXJcblx0ICovXG5cdG9uVW5GcmVlemUoaGFuZGxlcjogKHRoaXM6IHRoaXMpID0+IHZvaWQpOiB0aGlzIHtcblx0XHRyZXR1cm4gdGhpcy5vbihPV2ViVmlldy5FVlRfVklFV19VTkZSRUVaRSwgaGFuZGxlcik7XG5cdH1cblxuXHQvKipcblx0ICogUmVnaXN0ZXIgZGlhbG9nIGV2ZW50IGhhbmRsZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSBoYW5kbGVyXG5cdCAqL1xuXHRvbkRpYWxvZyhcblx0XHRoYW5kbGVyOiAodGhpczogdGhpcywgZGlhbG9nOiBPVmlld0RpYWxvZywgY2FuVXNlQWxlcnQ6IGJvb2xlYW4pID0+IHZvaWRcblx0KTogdGhpcyB7XG5cdFx0cmV0dXJuIHRoaXMub24oT1dlYlZpZXcuRVZUX1ZJRVdfRElBTE9HLCBoYW5kbGVyKTtcblx0fVxufVxuIl19