import { OWebEvent } from "./oweb";
export default class OWebView extends OWebEvent {
    constructor() {
        super();
        this._freeze_counter = 0;
        console.log("[OWebView] ready!");
    }
    isFrozen() {
        return Boolean(this._freeze_counter);
    }
    freeze() {
        ++this._freeze_counter;
        if (this._freeze_counter === 1) {
            this.trigger(OWebView.EVT_VIEW_FREEZE);
        }
        return this;
    }
    unfreeze() {
        if (this.isFrozen()) {
            --this._freeze_counter;
            if (!this.isFrozen()) {
                this.trigger(OWebView.EVT_VIEW_UNFREEZE);
            }
        }
        return this;
    }
    dialog(dialog) {
        let d = dialog;
        if (d.error) {
            d = {
                "type": d.error ? "error" : "done",
                "text": d.msg,
                "data": d.data || {}
            };
            // console.error("[OWebView] please use new dialog mode -> ", d, "instead of ->", dialog);
        }
        this.trigger(OWebView.EVT_VIEW_DIALOG, [d]);
    }
}
OWebView.EVT_VIEW_FREEZE = "OWebView:freeze";
OWebView.EVT_VIEW_UNFREEZE = "OWebView:unfreeze";
OWebView.EVT_VIEW_DIALOG = "OWebView:dialog";
OWebView.SELF = "OWebView";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYlZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvT1dlYlZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFlLFNBQVMsRUFBQyxNQUFNLFFBQVEsQ0FBQztBQVEvQyxNQUFNLENBQUMsT0FBTyxlQUFnQixTQUFRLFNBQVM7SUFTOUM7UUFDQyxLQUFLLEVBQUUsQ0FBQztRQUhELG9CQUFlLEdBQVcsQ0FBQyxDQUFDO1FBSW5DLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQsUUFBUTtRQUNQLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQsTUFBTTtRQUNMLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQztRQUV2QixJQUFJLElBQUksQ0FBQyxlQUFlLEtBQUssQ0FBQyxFQUFFO1lBQy9CLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQ3ZDO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBRUQsUUFBUTtRQUNQLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ3BCLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQztZQUV2QixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFO2dCQUNyQixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO2FBQ3pDO1NBQ0Q7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFRCxNQUFNLENBQUMsTUFBa0M7UUFDeEMsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBRWYsSUFBSyxDQUFrQixDQUFDLEtBQUssRUFBRTtZQUM5QixDQUFDLEdBQUc7Z0JBQ0gsTUFBTSxFQUFHLENBQWtCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU07Z0JBQ3BELE1BQU0sRUFBRyxDQUFrQixDQUFDLEdBQUc7Z0JBQy9CLE1BQU0sRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLEVBQUU7YUFDcEIsQ0FBQztZQUVGLDBGQUEwRjtTQUMxRjtRQUVELElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0MsQ0FBQzs7QUFwRGUsd0JBQWUsR0FBSyxpQkFBaUIsQ0FBQztBQUN0QywwQkFBaUIsR0FBRyxtQkFBbUIsQ0FBQztBQUN4Qyx3QkFBZSxHQUFLLGlCQUFpQixDQUFDO0FBQ3RDLGFBQUksR0FBZ0IsVUFBVSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtpQ29tUmVzcG9uc2UsIE9XZWJFdmVudH0gZnJvbSBcIi4vb3dlYlwiO1xyXG5cclxuZXhwb3J0IHR5cGUgdFZpZXdEaWFsb2cgPSB7XHJcblx0dHlwZTogXCJpbmZvXCIgfCBcImVycm9yXCIgfCBcImRvbmVcIixcclxuXHR0ZXh0OiBzdHJpbmcsXHJcblx0ZGF0YT86IHt9XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPV2ViVmlldyBleHRlbmRzIE9XZWJFdmVudCB7XHJcblxyXG5cdHN0YXRpYyByZWFkb25seSBFVlRfVklFV19GUkVFWkUgICA9IFwiT1dlYlZpZXc6ZnJlZXplXCI7XHJcblx0c3RhdGljIHJlYWRvbmx5IEVWVF9WSUVXX1VORlJFRVpFID0gXCJPV2ViVmlldzp1bmZyZWV6ZVwiO1xyXG5cdHN0YXRpYyByZWFkb25seSBFVlRfVklFV19ESUFMT0cgICA9IFwiT1dlYlZpZXc6ZGlhbG9nXCI7XHJcblx0c3RhdGljIHJlYWRvbmx5IFNFTEYgICAgICAgICAgICAgID0gXCJPV2ViVmlld1wiO1xyXG5cclxuXHRwcml2YXRlIF9mcmVlemVfY291bnRlcjogbnVtYmVyID0gMDtcclxuXHJcblx0Y29uc3RydWN0b3IoKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0Y29uc29sZS5sb2coXCJbT1dlYlZpZXddIHJlYWR5IVwiKTtcclxuXHR9XHJcblxyXG5cdGlzRnJvemVuKCk6IGJvb2xlYW4ge1xyXG5cdFx0cmV0dXJuIEJvb2xlYW4odGhpcy5fZnJlZXplX2NvdW50ZXIpO1xyXG5cdH1cclxuXHJcblx0ZnJlZXplKCkge1xyXG5cdFx0Kyt0aGlzLl9mcmVlemVfY291bnRlcjtcclxuXHJcblx0XHRpZiAodGhpcy5fZnJlZXplX2NvdW50ZXIgPT09IDEpIHtcclxuXHRcdFx0dGhpcy50cmlnZ2VyKE9XZWJWaWV3LkVWVF9WSUVXX0ZSRUVaRSk7XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHR1bmZyZWV6ZSgpIHtcclxuXHRcdGlmICh0aGlzLmlzRnJvemVuKCkpIHtcclxuXHRcdFx0LS10aGlzLl9mcmVlemVfY291bnRlcjtcclxuXHJcblx0XHRcdGlmICghdGhpcy5pc0Zyb3plbigpKSB7XHJcblx0XHRcdFx0dGhpcy50cmlnZ2VyKE9XZWJWaWV3LkVWVF9WSUVXX1VORlJFRVpFKTtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHJcblx0ZGlhbG9nKGRpYWxvZzogdFZpZXdEaWFsb2cgfCBpQ29tUmVzcG9uc2UpIHtcclxuXHRcdGxldCBkID0gZGlhbG9nO1xyXG5cclxuXHRcdGlmICgoZCBhcyBpQ29tUmVzcG9uc2UpLmVycm9yKSB7XHJcblx0XHRcdGQgPSB7XHJcblx0XHRcdFx0XCJ0eXBlXCI6IChkIGFzIGlDb21SZXNwb25zZSkuZXJyb3IgPyBcImVycm9yXCIgOiBcImRvbmVcIixcclxuXHRcdFx0XHRcInRleHRcIjogKGQgYXMgaUNvbVJlc3BvbnNlKS5tc2csXHJcblx0XHRcdFx0XCJkYXRhXCI6IGQuZGF0YSB8fCB7fVxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0Ly8gY29uc29sZS5lcnJvcihcIltPV2ViVmlld10gcGxlYXNlIHVzZSBuZXcgZGlhbG9nIG1vZGUgLT4gXCIsIGQsIFwiaW5zdGVhZCBvZiAtPlwiLCBkaWFsb2cpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMudHJpZ2dlcihPV2ViVmlldy5FVlRfVklFV19ESUFMT0csIFtkXSk7XHJcblx0fVxyXG59Il19