"use strict";
import OWebEvent from "./OWebEvent";
export default class OWebView extends OWebEvent {
    constructor() {
        super();
        this._freeze_counter = 0;
        console.log("[OWebView] ready!");
    }
    isFrozen() {
        return Boolean(this._freeze_counter);
    }
    freeze() {
        ++this._freeze_counter;
        if (this._freeze_counter === 1) {
            this.trigger(OWebView.EVT_VIEW_FREEZE);
        }
        return this;
    }
    unfreeze() {
        if (this.isFrozen()) {
            --this._freeze_counter;
            if (!this.isFrozen()) {
                this.trigger(OWebView.EVT_VIEW_UNFREEZE);
            }
        }
        return this;
    }
    dialog(dialog) {
        let d = dialog;
        if (d.error) {
            d = {
                "type": d.error ? "error" : "done",
                "text": d.msg,
                "data": d.data || {}
            };
            // console.error("[OWebView] please use new dialog mode -> ", d, "instead of ->", dialog);
        }
        this.trigger(OWebView.EVT_VIEW_DIALOG, [d]);
    }
}
OWebView.EVT_VIEW_FREEZE = "OWebView:freeze";
OWebView.EVT_VIEW_UNFREEZE = "OWebView:unfreeze";
OWebView.EVT_VIEW_DIALOG = "OWebView:dialog";
OWebView.SELF = "OWebView";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYlZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvT1dlYlZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBR2IsT0FBTyxTQUFTLE1BQU0sYUFBYSxDQUFDO0FBUXBDLE1BQU0sQ0FBQyxPQUFPLGVBQWdCLFNBQVEsU0FBUztJQVM5QztRQUNDLEtBQUssRUFBRSxDQUFDO1FBSEQsb0JBQWUsR0FBVyxDQUFDLENBQUM7UUFJbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRCxRQUFRO1FBQ1AsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRCxNQUFNO1FBQ0wsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDO1FBRXZCLElBQUksSUFBSSxDQUFDLGVBQWUsS0FBSyxDQUFDLEVBQUU7WUFDL0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUM7U0FDdkM7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFRCxRQUFRO1FBQ1AsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDcEIsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDO1lBRXZCLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQUU7Z0JBQ3JCLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLENBQUM7YUFDekM7U0FDRDtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQUVELE1BQU0sQ0FBQyxNQUFrQztRQUN4QyxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUM7UUFFZixJQUFLLENBQWtCLENBQUMsS0FBSyxFQUFFO1lBQzlCLENBQUMsR0FBRztnQkFDSCxNQUFNLEVBQUcsQ0FBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTTtnQkFDcEQsTUFBTSxFQUFHLENBQWtCLENBQUMsR0FBRztnQkFDL0IsTUFBTSxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRTthQUNwQixDQUFDO1lBRUYsMEZBQTBGO1NBQzFGO1FBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3QyxDQUFDOztBQXBEZSx3QkFBZSxHQUFLLGlCQUFpQixDQUFDO0FBQ3RDLDBCQUFpQixHQUFHLG1CQUFtQixDQUFDO0FBQ3hDLHdCQUFlLEdBQUssaUJBQWlCLENBQUM7QUFDdEMsYUFBSSxHQUFnQixVQUFVLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCB7dENvbVJlc3BvbnNlfSBmcm9tIFwiLi9PV2ViQ29tXCI7XHJcbmltcG9ydCBPV2ViRXZlbnQgZnJvbSBcIi4vT1dlYkV2ZW50XCI7XHJcblxyXG5leHBvcnQgdHlwZSB0Vmlld0RpYWxvZyA9IHtcclxuXHR0eXBlOiBcImluZm9cIiB8IFwiZXJyb3JcIiB8IFwiZG9uZVwiLFxyXG5cdHRleHQ6IHN0cmluZyxcclxuXHRkYXRhPzoge31cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9XZWJWaWV3IGV4dGVuZHMgT1dlYkV2ZW50IHtcclxuXHJcblx0c3RhdGljIHJlYWRvbmx5IEVWVF9WSUVXX0ZSRUVaRSAgID0gXCJPV2ViVmlldzpmcmVlemVcIjtcclxuXHRzdGF0aWMgcmVhZG9ubHkgRVZUX1ZJRVdfVU5GUkVFWkUgPSBcIk9XZWJWaWV3OnVuZnJlZXplXCI7XHJcblx0c3RhdGljIHJlYWRvbmx5IEVWVF9WSUVXX0RJQUxPRyAgID0gXCJPV2ViVmlldzpkaWFsb2dcIjtcclxuXHRzdGF0aWMgcmVhZG9ubHkgU0VMRiAgICAgICAgICAgICAgPSBcIk9XZWJWaWV3XCI7XHJcblxyXG5cdHByaXZhdGUgX2ZyZWV6ZV9jb3VudGVyOiBudW1iZXIgPSAwO1xyXG5cclxuXHRjb25zdHJ1Y3RvcigpIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0XHRjb25zb2xlLmxvZyhcIltPV2ViVmlld10gcmVhZHkhXCIpO1xyXG5cdH1cclxuXHJcblx0aXNGcm96ZW4oKTogYm9vbGVhbiB7XHJcblx0XHRyZXR1cm4gQm9vbGVhbih0aGlzLl9mcmVlemVfY291bnRlcik7XHJcblx0fVxyXG5cclxuXHRmcmVlemUoKSB7XHJcblx0XHQrK3RoaXMuX2ZyZWV6ZV9jb3VudGVyO1xyXG5cclxuXHRcdGlmICh0aGlzLl9mcmVlemVfY291bnRlciA9PT0gMSkge1xyXG5cdFx0XHR0aGlzLnRyaWdnZXIoT1dlYlZpZXcuRVZUX1ZJRVdfRlJFRVpFKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblxyXG5cdHVuZnJlZXplKCkge1xyXG5cdFx0aWYgKHRoaXMuaXNGcm96ZW4oKSkge1xyXG5cdFx0XHQtLXRoaXMuX2ZyZWV6ZV9jb3VudGVyO1xyXG5cclxuXHRcdFx0aWYgKCF0aGlzLmlzRnJvemVuKCkpIHtcclxuXHRcdFx0XHR0aGlzLnRyaWdnZXIoT1dlYlZpZXcuRVZUX1ZJRVdfVU5GUkVFWkUpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHRkaWFsb2coZGlhbG9nOiB0Vmlld0RpYWxvZyB8IHRDb21SZXNwb25zZSkge1xyXG5cdFx0bGV0IGQgPSBkaWFsb2c7XHJcblxyXG5cdFx0aWYgKChkIGFzIHRDb21SZXNwb25zZSkuZXJyb3IpIHtcclxuXHRcdFx0ZCA9IHtcclxuXHRcdFx0XHRcInR5cGVcIjogKGQgYXMgdENvbVJlc3BvbnNlKS5lcnJvciA/IFwiZXJyb3JcIiA6IFwiZG9uZVwiLFxyXG5cdFx0XHRcdFwidGV4dFwiOiAoZCBhcyB0Q29tUmVzcG9uc2UpLm1zZyxcclxuXHRcdFx0XHRcImRhdGFcIjogZC5kYXRhIHx8IHt9XHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHQvLyBjb25zb2xlLmVycm9yKFwiW09XZWJWaWV3XSBwbGVhc2UgdXNlIG5ldyBkaWFsb2cgbW9kZSAtPiBcIiwgZCwgXCJpbnN0ZWFkIG9mIC0+XCIsIGRpYWxvZyk7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy50cmlnZ2VyKE9XZWJWaWV3LkVWVF9WSUVXX0RJQUxPRywgW2RdKTtcclxuXHR9XHJcbn0iXX0=