import OWebEvent from "./OWebEvent";
import Utils from "./utils/Utils";
export default class OWebView extends OWebEvent {
    constructor() {
        super();
        this._freeze_counter = 0;
        console.log("[OWebView] ready!");
    }
    /**
     * Check if the view is frozen.
     */
    isFrozen() {
        return Boolean(this._freeze_counter);
    }
    /**
     * To freeze the view.
     */
    freeze() {
        ++this._freeze_counter;
        if (this._freeze_counter === 1) {
            this.trigger(OWebView.EVT_VIEW_FREEZE);
        }
        return this;
    }
    /**
     * Unfreeze the view.
     */
    unfreeze() {
        if (this.isFrozen()) {
            --this._freeze_counter;
            if (!this.isFrozen()) {
                this.trigger(OWebView.EVT_VIEW_UNFREEZE);
            }
        }
        return this;
    }
    /**
     * Trigger dialog event to the view.
     * @param dialog
     * @param can_use_alert
     */
    dialog(dialog, can_use_alert = false) {
        let d = dialog;
        if (d.error) {
            d = {
                "type": d.error ? "error" : "done",
                "text": d.msg,
                "data": d.data || {}
            };
        }
        this.trigger(OWebView.EVT_VIEW_DIALOG, [d, can_use_alert]);
    }
    /**
     * Register freeze event handler.
     *
     * @param handler
     */
    onFreeze(handler) {
        return this.on(OWebView.EVT_VIEW_FREEZE, handler);
    }
    /**
     * Register unfreeze event handler.
     *
     * @param handler
     */
    onUnFreeze(handler) {
        return this.on(OWebView.EVT_VIEW_UNFREEZE, handler);
    }
    /**
     * Register dialog event handler.
     *
     * @param handler
     */
    onDialog(handler) {
        return this.on(OWebView.EVT_VIEW_DIALOG, handler);
    }
}
OWebView.SELF = Utils.id();
OWebView.EVT_VIEW_FREEZE = Utils.id();
OWebView.EVT_VIEW_UNFREEZE = Utils.id();
OWebView.EVT_VIEW_DIALOG = Utils.id();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYlZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvT1dlYlZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxTQUFTLE1BQU0sYUFBYSxDQUFDO0FBQ3BDLE9BQU8sS0FBSyxNQUFNLGVBQWUsQ0FBQztBQVFsQyxNQUFNLENBQUMsT0FBTyxlQUFnQixTQUFRLFNBQVM7SUFTOUM7UUFDQyxLQUFLLEVBQUUsQ0FBQztRQUhELG9CQUFlLEdBQVcsQ0FBQyxDQUFDO1FBSW5DLE9BQU8sQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxRQUFRO1FBQ1AsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRDs7T0FFRztJQUNILE1BQU07UUFDTCxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUM7UUFFdkIsSUFBSSxJQUFJLENBQUMsZUFBZSxLQUFLLENBQUMsRUFBRTtZQUMvQixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQztTQUN2QztRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQUVEOztPQUVHO0lBQ0gsUUFBUTtRQUNQLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ3BCLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQztZQUV2QixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxFQUFFO2dCQUNyQixJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO2FBQ3pDO1NBQ0Q7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLE1BQWtDLEVBQUUsZ0JBQXlCLEtBQUs7UUFDeEUsSUFBSSxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBRWYsSUFBSyxDQUFrQixDQUFDLEtBQUssRUFBRTtZQUM5QixDQUFDLEdBQUc7Z0JBQ0gsTUFBTSxFQUFHLENBQWtCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE1BQU07Z0JBQ3BELE1BQU0sRUFBRyxDQUFrQixDQUFDLEdBQUc7Z0JBQy9CLE1BQU0sRUFBRSxDQUFDLENBQUMsSUFBSSxJQUFJLEVBQUU7YUFDcEIsQ0FBQztTQUNGO1FBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxRQUFRLENBQUMsT0FBbUI7UUFDM0IsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxVQUFVLENBQUMsT0FBbUI7UUFDN0IsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxpQkFBaUIsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNyRCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILFFBQVEsQ0FBQyxPQUE4RDtRQUN0RSxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNuRCxDQUFDOztBQTNGZSxhQUFJLEdBQWdCLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQztBQUMvQix3QkFBZSxHQUFLLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQztBQUMvQiwwQkFBaUIsR0FBRyxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUM7QUFDL0Isd0JBQWUsR0FBSyxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2lDb21SZXNwb25zZX0gZnJvbSBcIi4vT1dlYkNvbVwiO1xyXG5pbXBvcnQgT1dlYkV2ZW50IGZyb20gXCIuL09XZWJFdmVudFwiO1xyXG5pbXBvcnQgVXRpbHMgZnJvbSBcIi4vdXRpbHMvVXRpbHNcIjtcclxuXHJcbmV4cG9ydCB0eXBlIHRWaWV3RGlhbG9nID0ge1xyXG5cdHR5cGU6IFwiaW5mb1wiIHwgXCJlcnJvclwiIHwgXCJkb25lXCIsXHJcblx0dGV4dDogc3RyaW5nLFxyXG5cdGRhdGE/OiB7fVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT1dlYlZpZXcgZXh0ZW5kcyBPV2ViRXZlbnQge1xyXG5cclxuXHRzdGF0aWMgcmVhZG9ubHkgU0VMRiAgICAgICAgICAgICAgPSBVdGlscy5pZCgpO1xyXG5cdHN0YXRpYyByZWFkb25seSBFVlRfVklFV19GUkVFWkUgICA9IFV0aWxzLmlkKCk7XHJcblx0c3RhdGljIHJlYWRvbmx5IEVWVF9WSUVXX1VORlJFRVpFID0gVXRpbHMuaWQoKTtcclxuXHRzdGF0aWMgcmVhZG9ubHkgRVZUX1ZJRVdfRElBTE9HICAgPSBVdGlscy5pZCgpO1xyXG5cclxuXHRwcml2YXRlIF9mcmVlemVfY291bnRlcjogbnVtYmVyID0gMDtcclxuXHJcblx0Y29uc3RydWN0b3IoKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdFx0Y29uc29sZS5sb2coXCJbT1dlYlZpZXddIHJlYWR5IVwiKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIENoZWNrIGlmIHRoZSB2aWV3IGlzIGZyb3plbi5cclxuXHQgKi9cclxuXHRpc0Zyb3plbigpOiBib29sZWFuIHtcclxuXHRcdHJldHVybiBCb29sZWFuKHRoaXMuX2ZyZWV6ZV9jb3VudGVyKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRvIGZyZWV6ZSB0aGUgdmlldy5cclxuXHQgKi9cclxuXHRmcmVlemUoKSB7XHJcblx0XHQrK3RoaXMuX2ZyZWV6ZV9jb3VudGVyO1xyXG5cclxuXHRcdGlmICh0aGlzLl9mcmVlemVfY291bnRlciA9PT0gMSkge1xyXG5cdFx0XHR0aGlzLnRyaWdnZXIoT1dlYlZpZXcuRVZUX1ZJRVdfRlJFRVpFKTtcclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFVuZnJlZXplIHRoZSB2aWV3LlxyXG5cdCAqL1xyXG5cdHVuZnJlZXplKCkge1xyXG5cdFx0aWYgKHRoaXMuaXNGcm96ZW4oKSkge1xyXG5cdFx0XHQtLXRoaXMuX2ZyZWV6ZV9jb3VudGVyO1xyXG5cclxuXHRcdFx0aWYgKCF0aGlzLmlzRnJvemVuKCkpIHtcclxuXHRcdFx0XHR0aGlzLnRyaWdnZXIoT1dlYlZpZXcuRVZUX1ZJRVdfVU5GUkVFWkUpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBUcmlnZ2VyIGRpYWxvZyBldmVudCB0byB0aGUgdmlldy5cclxuXHQgKiBAcGFyYW0gZGlhbG9nXHJcblx0ICogQHBhcmFtIGNhbl91c2VfYWxlcnRcclxuXHQgKi9cclxuXHRkaWFsb2coZGlhbG9nOiB0Vmlld0RpYWxvZyB8IGlDb21SZXNwb25zZSwgY2FuX3VzZV9hbGVydDogYm9vbGVhbiA9IGZhbHNlKSB7XHJcblx0XHRsZXQgZCA9IGRpYWxvZztcclxuXHJcblx0XHRpZiAoKGQgYXMgaUNvbVJlc3BvbnNlKS5lcnJvcikge1xyXG5cdFx0XHRkID0ge1xyXG5cdFx0XHRcdFwidHlwZVwiOiAoZCBhcyBpQ29tUmVzcG9uc2UpLmVycm9yID8gXCJlcnJvclwiIDogXCJkb25lXCIsXHJcblx0XHRcdFx0XCJ0ZXh0XCI6IChkIGFzIGlDb21SZXNwb25zZSkubXNnLFxyXG5cdFx0XHRcdFwiZGF0YVwiOiBkLmRhdGEgfHwge31cclxuXHRcdFx0fTtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLnRyaWdnZXIoT1dlYlZpZXcuRVZUX1ZJRVdfRElBTE9HLCBbZCwgY2FuX3VzZV9hbGVydF0pO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogUmVnaXN0ZXIgZnJlZXplIGV2ZW50IGhhbmRsZXIuXHJcblx0ICpcclxuXHQgKiBAcGFyYW0gaGFuZGxlclxyXG5cdCAqL1xyXG5cdG9uRnJlZXplKGhhbmRsZXI6ICgpID0+IHZvaWQpIHtcclxuXHRcdHJldHVybiB0aGlzLm9uKE9XZWJWaWV3LkVWVF9WSUVXX0ZSRUVaRSwgaGFuZGxlcik7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBSZWdpc3RlciB1bmZyZWV6ZSBldmVudCBoYW5kbGVyLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGhhbmRsZXJcclxuXHQgKi9cclxuXHRvblVuRnJlZXplKGhhbmRsZXI6ICgpID0+IHZvaWQpIHtcclxuXHRcdHJldHVybiB0aGlzLm9uKE9XZWJWaWV3LkVWVF9WSUVXX1VORlJFRVpFLCBoYW5kbGVyKTtcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFJlZ2lzdGVyIGRpYWxvZyBldmVudCBoYW5kbGVyLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGhhbmRsZXJcclxuXHQgKi9cclxuXHRvbkRpYWxvZyhoYW5kbGVyOiAoZGlhbG9nOiB0Vmlld0RpYWxvZywgY2FuX3VzZV9hbGVydDogYm9vbGVhbikgPT4gdm9pZCkge1xyXG5cdFx0cmV0dXJuIHRoaXMub24oT1dlYlZpZXcuRVZUX1ZJRVdfRElBTE9HLCBoYW5kbGVyKTtcclxuXHR9XHJcbn0iXX0=