import OWebEvent from "./OWebEvent";
import Utils from "./utils/Utils";
export default class OWebView extends OWebEvent {
    constructor() {
        super();
        this._freeze_counter = 0;
        console.log("[OWebView] ready!");
    }
    /**
     * Checks if the view is frozen.
     */
    isFrozen() {
        return Boolean(this._freeze_counter);
    }
    /**
     * To freeze the view.
     */
    freeze() {
        ++this._freeze_counter;
        if (this._freeze_counter === 1) {
            this.trigger(OWebView.EVT_VIEW_FREEZE);
        }
        return this;
    }
    /**
     * Unfreeze the view.
     */
    unfreeze() {
        if (this.isFrozen()) {
            --this._freeze_counter;
            if (!this.isFrozen()) {
                this.trigger(OWebView.EVT_VIEW_UNFREEZE);
            }
        }
        return this;
    }
    /**
     * Trigger dialog event to the view.
     * @param dialog
     * @param can_use_alert
     */
    dialog(dialog, can_use_alert = false) {
        let d = dialog;
        if (d.error) {
            d = {
                "type": d.error ? "error" : "done",
                "text": d.msg,
                "data": d.data || {}
            };
        }
        this.trigger(OWebView.EVT_VIEW_DIALOG, [d, can_use_alert]);
    }
    /**
     * Register freeze event handler.
     *
     * @param handler
     */
    onFreeze(handler) {
        return this.on(OWebView.EVT_VIEW_FREEZE, handler);
    }
    /**
     * Register unfreeze event handler.
     *
     * @param handler
     */
    onUnFreeze(handler) {
        return this.on(OWebView.EVT_VIEW_UNFREEZE, handler);
    }
    /**
     * Register dialog event handler.
     *
     * @param handler
     */
    onDialog(handler) {
        return this.on(OWebView.EVT_VIEW_DIALOG, handler);
    }
}
OWebView.SELF = Utils.id();
OWebView.EVT_VIEW_FREEZE = Utils.id();
OWebView.EVT_VIEW_UNFREEZE = Utils.id();
OWebView.EVT_VIEW_DIALOG = Utils.id();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYlZpZXcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvT1dlYlZpZXcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxTQUFTLE1BQU0sYUFBYSxDQUFDO0FBQ3BDLE9BQU8sS0FBSyxNQUFNLGVBQWUsQ0FBQztBQVFsQyxNQUFNLENBQUMsT0FBTyxPQUFPLFFBQVMsU0FBUSxTQUFTO0lBUzlDO1FBQ0MsS0FBSyxFQUFFLENBQUM7UUFIRCxvQkFBZSxHQUFXLENBQUMsQ0FBQztRQUluQyxPQUFPLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVEOztPQUVHO0lBQ0gsUUFBUTtRQUNQLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxNQUFNO1FBQ0wsRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDO1FBRXZCLElBQUksSUFBSSxDQUFDLGVBQWUsS0FBSyxDQUFDLEVBQUU7WUFDL0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUM7U0FDdkM7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFRDs7T0FFRztJQUNILFFBQVE7UUFDUCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUNwQixFQUFFLElBQUksQ0FBQyxlQUFlLENBQUM7WUFFdkIsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFBRTtnQkFDckIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsQ0FBQzthQUN6QztTQUNEO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxNQUFrQyxFQUFFLGdCQUF5QixLQUFLO1FBQ3hFLElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQztRQUVmLElBQUssQ0FBa0IsQ0FBQyxLQUFLLEVBQUU7WUFDOUIsQ0FBQyxHQUFHO2dCQUNILE1BQU0sRUFBRyxDQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNO2dCQUNwRCxNQUFNLEVBQUcsQ0FBa0IsQ0FBQyxHQUFHO2dCQUMvQixNQUFNLEVBQUUsQ0FBQyxDQUFDLElBQUksSUFBSSxFQUFFO2FBQ3BCLENBQUM7U0FDRjtRQUVELElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsUUFBUSxDQUFDLE9BQTZCO1FBQ3JDLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsVUFBVSxDQUFDLE9BQTZCO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsaUJBQWlCLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxRQUFRLENBQUMsT0FBMEU7UUFDbEYsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxlQUFlLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDbkQsQ0FBQzs7QUEzRmUsYUFBSSxHQUFnQixLQUFLLENBQUMsRUFBRSxFQUFFLENBQUM7QUFDL0Isd0JBQWUsR0FBSyxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUM7QUFDL0IsMEJBQWlCLEdBQUcsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDO0FBQy9CLHdCQUFlLEdBQUssS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtpQ29tUmVzcG9uc2V9IGZyb20gXCIuL09XZWJDb21cIjtcclxuaW1wb3J0IE9XZWJFdmVudCBmcm9tIFwiLi9PV2ViRXZlbnRcIjtcclxuaW1wb3J0IFV0aWxzIGZyb20gXCIuL3V0aWxzL1V0aWxzXCI7XHJcblxyXG5leHBvcnQgdHlwZSB0Vmlld0RpYWxvZyA9IHtcclxuXHR0eXBlOiBcImluZm9cIiB8IFwiZXJyb3JcIiB8IFwiZG9uZVwiLFxyXG5cdHRleHQ6IHN0cmluZyxcclxuXHRkYXRhPzoge31cclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9XZWJWaWV3IGV4dGVuZHMgT1dlYkV2ZW50IHtcclxuXHJcblx0c3RhdGljIHJlYWRvbmx5IFNFTEYgICAgICAgICAgICAgID0gVXRpbHMuaWQoKTtcclxuXHRzdGF0aWMgcmVhZG9ubHkgRVZUX1ZJRVdfRlJFRVpFICAgPSBVdGlscy5pZCgpO1xyXG5cdHN0YXRpYyByZWFkb25seSBFVlRfVklFV19VTkZSRUVaRSA9IFV0aWxzLmlkKCk7XHJcblx0c3RhdGljIHJlYWRvbmx5IEVWVF9WSUVXX0RJQUxPRyAgID0gVXRpbHMuaWQoKTtcclxuXHJcblx0cHJpdmF0ZSBfZnJlZXplX2NvdW50ZXI6IG51bWJlciA9IDA7XHJcblxyXG5cdGNvbnN0cnVjdG9yKCkge1xyXG5cdFx0c3VwZXIoKTtcclxuXHRcdGNvbnNvbGUubG9nKFwiW09XZWJWaWV3XSByZWFkeSFcIik7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBDaGVja3MgaWYgdGhlIHZpZXcgaXMgZnJvemVuLlxyXG5cdCAqL1xyXG5cdGlzRnJvemVuKCk6IGJvb2xlYW4ge1xyXG5cdFx0cmV0dXJuIEJvb2xlYW4odGhpcy5fZnJlZXplX2NvdW50ZXIpO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogVG8gZnJlZXplIHRoZSB2aWV3LlxyXG5cdCAqL1xyXG5cdGZyZWV6ZSgpIHtcclxuXHRcdCsrdGhpcy5fZnJlZXplX2NvdW50ZXI7XHJcblxyXG5cdFx0aWYgKHRoaXMuX2ZyZWV6ZV9jb3VudGVyID09PSAxKSB7XHJcblx0XHRcdHRoaXMudHJpZ2dlcihPV2ViVmlldy5FVlRfVklFV19GUkVFWkUpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiB0aGlzO1xyXG5cdH1cclxuXHJcblx0LyoqXHJcblx0ICogVW5mcmVlemUgdGhlIHZpZXcuXHJcblx0ICovXHJcblx0dW5mcmVlemUoKSB7XHJcblx0XHRpZiAodGhpcy5pc0Zyb3plbigpKSB7XHJcblx0XHRcdC0tdGhpcy5fZnJlZXplX2NvdW50ZXI7XHJcblxyXG5cdFx0XHRpZiAoIXRoaXMuaXNGcm96ZW4oKSkge1xyXG5cdFx0XHRcdHRoaXMudHJpZ2dlcihPV2ViVmlldy5FVlRfVklFV19VTkZSRUVaRSk7XHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHJcblx0XHRyZXR1cm4gdGhpcztcclxuXHR9XHJcblxyXG5cdC8qKlxyXG5cdCAqIFRyaWdnZXIgZGlhbG9nIGV2ZW50IHRvIHRoZSB2aWV3LlxyXG5cdCAqIEBwYXJhbSBkaWFsb2dcclxuXHQgKiBAcGFyYW0gY2FuX3VzZV9hbGVydFxyXG5cdCAqL1xyXG5cdGRpYWxvZyhkaWFsb2c6IHRWaWV3RGlhbG9nIHwgaUNvbVJlc3BvbnNlLCBjYW5fdXNlX2FsZXJ0OiBib29sZWFuID0gZmFsc2UpIHtcclxuXHRcdGxldCBkID0gZGlhbG9nO1xyXG5cclxuXHRcdGlmICgoZCBhcyBpQ29tUmVzcG9uc2UpLmVycm9yKSB7XHJcblx0XHRcdGQgPSB7XHJcblx0XHRcdFx0XCJ0eXBlXCI6IChkIGFzIGlDb21SZXNwb25zZSkuZXJyb3IgPyBcImVycm9yXCIgOiBcImRvbmVcIixcclxuXHRcdFx0XHRcInRleHRcIjogKGQgYXMgaUNvbVJlc3BvbnNlKS5tc2csXHJcblx0XHRcdFx0XCJkYXRhXCI6IGQuZGF0YSB8fCB7fVxyXG5cdFx0XHR9O1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMudHJpZ2dlcihPV2ViVmlldy5FVlRfVklFV19ESUFMT0csIFtkLCBjYW5fdXNlX2FsZXJ0XSk7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBSZWdpc3RlciBmcmVlemUgZXZlbnQgaGFuZGxlci5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBoYW5kbGVyXHJcblx0ICovXHJcblx0b25GcmVlemUoaGFuZGxlcjogKHRoaXM6IHRoaXMpID0+IHZvaWQpIHtcclxuXHRcdHJldHVybiB0aGlzLm9uKE9XZWJWaWV3LkVWVF9WSUVXX0ZSRUVaRSwgaGFuZGxlcik7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBSZWdpc3RlciB1bmZyZWV6ZSBldmVudCBoYW5kbGVyLlxyXG5cdCAqXHJcblx0ICogQHBhcmFtIGhhbmRsZXJcclxuXHQgKi9cclxuXHRvblVuRnJlZXplKGhhbmRsZXI6ICh0aGlzOiB0aGlzKSA9PiB2b2lkKSB7XHJcblx0XHRyZXR1cm4gdGhpcy5vbihPV2ViVmlldy5FVlRfVklFV19VTkZSRUVaRSwgaGFuZGxlcik7XHJcblx0fVxyXG5cclxuXHQvKipcclxuXHQgKiBSZWdpc3RlciBkaWFsb2cgZXZlbnQgaGFuZGxlci5cclxuXHQgKlxyXG5cdCAqIEBwYXJhbSBoYW5kbGVyXHJcblx0ICovXHJcblx0b25EaWFsb2coaGFuZGxlcjogKHRoaXM6IHRoaXMsIGRpYWxvZzogdFZpZXdEaWFsb2csIGNhbl91c2VfYWxlcnQ6IGJvb2xlYW4pID0+IHZvaWQpIHtcclxuXHRcdHJldHVybiB0aGlzLm9uKE9XZWJWaWV3LkVWVF9WSUVXX0RJQUxPRywgaGFuZGxlcik7XHJcblx0fVxyXG59Il19