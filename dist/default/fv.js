import OWebFormValidator from '../OWebFormValidator';
import OWebDate from '../plugins/OWebDate';
import Utils from '../utils/Utils';
import OWebInput from 'oweb-tel-input';
OWebFormValidator.addFieldValidators({
    code: (value, name, fv) => {
        let codeReg = new RegExp(fv.getConfig('OZ_CODE_REG'));
        fv.assert(codeReg.test(value), 'OZ_AUTH_CODE_INVALID');
    },
    uname: (value, name, fv) => {
        value = value.replace(/\s+/g, ' ').trim();
        fv.assert(value.length >= fv.getConfig('OZ_USER_NAME_MIN_LENGTH'), 'OZ_FIELD_USER_NAME_TOO_SHORT')
            .assert(value.length <= fv.getConfig('OZ_USER_NAME_MAX_LENGTH'), 'OZ_FIELD_USER_NAME_TOO_LONG')
            .setField(name, value);
    },
    login_pass: (value, name, fv) => {
        let pass = value, min = fv.getConfig('OZ_PASS_MIN_LENGTH'), max = fv.getConfig('OZ_PASS_MAX_LENGTH');
        fv.assert(pass.length >= min, 'OZ_FIELD_PASS_INVALID').assert(pass.length <= max, 'OZ_FIELD_PASS_INVALID');
    },
    cpass: (value, name, fv) => {
        let pass = value, min = fv.getConfig('OZ_PASS_MIN_LENGTH'), max = fv.getConfig('OZ_PASS_MAX_LENGTH');
        fv.assert(pass.length >= min, 'OZ_FIELD_PASS_INVALID').assert(pass.length <= max, 'OZ_FIELD_PASS_INVALID');
    },
    pass: (value, name, fv) => {
        let pass = value, min = fv.getConfig('OZ_PASS_MIN_LENGTH'), max = fv.getConfig('OZ_PASS_MAX_LENGTH');
        fv.assert(pass.length >= min, 'OZ_FIELD_PASS_TOO_SHORT', {
            min: min,
            max: max,
        }).assert(pass.length <= max, 'OZ_FIELD_PASS_TOO_LONG', {
            min: min,
            max: max,
        });
    },
    vpass: (value, name, fv) => {
        fv.assert(value === fv.getField('pass'), 'OZ_FIELD_PASS_AND_VPASS_NOT_EQUAL');
    },
    birth_date: (value, name, fv) => {
        let od = new OWebDate(fv.getAppContext(), value), date = od.describe(), min_age = fv.getConfig('OZ_USER_MIN_AGE'), max_age = fv.getConfig('OZ_USER_MAX_AGE'), isValid = date &&
            Utils.isValidAge(date.d, parseInt(date.mm), date.Y, min_age, max_age);
        fv.assert(isValid, 'OZ_FIELD_BIRTH_DATE_INVALID', {
            input: value,
            min: min_age,
            max: max_age,
        });
        date && fv.setField(name, `${date.Y}-${date.mm}-${date.d}`);
    },
    gender: (value, name, fv) => {
        let genders = fv.getConfig('OZ_USER_ALLOWED_GENDERS');
        fv.assert(genders.indexOf(value) >= 0, 'OZ_FIELD_GENDER_INVALID');
    },
    phone: (value, name, fv) => {
        fv.assert(OWebInput.isPhoneNumberPossible(value), 'OZ_FIELD_PHONE_INVALID');
        let t = new OWebInput({ number: value });
        let phone = t.getInput();
        let cc2 = t.getCurrentCountry().cc2;
        fv.setField(name, phone.replace(/[ -]/g, ''));
        // we set only if it is not already done
        // we may have multiple phone field or a cc2 field
        if (!fv.getField('cc2')) {
            fv.setField('cc2', cc2);
        }
    },
    email: (value, name, fv) => {
        /**
         * Email matching regex
         *
         * source: http://www.w3.org/TR/html5/forms.html#valid-e-mail-address
         *        - TLD not required
         *            /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/
         *        - must have TLD
         *            /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/
         */
        let emailReg = /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+$/;
        let email = value.replace(/\s/g, ' ').trim();
        fv.assert(emailReg.test(email), 'OZ_FIELD_EMAIL_INVALID').setField(name, email);
    },
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnYuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZGVmYXVsdC9mdi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLGlCQUFpQixNQUFNLHNCQUFzQixDQUFDO0FBQ3JELE9BQU8sUUFBUSxNQUFNLHFCQUFxQixDQUFDO0FBQzNDLE9BQU8sS0FBSyxNQUFNLGdCQUFnQixDQUFDO0FBQ25DLE9BQU8sU0FBUyxNQUFNLGdCQUFnQixDQUFDO0FBRXZDLGlCQUFpQixDQUFDLGtCQUFrQixDQUFDO0lBQ3BDLElBQUksRUFBRSxDQUFDLEtBQVUsRUFBRSxJQUFZLEVBQUUsRUFBcUIsRUFBRSxFQUFFO1FBQ3pELElBQUksT0FBTyxHQUFHLElBQUksTUFBTSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztRQUN0RCxFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBQ0QsS0FBSyxFQUFFLENBQUMsS0FBVSxFQUFFLElBQVksRUFBRSxFQUFxQixFQUFFLEVBQUU7UUFDMUQsS0FBSyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1FBRTFDLEVBQUUsQ0FBQyxNQUFNLENBQ1IsS0FBSyxDQUFDLE1BQU0sSUFBSSxFQUFFLENBQUMsU0FBUyxDQUFDLHlCQUF5QixDQUFDLEVBQ3ZELDhCQUE4QixDQUM5QjthQUNDLE1BQU0sQ0FDTixLQUFLLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQyxTQUFTLENBQUMseUJBQXlCLENBQUMsRUFDdkQsNkJBQTZCLENBQzdCO2FBQ0EsUUFBUSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBQ0QsVUFBVSxFQUFFLENBQUMsS0FBVSxFQUFFLElBQVksRUFBRSxFQUFx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SSxDQUFDO1FBQ3RKLElBQUksS0FBSyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO1FBRTdDLEVBQUUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSx3QkFBd0IsQ0FBQyxDQUFDLFFBQVEsQ0FDakUsSUFBSSxFQUNKLEtBQUssQ0FDTCxDQUFDO0lBQ0gsQ0FBQztDQUNELENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBPV2ViRm9ybVZhbGlkYXRvciBmcm9tICcuLi9PV2ViRm9ybVZhbGlkYXRvcic7XG5pbXBvcnQgT1dlYkRhdGUgZnJvbSAnLi4vcGx1Z2lucy9PV2ViRGF0ZSc7XG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vdXRpbHMvVXRpbHMnO1xuaW1wb3J0IE9XZWJJbnB1dCBmcm9tICdvd2ViLXRlbC1pbnB1dCc7XG5cbk9XZWJGb3JtVmFsaWRhdG9yLmFkZEZpZWxkVmFsaWRhdG9ycyh7XG5cdGNvZGU6ICh2YWx1ZTogYW55LCBuYW1lOiBzdHJpbmcsIGZ2OiBPV2ViRm9ybVZhbGlkYXRvcikgPT4ge1xuXHRcdGxldCBjb2RlUmVnID0gbmV3IFJlZ0V4cChmdi5nZXRDb25maWcoJ09aX0NPREVfUkVHJykpO1xuXHRcdGZ2LmFzc2VydChjb2RlUmVnLnRlc3QodmFsdWUpLCAnT1pfQVVUSF9DT0RFX0lOVkFMSUQnKTtcblx0fSxcblx0dW5hbWU6ICh2YWx1ZTogYW55LCBuYW1lOiBzdHJpbmcsIGZ2OiBPV2ViRm9ybVZhbGlkYXRvcikgPT4ge1xuXHRcdHZhbHVlID0gdmFsdWUucmVwbGFjZSgvXFxzKy9nLCAnICcpLnRyaW0oKTtcblxuXHRcdGZ2LmFzc2VydChcblx0XHRcdHZhbHVlLmxlbmd0aCA+PSBmdi5nZXRDb25maWcoJ09aX1VTRVJfTkFNRV9NSU5fTEVOR1RIJyksXG5cdFx0XHQnT1pfRklFTERfVVNFUl9OQU1FX1RPT19TSE9SVCdcblx0XHQpXG5cdFx0XHQuYXNzZXJ0KFxuXHRcdFx0XHR2YWx1ZS5sZW5ndGggPD0gZnYuZ2V0Q29uZmlnKCdPWl9VU0VSX05BTUVfTUFYX0xFTkdUSCcpLFxuXHRcdFx0XHQnT1pfRklFTERfVVNFUl9OQU1FX1RPT19MT05HJ1xuXHRcdFx0KVxuXHRcdFx0LnNldEZpZWxkKG5hbWUsIHZhbHVlKTtcblx0fSxcblx0bG9naW5fcGFzczogKHZhbHVlOiBhbnksIG5hbWU6IHN0cmluZywgZnY6IE9XZWJGb3JtVmFsaWRhdG9yKSA9PiB7XG5cdFx0bGV0IHBhc3MgPSB2YWx1ZSxcblx0XHRcdG1pbiA9IGZ2LmdldENvbmZpZygnT1pfUEFTU19NSU5fTEVOR1RIJyksXG5cdFx0XHRtYXggPSBmdi5nZXRDb25maWcoJ09aX1BBU1NfTUFYX0xFTkdUSCcpO1xuXHRcdGZ2LmFzc2VydChwYXNzLmxlbmd0aCA+PSBtaW4sICdPWl9GSUVMRF9QQVNTX0lOVkFMSUQnKS5hc3NlcnQoXG5cdFx0XHRwYXNzLmxlbmd0aCA8PSBtYXgsXG5cdFx0XHQnT1pfRklFTERfUEFTU19JTlZBTElEJ1xuXHRcdCk7XG5cdH0sXG5cdGNwYXNzOiAodmFsdWU6IGFueSwgbmFtZTogc3RyaW5nLCBmdjogT1dlYkZvcm1WYWxpZGF0b3IpID0+IHtcblx0XHRsZXQgcGFzcyA9IHZhbHVlLFxuXHRcdFx0bWluID0gZnYuZ2V0Q29uZmlnKCdPWl9QQVNTX01JTl9MRU5HVEgnKSxcblx0XHRcdG1heCA9IGZ2LmdldENvbmZpZygnT1pfUEFTU19NQVhfTEVOR1RIJyk7XG5cdFx0ZnYuYXNzZXJ0KHBhc3MubGVuZ3RoID49IG1pbiwgJ09aX0ZJRUxEX1BBU1NfSU5WQUxJRCcpLmFzc2VydChcblx0XHRcdHBhc3MubGVuZ3RoIDw9IG1heCxcblx0XHRcdCdPWl9GSUVMRF9QQVNTX0lOVkFMSUQnXG5cdFx0KTtcblx0fSxcblx0cGFzczogKHZhbHVlOiBhbnksIG5hbWU6IHN0cmluZywgZnY6IE9XZWJGb3JtVmFsaWRhdG9yKSA9PiB7XG5cdFx0bGV0IHBhc3MgPSB2YWx1ZSxcblx0XHRcdG1pbiA9IGZ2LmdldENvbmZpZygnT1pfUEFTU19NSU5fTEVOR1RIJyksXG5cdFx0XHRtYXggPSBmdi5nZXRDb25maWcoJ09aX1BBU1NfTUFYX0xFTkdUSCcpO1xuXHRcdGZ2LmFzc2VydChwYXNzLmxlbmd0aCA+PSBtaW4sICdPWl9GSUVMRF9QQVNTX1RPT19TSE9SVCcsIHtcblx0XHRcdG1pbjogbWluLFxuXHRcdFx0bWF4OiBtYXgsXG5cdFx0fSkuYXNzZXJ0KHBhc3MubGVuZ3RoIDw9IG1heCwgJ09aX0ZJRUxEX1BBU1NfVE9PX0xPTkcnLCB7XG5cdFx0XHRtaW46IG1pbixcblx0XHRcdG1heDogbWF4LFxuXHRcdH0pO1xuXHR9LFxuXHR2cGFzczogKHZhbHVlOiBhbnksIG5hbWU6IHN0cmluZywgZnY6IE9XZWJGb3JtVmFsaWRhdG9yKSA9PiB7XG5cdFx0ZnYuYXNzZXJ0KFxuXHRcdFx0dmFsdWUgPT09IGZ2LmdldEZpZWxkKCdwYXNzJyksXG5cdFx0XHQnT1pfRklFTERfUEFTU19BTkRfVlBBU1NfTk9UX0VRVUFMJ1xuXHRcdCk7XG5cdH0sXG5cdGJpcnRoX2RhdGU6ICh2YWx1ZTogYW55LCBuYW1lOiBzdHJpbmcsIGZ2OiBPV2ViRm9ybVZhbGlkYXRvcikgPT4ge1xuXHRcdGxldCBvZCA9IG5ldyBPV2ViRGF0ZShmdi5nZXRBcHBDb250ZXh0KCksIHZhbHVlKSxcblx0XHRcdGRhdGUgPSBvZC5kZXNjcmliZSgpLFxuXHRcdFx0bWluX2FnZSA9IGZ2LmdldENvbmZpZygnT1pfVVNFUl9NSU5fQUdFJyksXG5cdFx0XHRtYXhfYWdlID0gZnYuZ2V0Q29uZmlnKCdPWl9VU0VSX01BWF9BR0UnKSxcblx0XHRcdGlzVmFsaWQgPVxuXHRcdFx0XHRkYXRlICYmXG5cdFx0XHRcdFV0aWxzLmlzVmFsaWRBZ2UoXG5cdFx0XHRcdFx0ZGF0ZS5kLFxuXHRcdFx0XHRcdHBhcnNlSW50KGRhdGUubW0pLFxuXHRcdFx0XHRcdGRhdGUuWSxcblx0XHRcdFx0XHRtaW5fYWdlLFxuXHRcdFx0XHRcdG1heF9hZ2Vcblx0XHRcdFx0KTtcblxuXHRcdGZ2LmFzc2VydChpc1ZhbGlkLCAnT1pfRklFTERfQklSVEhfREFURV9JTlZBTElEJywge1xuXHRcdFx0aW5wdXQ6IHZhbHVlLFxuXHRcdFx0bWluOiBtaW5fYWdlLFxuXHRcdFx0bWF4OiBtYXhfYWdlLFxuXHRcdH0pO1xuXG5cdFx0ZGF0ZSAmJiBmdi5zZXRGaWVsZChuYW1lLCBgJHtkYXRlLll9LSR7ZGF0ZS5tbX0tJHtkYXRlLmR9YCk7XG5cdH0sXG5cdGdlbmRlcjogKHZhbHVlOiBhbnksIG5hbWU6IHN0cmluZywgZnY6IE9XZWJGb3JtVmFsaWRhdG9yKSA9PiB7XG5cdFx0bGV0IGdlbmRlcnMgPSBmdi5nZXRDb25maWcoJ09aX1VTRVJfQUxMT1dFRF9HRU5ERVJTJyk7XG5cdFx0ZnYuYXNzZXJ0KGdlbmRlcnMuaW5kZXhPZih2YWx1ZSkgPj0gMCwgJ09aX0ZJRUxEX0dFTkRFUl9JTlZBTElEJyk7XG5cdH0sXG5cdHBob25lOiAodmFsdWU6IGFueSwgbmFtZTogc3RyaW5nLCBmdjogT1dlYkZvcm1WYWxpZGF0b3IpID0+IHtcblx0XHRmdi5hc3NlcnQoXG5cdFx0XHRPV2ViSW5wdXQuaXNQaG9uZU51bWJlclBvc3NpYmxlKHZhbHVlKSxcblx0XHRcdCdPWl9GSUVMRF9QSE9ORV9JTlZBTElEJ1xuXHRcdCk7XG5cblx0XHRsZXQgdCA9IG5ldyBPV2ViSW5wdXQoeyBudW1iZXI6IHZhbHVlIH0pO1xuXHRcdGxldCBwaG9uZSA9IHQuZ2V0SW5wdXQoKTtcblx0XHRsZXQgY2MyID0gdC5nZXRDdXJyZW50Q291bnRyeSgpLmNjMjtcblxuXHRcdGZ2LnNldEZpZWxkKG5hbWUsIHBob25lLnJlcGxhY2UoL1sgLV0vZywgJycpKTtcblxuXHRcdC8vIHdlIHNldCBvbmx5IGlmIGl0IGlzIG5vdCBhbHJlYWR5IGRvbmVcblx0XHQvLyB3ZSBtYXkgaGF2ZSBtdWx0aXBsZSBwaG9uZSBmaWVsZCBvciBhIGNjMiBmaWVsZFxuXHRcdGlmICghZnYuZ2V0RmllbGQoJ2NjMicpKSB7XG5cdFx0XHRmdi5zZXRGaWVsZCgnY2MyJywgY2MyKTtcblx0XHR9XG5cdH0sXG5cdGVtYWlsOiAodmFsdWU6IGFueSwgbmFtZTogc3RyaW5nLCBmdjogT1dlYkZvcm1WYWxpZGF0b3IpID0+IHtcblx0XHQvKipcblx0XHQgKiBFbWFpbCBtYXRjaGluZyByZWdleFxuXHRcdCAqXG5cdFx0ICogc291cmNlOiBodHRwOi8vd3d3LnczLm9yZy9UUi9odG1sNS9mb3Jtcy5odG1sI3ZhbGlkLWUtbWFpbC1hZGRyZXNzXG5cdFx0ICogICAgICAgIC0gVExEIG5vdCByZXF1aXJlZFxuXHRcdCAqICAgICAgICAgICAgL15bYS16QS1aMC05LiEjJCUmJyorLz0/Xl9ge3x9fi1dK0BbYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8oPzpcXC5bYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8pKiQvXG5cdFx0ICogICAgICAgIC0gbXVzdCBoYXZlIFRMRFxuXHRcdCAqICAgICAgICAgICAgL15bYS16QS1aMC05LiEjJCUmJyorLz0/Xl9ge3x9fi1dK0BbYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8oPzpcXC5bYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8pKyQvXG5cdFx0ICovXG5cdFx0bGV0IGVtYWlsUmVnID0gL15bYS16QS1aMC05LiEjJCUmJyorLz0/Xl9ge3x9fi1dK0BbYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8oPzpcXC5bYS16QS1aMC05XSg/OlthLXpBLVowLTktXXswLDYxfVthLXpBLVowLTldKT8pKyQvO1xuXHRcdGxldCBlbWFpbCA9IHZhbHVlLnJlcGxhY2UoL1xccy9nLCAnICcpLnRyaW0oKTtcblxuXHRcdGZ2LmFzc2VydChlbWFpbFJlZy50ZXN0KGVtYWlsKSwgJ09aX0ZJRUxEX0VNQUlMX0lOVkFMSUQnKS5zZXRGaWVsZChcblx0XHRcdG5hbWUsXG5cdFx0XHRlbWFpbFxuXHRcdCk7XG5cdH0sXG59KTtcbiJdfQ==