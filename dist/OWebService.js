import { cleanRequestOptions, } from './ozone';
export default class OWebService {
    _appContext;
    service;
    constructor(_appContext, service) {
        this._appContext = _appContext;
        this.service = service;
    }
    getName() {
        return this.service;
    }
    addRequest(formData) {
        const oz = this._appContext.oz, url = oz.getServiceURI(this.service);
        return oz.request(url, {
            method: 'POST',
            body: formData,
        });
    }
    deleteRequest(id) {
        const oz = this._appContext.oz, url = oz.getItemURI(this.service, id);
        return oz.request(url, {
            method: 'DELETE',
        });
    }
    updateRequest(id, formData) {
        const oz = this._appContext.oz, url = oz.getItemURI(this.service, id);
        return oz.request(url, {
            method: 'PATCH',
            body: formData,
        });
    }
    deleteAllRequest(options) {
        const oz = this._appContext.oz, url = oz.getServiceURI(this.service);
        return oz.request(url, {
            method: 'DELETE',
            params: cleanRequestOptions(options),
        });
    }
    updateAllRequest(options) {
        const oz = this._appContext.oz, url = oz.getServiceURI(this.service);
        return oz.request(url, {
            method: 'PATCH',
            body: cleanRequestOptions(options),
        });
    }
    getRequest(id, relations = '') {
        const oz = this._appContext.oz, url = oz.getItemURI(this.service, id), options = {};
        if (relations.length) {
            options.relations = relations;
        }
        return oz.request(url, {
            method: 'GET',
            params: cleanRequestOptions(options),
        });
    }
    getAllRequest(options) {
        const oz = this._appContext.oz, url = oz.getServiceURI(this.service);
        return oz.request(url, {
            method: 'GET',
            params: cleanRequestOptions(options),
        });
    }
    getRelationRequest(id, relation) {
        const oz = this._appContext.oz, url = oz.getItemRelationURI(this.service, id, relation);
        return oz.request(url, {
            method: 'GET',
        });
    }
    getRelationItemsRequest(id, relation, options) {
        const oz = this._appContext.oz, url = oz.getItemRelationURI(this.service, id, relation);
        return oz.request(url, {
            method: 'GET',
            params: cleanRequestOptions(options),
        });
    }
}
//# sourceMappingURL=data:application/json;base64,