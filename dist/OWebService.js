import { cleanRequestOptions, } from './ozone';
export default class OWebService {
    _appContext;
    name;
    /**
     * OWebService constructor.
     *
     * @param _appContext The app context.
     * @param name The service name.
     */
    constructor(_appContext, name) {
        this._appContext = _appContext;
        this.name = name;
    }
    /**
     * Make request to a specific endpoint using this service as base url.
     */
    request(path, options) {
        const oz = this._appContext.oz, url = oz.toAbsoluteURI(this.name, path);
        return oz.request(url, options);
    }
    /**
     * Returns the service name.
     */
    getName() {
        return this.name;
    }
    /**
     * Adds an entity.
     *
     * @param formData
     */
    addItem(formData) {
        const oz = this._appContext.oz, url = oz.getServiceURI(this.name);
        return oz.request(url, {
            method: 'POST',
            body: formData,
        });
    }
    /**
     * Deletes the entity with the given id.
     *
     * @param id The entity id.
     */
    deleteItem(id) {
        const oz = this._appContext.oz, url = oz.getItemURI(this.name, id);
        return oz.request(url, {
            method: 'DELETE',
        });
    }
    /**
     * Updates the entity with the given id.
     *
     * @param id The entity id.
     * @param formData
     */
    updateItem(id, formData) {
        const oz = this._appContext.oz, url = oz.getItemURI(this.name, id);
        return oz.request(url, {
            method: 'PATCH',
            body: formData,
        });
    }
    /**
     * Deletes all entities.
     *
     * @param options
     */
    deleteItems(options) {
        const oz = this._appContext.oz, url = oz.getServiceURI(this.name);
        return oz.request(url, {
            method: 'DELETE',
            params: cleanRequestOptions(options),
        });
    }
    /**
     * Updates all entities.
     *
     * @param options
     */
    updateItems(options) {
        const oz = this._appContext.oz, url = oz.getServiceURI(this.name);
        return oz.request(url, {
            method: 'PATCH',
            body: cleanRequestOptions(options),
        });
    }
    /**
     * Gets an entity with the given id.
     *
     * All requested relations names are joined with `|`.
     * example: `relation1|relation2|relationX`.
     *
     * @param id The entity id.
     * @param relations The relations string.
     */
    getItem(id, relations = '') {
        const oz = this._appContext.oz, url = oz.getItemURI(this.name, id), options = {};
        if (relations.length) {
            options.relations = relations;
        }
        return oz.request(url, {
            method: 'GET',
            params: cleanRequestOptions(options),
        });
    }
    /**
     * Gets all entities.
     *
     * @param options
     */
    getItems(options) {
        const oz = this._appContext.oz, url = oz.getServiceURI(this.name);
        return oz.request(url, {
            method: 'GET',
            params: cleanRequestOptions(options),
        });
    }
    /**
     * Gets a single item relation for a given entity id.
     *
     * @param id The entity id.
     * @param relation The relation name
     */
    getRelationItem(id, relation) {
        const oz = this._appContext.oz, url = oz.getItemRelationURI(this.name, id, relation);
        return oz.request(url, {
            method: 'GET',
        });
    }
    /**
     * Gets multiple items relation for a given entity id.
     *
     * @param id The entity id.
     * @param relation The relation name.
     * @param options
     */
    getRelationItems(id, relation, options) {
        const oz = this._appContext.oz, url = oz.getItemRelationURI(this.name, id, relation);
        return oz.request(url, {
            method: 'GET',
            params: cleanRequestOptions(options),
        });
    }
}
//# sourceMappingURL=data:application/json;base64,