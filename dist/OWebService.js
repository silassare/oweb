import OWebKeyStorage from "./OWebKeyStorage";
import Utils from "./utils/Utils";
const uri_service = ":api_url/:service_name", uri_entity = ":api_url/:service_name/:id", uri_entity_relation = ":api_url/:service_name/:id/:relation";
let toKey = function (query_params) {
    let key = JSON.stringify(query_params).replace(/[^a-z0-9]/ig, "");
    return key.length ? key : "no-params";
};
export default class OWebService {
    constructor(app_context, service_name) {
        this.app_context = app_context;
        let s_url = app_context.configs.get("OZ_API_BASE_URL")
            .replace(/\/$/g, "");
        this._base_data = { api_url: s_url, service_name: service_name };
        this._key_store = new OWebKeyStorage(app_context, "services:" + service_name);
    }
    getName() {
        return this._base_data.service_name;
    }
    getServiceURI() {
        return Utils.stringKeyReplace(uri_service, this._base_data);
    }
    getItemURI(id) {
        let data = Utils.assign({ id: id }, this._base_data);
        return Utils.stringKeyReplace(uri_entity, data);
    }
    getItemRelationURI(id, relation) {
        let data = Utils.assign({ id: id, relation: relation }, this._base_data);
        return Utils.stringKeyReplace(uri_entity_relation, data);
    }
    getCacheManager() {
        return this._key_store;
    }
    add(formData, success, fail, freeze = false) {
        let url = this.getServiceURI();
        return this.app_context.request("POST", url, formData, (response) => {
            success(response);
        }, fail, freeze);
    }
    delete(id, success, fail, freeze = false) {
        let m = this, url = this.getItemURI(id);
        return this.app_context.request("DELETE", url, null, (response) => {
            m.getCacheManager().removeItem(id);
            success(response);
        }, fail, freeze);
    }
    update(id, formData, success, fail, freeze = false) {
        let url = this.getItemURI(id);
        return this.app_context.request("PATCH", url, formData, (response) => {
            success(response);
        }, fail, freeze);
    }
    deleteAll(options, success, fail, freeze = false) {
        let url = this.getServiceURI(), filters = options.filters, request_data = {};
        if (typeof options["max"] === "number") { // will be ignored by O'Zone
            request_data["max"] = options["max"];
        }
        if (typeof options["page"] === "number") { // will be ignored by O'Zone
            request_data["page"] = options["page"];
        }
        if (Utils.isPlainObject(filters)) {
            request_data["filters"] = filters;
        }
        return this.app_context.request("DELETE", url, request_data, (response) => {
            success(response);
        }, fail, freeze);
    }
    updateAll(options, formData, success, fail, freeze = false) {
        let url = this.getServiceURI(), filters = options.filters, request_data = { data: formData };
        if (typeof options["max"] === "number") { // will be ignored by O'Zone
            request_data["max"] = options["max"];
        }
        if (typeof options["page"] === "number") { // will be ignored by O'Zone
            request_data["page"] = options["page"];
        }
        if (Utils.isPlainObject(filters)) {
            request_data["filters"] = filters;
        }
        return this.app_context.request("PATCH", url, request_data, (response) => {
            success(response);
        }, fail, freeze);
    }
    get(id, relations = "", success, fail, freeze = false, load_cache_first = false) {
        let m = this, url = this.getItemURI(id), cache_id = id, data = {}, __cached;
        if (relations.length) {
            data.relations = relations;
        }
        if (load_cache_first) {
            __cached = m.getCacheManager().getItem(cache_id);
            if (__cached) {
                success(__cached, true);
                freeze = false;
            }
        }
        return this.app_context.request("GET", url, data, (response) => {
            m.getCacheManager().setItem(id, response);
            success(response, false);
        }, (response) => {
            if ((__cached = m.getCacheManager().getItem(cache_id))) {
                success(__cached, true);
            }
            else {
                fail(response);
            }
        }, freeze);
    }
    getAll(options, success, fail, freeze = false, force_cache = false, load_cache_first = false) {
        let m = this, url = this.getServiceURI(), filters = options["filters"], request_data = {}, __cached;
        if (typeof options["max"] === "number") {
            request_data["max"] = options["max"];
        }
        if (typeof options["page"] === "number") {
            request_data["page"] = options["page"];
        }
        if (typeof options.relations === "string") {
            request_data["relations"] = options.relations;
        }
        if (typeof options.collection === "string") {
            request_data["collection"] = options.collection;
        }
        if (typeof options.order_by === "string") {
            request_data["order_by"] = options.order_by;
        }
        if (Utils.isPlainObject(filters)) {
            request_data["filters"] = filters;
        }
        let cache_id = toKey(request_data);
        if (force_cache && load_cache_first) {
            __cached = m.getCacheManager().getItem(cache_id);
            if (__cached) {
                success(__cached, true);
                freeze = false;
            }
        }
        return this.app_context.request("GET", url, request_data, (response) => {
            force_cache && m.getCacheManager().setItem(cache_id, response);
            success(response, false);
        }, (response) => {
            if (force_cache && (__cached = m.getCacheManager().getItem(cache_id))) {
                success(__cached, true);
            }
            else {
                fail(response);
            }
        }, freeze);
    }
    getRelation(id, relation, success, fail, freeze = false, force_cache = false, load_cache_first = false) {
        let m = this, url = this.getItemRelationURI(id, relation), cache_id = toKey({ id, relation }), __cached;
        if (force_cache && load_cache_first) {
            __cached = this.getCacheManager().getItem(cache_id);
            if (__cached) {
                success(__cached, true);
                freeze = false;
            }
        }
        return this.app_context.request("GET", url, {}, function (response) {
            force_cache && m.getCacheManager().setItem(cache_id, response);
            success(response, false);
        }, function (response) {
            if (force_cache && (__cached = m.getCacheManager().getItem(cache_id))) {
                success(__cached, true);
            }
            else {
                fail(response);
            }
        }, freeze);
    }
    getRelationItems(id, relation, options, success, fail, freeze = false, force_cache = false, load_cache_first = false) {
        let m = this, url = this.getItemRelationURI(id, relation), filters = options["filters"], request_data = {};
        if (typeof options["max"] === "number") {
            request_data["max"] = options["max"];
        }
        if (typeof options["page"] === "number") {
            request_data["page"] = options["page"];
        }
        if (Utils.isPlainObject(filters)) {
            request_data["filters"] = filters;
        }
        let cache_id = toKey(Utils.assign({ relation: relation }, request_data)), __cached;
        if (force_cache && load_cache_first) {
            __cached = this.getCacheManager().getItem(cache_id);
            if (__cached) {
                success(__cached, true);
                freeze = false;
            }
        }
        return this.app_context.request("GET", url, request_data, function (response) {
            force_cache && m.getCacheManager().setItem(cache_id, response);
            success(response, false);
        }, function (response) {
            if (force_cache && (__cached = m.getCacheManager().getItem(cache_id))) {
                success(__cached, true);
            }
            else {
                fail(response);
            }
        }, freeze);
    }
}
//# sourceMappingURL=data:application/json;base64,