import OWebEvent from './OWebEvent';
import { assign, isPlainObject, isString } from './utils';
const LANG_OBJECT = {};
const TOKEN_REG = /{\s*(@)?(?:([a-z-]{2,}):)?([a-z_][a-z0-9_]*(?:\.[a-z_][a-z0-9_]*)*)\s*}/gi;
const parse = function parser(str) {
    const out = str
        .replace(/([\r\n"'])/g, '\\$1')
        .replace(TOKEN_REG, function stringChunkReplacer(_found, isSub, lang, path) {
        let l, x;
        if (isSub) {
            l = lang ? '"' + lang + '"' : 'l';
            x = `_(d["${path}"] || "${path}", d, 0, ${l})`;
        }
        else {
            x = 'd.' + path;
        }
        return '"+' + x + '+"';
    });
    return new Function('_', 'd', 'l', `return ["${out}"];`.replace(/\s?~\s?/g, '","'));
};
const getKey = function getKey(key, langData) {
    const parts = (key || '').split('.');
    let message = langData;
    for (let i = 0; i < parts.length; i++) {
        if (message === undefined || message === null) {
            return undefined;
        }
        message = message[parts[i]] || undefined;
    }
    return message;
};
const _tmp = new Map(), translate = function translate(key, data, pluralize = 0, lang) {
    const id = `${lang}:${key}`;
    let message = key, format, fn;
    if (_tmp.has(id)) {
        fn = _tmp.get(id);
    }
    else if (LANG_OBJECT[lang] && (format = getKey(key, LANG_OBJECT[lang]))) {
        _tmp.set(id, (fn = parse(format)));
    }
    if (fn) {
        const parts = fn(translate, data, lang), len = parts.length;
        let index;
        if (typeof pluralize === 'function') {
            index = pluralize(data, parts);
        }
        else {
            index = pluralize;
        }
        index = Math.max(Math.min(index, len - 1), 0);
        message = parts[index];
    }
    return message;
};
export default class OWebI18n extends OWebEvent {
    defaultLangCode = 'en';
    setDefaultLang(lang) {
        if (!LANG_OBJECT[lang]) {
            throw new Error(`[OWebLang] can't set default language, undefined language data for: ${lang}.`);
        }
        this.defaultLangCode = lang;
        return this;
    }
    toHuman(key, data = {}, pluralize = 0, lang = this.defaultLangCode) {
        if (typeof key !== 'string') {
            const opt = key;
            return translate(opt.text || '', opt.data || data, opt.pluralize || pluralize, opt.lang || lang);
        }
        return translate(key, data, pluralize, lang);
    }
    el(el, options) {
        if (typeof options === 'string') {
            options = { text: options };
        }
        const { nodeName } = el, isInput = nodeName === 'INPUT' || nodeName === 'TEXTAREA', { text, placeholder, title, data = {}, lang = this.defaultLangCode, pluralize, } = options;
        let str;
        if (text) {
            str = translate(text, data, pluralize, lang);
            if (!isInput) {
                el.innerHTML = str;
            }
            else {
                el.setAttribute('value', str);
            }
        }
        if (isInput && placeholder) {
            str = translate(placeholder, data, pluralize, lang);
            el.setAttribute('placeholder', str);
        }
        if (title) {
            str = translate(title, data, pluralize, lang);
            el.setAttribute('title', str);
        }
    }
    static loadLangData(lang, data) {
        if (!isString(lang)) {
            throw new TypeError('[OWebI18n] your lang name should be a valid string.');
        }
        if (!isPlainObject(data)) {
            throw new TypeError('[OWebI18n] your lang data should be a valid plain object.');
        }
        LANG_OBJECT[lang] = assign(LANG_OBJECT[lang] || {}, data);
    }
}
//# sourceMappingURL=data:application/json;base64,