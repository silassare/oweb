import OWebEvent from './OWebEvent';
import { assign, forEach, isPlainObject, isString } from './utils';
import { default as defaultLangs } from './default/lang';
const LANG_OBJECT = Object.create(null);
// {name} | {@message} | {@app.name} | {@fr:message} | {@fr:app.name}
const TOKEN_REG = /{\s*(@)?(?:([a-z-]{2,}):)?([a-z_][a-z0-9_]*(?:\.[a-z_][a-z0-9_]*)*)\s*}/gi;
/**
 * ```js
 *
 * const samples = {
 *  message                               : 'Hello World!',
 *  message_with_token                    : 'Hello {name}!',
 *  message_with_pluralize                : 'one message ~ two messages ~ {n} messages',
 *  message_with_sub_message              : '{@message_with_token} Welcome to our website.',
 *  message_with_sub_message_deep         : 'App name is: {@app.name}.',
 *  message_with_sub_message_specific_lang: '{@fr:message_with_token} We speak french too!',
 *  app                                   : {
 * 		name: 'MagicApp'
 * 	}
 * };
 * ```
 */
const parse = function parser(str) {
    const out = str
        .replace(/([\r\n"'])/g, '\\$1')
        .replace(TOKEN_REG, function stringChunkReplacer(_found, isSub, lang, path) {
        let l, x;
        if (isSub) {
            l = lang ? '"' + lang + '"' : 'l';
            x = `_(d["${path}"] || "${path}", d, 0, ${l})`;
        }
        else {
            x = 'd.' + path;
        }
        return '"+' + x + '+"';
    });
    return new Function('_', 'd', 'l', `return ["${out}"];`.replace(/\s?~\s?/g, '","'));
};
const getKey = function getKey(key, langData) {
    const parts = (key || '').split('.');
    let message = langData;
    for (let i = 0; i < parts.length; i++) {
        if (message === undefined || message === null) {
            return undefined;
        }
        message = message[parts[i]] || undefined;
    }
    return message;
};
const _tmp = new Map(), translate = function translate(key, data, pluralize = 0, lang) {
    const id = `${lang}:${key}`;
    let message = key, format, fn;
    if (_tmp.has(id)) {
        fn = _tmp.get(id);
    }
    else if (LANG_OBJECT[lang] && (format = getKey(key, LANG_OBJECT[lang]))) {
        _tmp.set(id, (fn = parse(format)));
    }
    if (fn) {
        const parts = fn(translate, data, lang), len = parts.length;
        let index;
        if (typeof pluralize === 'function') {
            index = pluralize(data, parts);
        }
        else {
            index = pluralize;
        }
        index = Math.max(Math.min(index, len - 1), 0);
        message = parts[index];
    }
    return message;
};
export default class OWebI18n extends OWebEvent {
    defaultLangCode = 'en';
    /**
     * Sets default i18n lang code.
     *
     * @deprecated use {@link OWebI18n.setLang}
     *
     * @param lang The i18n lang code.
     */
    setDefaultLang(lang) {
        return this.setLang(lang);
    }
    /**
     * Sets i18n lang code.
     *
     * @param lang The i18n lang code.
     */
    setLang(lang) {
        if (!LANG_OBJECT[lang]) {
            throw new Error(`[OWebLang] can't set default language, undefined language data for: ${lang}.`);
        }
        this.defaultLangCode = lang;
        return this;
    }
    /**
     * Gets current lang.
     *
     * @returns {string}
     */
    getCurrentLang() {
        return this.defaultLangCode;
    }
    /**
     * Gets supported languages.
     *
     * @returns {string[]}
     */
    getSupportedLangs() {
        return Object.keys(LANG_OBJECT);
    }
    /**
     * Returns i18n translation.
     *
     * @param key The i18n string key.
     * @param data The data to inject in translation process.
     * @param pluralize
     * @param lang The i18n lang code to use.
     */
    toHuman(key, data = {}, pluralize = 0, lang = this.defaultLangCode) {
        if (typeof key !== 'string') {
            const opt = key;
            return translate(opt.text || '', opt.data || data, opt.pluralize || pluralize, opt.lang || lang);
        }
        return translate(key, data, pluralize, lang);
    }
    /**
     * Sets i18n for HTMLElement
     *
     * @param el
     * @param options
     */
    el(el, options) {
        if (typeof options === 'string') {
            options = { text: options };
        }
        const { nodeName } = el, isInput = nodeName === 'INPUT' || nodeName === 'TEXTAREA', { text, placeholder, title, data = {}, lang = this.defaultLangCode, pluralize, } = options;
        let str;
        if (text) {
            str = translate(text, data, pluralize, lang);
            if (!isInput) {
                el.innerHTML = str;
            }
            else {
                el.setAttribute('value', str);
            }
        }
        if (isInput && placeholder) {
            str = translate(placeholder, data, pluralize, lang);
            el.setAttribute('placeholder', str);
        }
        if (title) {
            str = translate(title, data, pluralize, lang);
            el.setAttribute('title', str);
        }
    }
    /**
     * Sets the i18n lang data.
     *
     * @param lang The i18n lang code
     * @param data The i18n lang data.
     */
    static loadLangData(lang, data) {
        if (!isString(lang)) {
            throw new TypeError('[OWebI18n] your lang name should be a valid string.');
        }
        if (!isPlainObject(data)) {
            throw new TypeError('[OWebI18n] your lang data should be a valid plain object.');
        }
        LANG_OBJECT[lang] = assign(LANG_OBJECT[lang] || {}, data);
    }
}
forEach(defaultLangs, function loadDefaultLangsData(value, code) {
    OWebI18n.loadLangData(code, value);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYkkxOG4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvT1dlYkkxOG4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxTQUFTLE1BQU0sYUFBYSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxNQUFNLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxRQUFRLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDbkUsT0FBTyxFQUFFLE9BQU8sSUFBSSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQTJCekQsTUFBTSxXQUFXLEdBQXVDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDNUUscUVBQXFFO0FBQ3JFLE1BQU0sU0FBUyxHQUNkLDJFQUEyRSxDQUFDO0FBRTdFOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUNILE1BQU0sS0FBSyxHQUFHLFNBQVMsTUFBTSxDQUFDLEdBQVc7SUFDeEMsTUFBTSxHQUFHLEdBQUcsR0FBRztTQUNiLE9BQU8sQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDO1NBQzlCLE9BQU8sQ0FDUCxTQUFTLEVBQ1QsU0FBUyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJO1FBQ3JELElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNULElBQUksS0FBSyxFQUFFO1lBQ1YsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztZQUNsQyxDQUFDLEdBQUcsUUFBUSxJQUFJLFVBQVUsSUFBSSxZQUFZLENBQUMsR0FBRyxDQUFDO1NBQy9DO2FBQU07WUFDTixDQUFDLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQztTQUNoQjtRQUVELE9BQU8sSUFBSSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUM7SUFDeEIsQ0FBQyxDQUNELENBQUM7SUFFSCxPQUFPLElBQUksUUFBUSxDQUNsQixHQUFHLEVBQ0gsR0FBRyxFQUNILEdBQUcsRUFDSCxZQUFZLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQy9DLENBQUM7QUFDSCxDQUFDLENBQUM7QUFDRixNQUFNLE1BQU0sR0FBRyxTQUFTLE1BQU0sQ0FBQyxHQUFXLEVBQUUsUUFBYTtJQUN4RCxNQUFNLEtBQUssR0FBRyxDQUFDLEdBQUcsSUFBSSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDckMsSUFBSSxPQUFPLEdBQUcsUUFBUSxDQUFDO0lBRXZCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQ3RDLElBQUksT0FBTyxLQUFLLFNBQVMsSUFBSSxPQUFPLEtBQUssSUFBSSxFQUFFO1lBQzlDLE9BQU8sU0FBUyxDQUFDO1NBQ2pCO1FBRUQsT0FBTyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxTQUFTLENBQUM7S0FDekM7SUFFRCxPQUFPLE9BQU8sQ0FBQztBQUNoQixDQUFDLENBQUM7QUFFRixNQUFNLElBQUksR0FBRyxJQUFJLEdBQUcsRUFBRSxFQUNyQixTQUFTLEdBQUcsU0FBUyxTQUFTLENBQzdCLEdBQVcsRUFDWCxJQUFlLEVBQ2YsWUFBNEIsQ0FBQyxFQUM3QixJQUFZO0lBRVosTUFBTSxFQUFFLEdBQUcsR0FBRyxJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7SUFDNUIsSUFBSSxPQUFPLEdBQUcsR0FBRyxFQUNoQixNQUFNLEVBQ04sRUFBRSxDQUFDO0lBRUosSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFO1FBQ2pCLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0tBQ2xCO1NBQU0sSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsRUFBRSxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQzFFLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDbkM7SUFFRCxJQUFJLEVBQUUsRUFBRTtRQUNQLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQyxTQUFTLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUN0QyxHQUFHLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUNwQixJQUFJLEtBQUssQ0FBQztRQUVWLElBQUksT0FBTyxTQUFTLEtBQUssVUFBVSxFQUFFO1lBQ3BDLEtBQUssR0FBRyxTQUFTLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQy9CO2FBQU07WUFDTixLQUFLLEdBQUcsU0FBUyxDQUFDO1NBQ2xCO1FBRUQsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO1FBQzlDLE9BQU8sR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDdkI7SUFFRCxPQUFPLE9BQU8sQ0FBQztBQUNoQixDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsT0FBTyxPQUFPLFFBQVMsU0FBUSxTQUFTO0lBQ3RDLGVBQWUsR0FBRyxJQUFJLENBQUM7SUFFL0I7Ozs7OztPQU1HO0lBQ0gsY0FBYyxDQUFDLElBQVk7UUFDMUIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsT0FBTyxDQUFDLElBQVk7UUFDbkIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN2QixNQUFNLElBQUksS0FBSyxDQUNkLHVFQUF1RSxJQUFJLEdBQUcsQ0FDOUUsQ0FBQztTQUNGO1FBRUQsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUM7UUFFNUIsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILGNBQWM7UUFDYixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUM7SUFDN0IsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxpQkFBaUI7UUFDaEIsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFRDs7Ozs7OztPQU9HO0lBQ0gsT0FBTyxDQUNOLEdBQVUsRUFDVixPQUFrQixFQUFFLEVBQ3BCLFlBQTRCLENBQUMsRUFDN0IsT0FBZSxJQUFJLENBQUMsZUFBZTtRQUVuQyxJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVEsRUFBRTtZQUM1QixNQUFNLEdBQUcsR0FBRyxHQUFtQixDQUFDO1lBQ2hDLE9BQU8sU0FBUyxDQUNmLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRSxFQUNkLEdBQUcsQ0FBQyxJQUFJLElBQUksSUFBSSxFQUNoQixHQUFHLENBQUMsU0FBUyxJQUFJLFNBQVMsRUFDMUIsR0FBRyxDQUFDLElBQUksSUFBSSxJQUFJLENBQ2hCLENBQUM7U0FDRjtRQUVELE9BQU8sU0FBUyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzlDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILEVBQUUsQ0FBQyxFQUFlLEVBQUUsT0FBcUI7UUFDeEMsSUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRLEVBQUU7WUFDaEMsT0FBTyxHQUFHLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxDQUFDO1NBQzVCO1FBRUQsTUFBTSxFQUFFLFFBQVEsRUFBRSxHQUFHLEVBQUUsRUFDdEIsT0FBTyxHQUFHLFFBQVEsS0FBSyxPQUFPLElBQUksUUFBUSxLQUFLLFVBQVUsRUFDekQsRUFDQyxJQUFJLEVBQ0osV0FBVyxFQUNYLEtBQUssRUFDTCxJQUFJLEdBQUcsRUFBRSxFQUNULElBQUksR0FBRyxJQUFJLENBQUMsZUFBZSxFQUMzQixTQUFTLEdBQ1QsR0FBRyxPQUFPLENBQUM7UUFDYixJQUFJLEdBQUcsQ0FBQztRQUVSLElBQUksSUFBSSxFQUFFO1lBQ1QsR0FBRyxHQUFHLFNBQVMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUM3QyxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNiLEVBQUUsQ0FBQyxTQUFTLEdBQUcsR0FBRyxDQUFDO2FBQ25CO2lCQUFNO2dCQUNOLEVBQUUsQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2FBQzlCO1NBQ0Q7UUFFRCxJQUFJLE9BQU8sSUFBSSxXQUFXLEVBQUU7WUFDM0IsR0FBRyxHQUFHLFNBQVMsQ0FBQyxXQUFXLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNwRCxFQUFFLENBQUMsWUFBWSxDQUFDLGFBQWEsRUFBRSxHQUFHLENBQUMsQ0FBQztTQUNwQztRQUVELElBQUksS0FBSyxFQUFFO1lBQ1YsR0FBRyxHQUFHLFNBQVMsQ0FBQyxLQUFLLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUM5QyxFQUFFLENBQUMsWUFBWSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztTQUM5QjtJQUNGLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILE1BQU0sQ0FBQyxZQUFZLENBQUMsSUFBWSxFQUFFLElBQXFCO1FBQ3RELElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDcEIsTUFBTSxJQUFJLFNBQVMsQ0FDbEIscURBQXFELENBQ3JELENBQUM7U0FDRjtRQUVELElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDekIsTUFBTSxJQUFJLFNBQVMsQ0FDbEIsMkRBQTJELENBQzNELENBQUM7U0FDRjtRQUVELFdBQVcsQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMzRCxDQUFDO0NBQ0Q7QUFFRCxPQUFPLENBQUMsWUFBWSxFQUFFLFNBQVMsb0JBQW9CLENBQUMsS0FBSyxFQUFFLElBQUk7SUFDOUQsUUFBUSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDcEMsQ0FBQyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPSlNPTlZhbHVlIH0gZnJvbSAnLi9PV2ViRGF0YVN0b3JlJztcbmltcG9ydCBPV2ViRXZlbnQgZnJvbSAnLi9PV2ViRXZlbnQnO1xuaW1wb3J0IHsgYXNzaWduLCBmb3JFYWNoLCBpc1BsYWluT2JqZWN0LCBpc1N0cmluZyB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgZGVmYXVsdCBhcyBkZWZhdWx0TGFuZ3MgfSBmcm9tICcuL2RlZmF1bHQvbGFuZyc7XG5cbmV4cG9ydCB0eXBlIE9JMThuRGVmaW5pdGlvbiA9IFJlY29yZDxzdHJpbmcsIE9KU09OVmFsdWU+O1xuZXhwb3J0IHR5cGUgT0kxOG5EYXRhID0geyBba2V5OiBzdHJpbmddOiBhbnkgfTtcbmV4cG9ydCB0eXBlIE9JMThuT3B0aW9ucyA9IHtcblx0dGV4dD86IHN0cmluZztcblx0bGFuZz86IHN0cmluZztcblx0ZGF0YT86IE9JMThuRGF0YTtcblx0cGx1cmFsaXplPzogT0kxOG5QbHVyYWxpemU7XG59O1xuZXhwb3J0IHR5cGUgT0kxOG4gPSBPSTE4bk9wdGlvbnMgfCBzdHJpbmc7XG5cbmV4cG9ydCB0eXBlIE9JMThuRWxlbWVudCA9XG5cdHwgc3RyaW5nXG5cdHwge1xuXHRcdFx0dGV4dD86IHN0cmluZztcblx0XHRcdHBsYWNlaG9sZGVyPzogc3RyaW5nO1xuXHRcdFx0dGl0bGU/OiBzdHJpbmc7XG5cdFx0XHRsYW5nPzogc3RyaW5nO1xuXHRcdFx0ZGF0YT86IE9JMThuRGF0YTtcblx0XHRcdHBsdXJhbGl6ZT86IE9JMThuUGx1cmFsaXplO1xuXHQgIH07XG5cbmV4cG9ydCB0eXBlIE9JMThuUGx1cmFsaXplID1cblx0fCBudW1iZXJcblx0fCAoKGRhdGE6IE9JMThuRGF0YSwgcGFydHM6IHN0cmluZ1tdKSA9PiBudW1iZXIpO1xuXG5jb25zdCBMQU5HX09CSkVDVDogeyBba2V5OiBzdHJpbmddOiBPSTE4bkRlZmluaXRpb24gfSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4vLyB7bmFtZX0gfCB7QG1lc3NhZ2V9IHwge0BhcHAubmFtZX0gfCB7QGZyOm1lc3NhZ2V9IHwge0BmcjphcHAubmFtZX1cbmNvbnN0IFRPS0VOX1JFRyA9XG5cdC97XFxzKihAKT8oPzooW2Etei1dezIsfSk6KT8oW2Etel9dW2EtejAtOV9dKig/OlxcLlthLXpfXVthLXowLTlfXSopKilcXHMqfS9naTtcblxuLyoqXG4gKiBgYGBqc1xuICpcbiAqIGNvbnN0IHNhbXBsZXMgPSB7XG4gKiAgbWVzc2FnZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICdIZWxsbyBXb3JsZCEnLFxuICogIG1lc3NhZ2Vfd2l0aF90b2tlbiAgICAgICAgICAgICAgICAgICAgOiAnSGVsbG8ge25hbWV9IScsXG4gKiAgbWVzc2FnZV93aXRoX3BsdXJhbGl6ZSAgICAgICAgICAgICAgICA6ICdvbmUgbWVzc2FnZSB+IHR3byBtZXNzYWdlcyB+IHtufSBtZXNzYWdlcycsXG4gKiAgbWVzc2FnZV93aXRoX3N1Yl9tZXNzYWdlICAgICAgICAgICAgICA6ICd7QG1lc3NhZ2Vfd2l0aF90b2tlbn0gV2VsY29tZSB0byBvdXIgd2Vic2l0ZS4nLFxuICogIG1lc3NhZ2Vfd2l0aF9zdWJfbWVzc2FnZV9kZWVwICAgICAgICAgOiAnQXBwIG5hbWUgaXM6IHtAYXBwLm5hbWV9LicsXG4gKiAgbWVzc2FnZV93aXRoX3N1Yl9tZXNzYWdlX3NwZWNpZmljX2xhbmc6ICd7QGZyOm1lc3NhZ2Vfd2l0aF90b2tlbn0gV2Ugc3BlYWsgZnJlbmNoIHRvbyEnLFxuICogIGFwcCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB7XG4gKiBcdFx0bmFtZTogJ01hZ2ljQXBwJ1xuICogXHR9XG4gKiB9O1xuICogYGBgXG4gKi9cbmNvbnN0IHBhcnNlID0gZnVuY3Rpb24gcGFyc2VyKHN0cjogc3RyaW5nKSB7XG5cdGNvbnN0IG91dCA9IHN0clxuXHRcdC5yZXBsYWNlKC8oW1xcclxcblwiJ10pL2csICdcXFxcJDEnKVxuXHRcdC5yZXBsYWNlKFxuXHRcdFx0VE9LRU5fUkVHLFxuXHRcdFx0ZnVuY3Rpb24gc3RyaW5nQ2h1bmtSZXBsYWNlcihfZm91bmQsIGlzU3ViLCBsYW5nLCBwYXRoKSB7XG5cdFx0XHRcdGxldCBsLCB4O1xuXHRcdFx0XHRpZiAoaXNTdWIpIHtcblx0XHRcdFx0XHRsID0gbGFuZyA/ICdcIicgKyBsYW5nICsgJ1wiJyA6ICdsJztcblx0XHRcdFx0XHR4ID0gYF8oZFtcIiR7cGF0aH1cIl0gfHwgXCIke3BhdGh9XCIsIGQsIDAsICR7bH0pYDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR4ID0gJ2QuJyArIHBhdGg7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gJ1wiKycgKyB4ICsgJytcIic7XG5cdFx0XHR9XG5cdFx0KTtcblxuXHRyZXR1cm4gbmV3IEZ1bmN0aW9uKFxuXHRcdCdfJyxcblx0XHQnZCcsXG5cdFx0J2wnLFxuXHRcdGByZXR1cm4gW1wiJHtvdXR9XCJdO2AucmVwbGFjZSgvXFxzP35cXHM/L2csICdcIixcIicpXG5cdCk7XG59O1xuY29uc3QgZ2V0S2V5ID0gZnVuY3Rpb24gZ2V0S2V5KGtleTogc3RyaW5nLCBsYW5nRGF0YTogYW55KSB7XG5cdGNvbnN0IHBhcnRzID0gKGtleSB8fCAnJykuc3BsaXQoJy4nKTtcblx0bGV0IG1lc3NhZ2UgPSBsYW5nRGF0YTtcblxuXHRmb3IgKGxldCBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0aWYgKG1lc3NhZ2UgPT09IHVuZGVmaW5lZCB8fCBtZXNzYWdlID09PSBudWxsKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdG1lc3NhZ2UgPSBtZXNzYWdlW3BhcnRzW2ldXSB8fCB1bmRlZmluZWQ7XG5cdH1cblxuXHRyZXR1cm4gbWVzc2FnZTtcbn07XG5cbmNvbnN0IF90bXAgPSBuZXcgTWFwKCksXG5cdHRyYW5zbGF0ZSA9IGZ1bmN0aW9uIHRyYW5zbGF0ZShcblx0XHRrZXk6IHN0cmluZyxcblx0XHRkYXRhOiBPSTE4bkRhdGEsXG5cdFx0cGx1cmFsaXplOiBPSTE4blBsdXJhbGl6ZSA9IDAsXG5cdFx0bGFuZzogc3RyaW5nXG5cdCk6IHN0cmluZyB7XG5cdFx0Y29uc3QgaWQgPSBgJHtsYW5nfToke2tleX1gO1xuXHRcdGxldCBtZXNzYWdlID0ga2V5LFxuXHRcdFx0Zm9ybWF0LFxuXHRcdFx0Zm47XG5cblx0XHRpZiAoX3RtcC5oYXMoaWQpKSB7XG5cdFx0XHRmbiA9IF90bXAuZ2V0KGlkKTtcblx0XHR9IGVsc2UgaWYgKExBTkdfT0JKRUNUW2xhbmddICYmIChmb3JtYXQgPSBnZXRLZXkoa2V5LCBMQU5HX09CSkVDVFtsYW5nXSkpKSB7XG5cdFx0XHRfdG1wLnNldChpZCwgKGZuID0gcGFyc2UoZm9ybWF0KSkpO1xuXHRcdH1cblxuXHRcdGlmIChmbikge1xuXHRcdFx0Y29uc3QgcGFydHMgPSBmbih0cmFuc2xhdGUsIGRhdGEsIGxhbmcpLFxuXHRcdFx0XHRsZW4gPSBwYXJ0cy5sZW5ndGg7XG5cdFx0XHRsZXQgaW5kZXg7XG5cblx0XHRcdGlmICh0eXBlb2YgcGx1cmFsaXplID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdGluZGV4ID0gcGx1cmFsaXplKGRhdGEsIHBhcnRzKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGluZGV4ID0gcGx1cmFsaXplO1xuXHRcdFx0fVxuXG5cdFx0XHRpbmRleCA9IE1hdGgubWF4KE1hdGgubWluKGluZGV4LCBsZW4gLSAxKSwgMCk7XG5cdFx0XHRtZXNzYWdlID0gcGFydHNbaW5kZXhdO1xuXHRcdH1cblxuXHRcdHJldHVybiBtZXNzYWdlO1xuXHR9O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPV2ViSTE4biBleHRlbmRzIE9XZWJFdmVudCB7XG5cdHByaXZhdGUgZGVmYXVsdExhbmdDb2RlID0gJ2VuJztcblxuXHQvKipcblx0ICogU2V0cyBkZWZhdWx0IGkxOG4gbGFuZyBjb2RlLlxuXHQgKlxuXHQgKiBAZGVwcmVjYXRlZCB1c2Uge0BsaW5rIE9XZWJJMThuLnNldExhbmd9XG5cdCAqXG5cdCAqIEBwYXJhbSBsYW5nIFRoZSBpMThuIGxhbmcgY29kZS5cblx0ICovXG5cdHNldERlZmF1bHRMYW5nKGxhbmc6IHN0cmluZyk6IHRoaXMge1xuXHRcdHJldHVybiB0aGlzLnNldExhbmcobGFuZyk7XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyBpMThuIGxhbmcgY29kZS5cblx0ICpcblx0ICogQHBhcmFtIGxhbmcgVGhlIGkxOG4gbGFuZyBjb2RlLlxuXHQgKi9cblx0c2V0TGFuZyhsYW5nOiBzdHJpbmcpOiB0aGlzIHtcblx0XHRpZiAoIUxBTkdfT0JKRUNUW2xhbmddKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoXG5cdFx0XHRcdGBbT1dlYkxhbmddIGNhbid0IHNldCBkZWZhdWx0IGxhbmd1YWdlLCB1bmRlZmluZWQgbGFuZ3VhZ2UgZGF0YSBmb3I6ICR7bGFuZ30uYFxuXHRcdFx0KTtcblx0XHR9XG5cblx0XHR0aGlzLmRlZmF1bHRMYW5nQ29kZSA9IGxhbmc7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIGN1cnJlbnQgbGFuZy5cblx0ICpcblx0ICogQHJldHVybnMge3N0cmluZ31cblx0ICovXG5cdGdldEN1cnJlbnRMYW5nKCkge1xuXHRcdHJldHVybiB0aGlzLmRlZmF1bHRMYW5nQ29kZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXRzIHN1cHBvcnRlZCBsYW5ndWFnZXMuXG5cdCAqXG5cdCAqIEByZXR1cm5zIHtzdHJpbmdbXX1cblx0ICovXG5cdGdldFN1cHBvcnRlZExhbmdzKCk6IHN0cmluZ1tdIHtcblx0XHRyZXR1cm4gT2JqZWN0LmtleXMoTEFOR19PQkpFQ1QpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgaTE4biB0cmFuc2xhdGlvbi5cblx0ICpcblx0ICogQHBhcmFtIGtleSBUaGUgaTE4biBzdHJpbmcga2V5LlxuXHQgKiBAcGFyYW0gZGF0YSBUaGUgZGF0YSB0byBpbmplY3QgaW4gdHJhbnNsYXRpb24gcHJvY2Vzcy5cblx0ICogQHBhcmFtIHBsdXJhbGl6ZVxuXHQgKiBAcGFyYW0gbGFuZyBUaGUgaTE4biBsYW5nIGNvZGUgdG8gdXNlLlxuXHQgKi9cblx0dG9IdW1hbihcblx0XHRrZXk6IE9JMThuLFxuXHRcdGRhdGE6IE9JMThuRGF0YSA9IHt9LFxuXHRcdHBsdXJhbGl6ZTogT0kxOG5QbHVyYWxpemUgPSAwLFxuXHRcdGxhbmc6IHN0cmluZyA9IHRoaXMuZGVmYXVsdExhbmdDb2RlXG5cdCk6IHN0cmluZyB7XG5cdFx0aWYgKHR5cGVvZiBrZXkgIT09ICdzdHJpbmcnKSB7XG5cdFx0XHRjb25zdCBvcHQgPSBrZXkgYXMgT0kxOG5PcHRpb25zO1xuXHRcdFx0cmV0dXJuIHRyYW5zbGF0ZShcblx0XHRcdFx0b3B0LnRleHQgfHwgJycsXG5cdFx0XHRcdG9wdC5kYXRhIHx8IGRhdGEsXG5cdFx0XHRcdG9wdC5wbHVyYWxpemUgfHwgcGx1cmFsaXplLFxuXHRcdFx0XHRvcHQubGFuZyB8fCBsYW5nXG5cdFx0XHQpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cmFuc2xhdGUoa2V5LCBkYXRhLCBwbHVyYWxpemUsIGxhbmcpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFNldHMgaTE4biBmb3IgSFRNTEVsZW1lbnRcblx0ICpcblx0ICogQHBhcmFtIGVsXG5cdCAqIEBwYXJhbSBvcHRpb25zXG5cdCAqL1xuXHRlbChlbDogSFRNTEVsZW1lbnQsIG9wdGlvbnM6IE9JMThuRWxlbWVudCk6IHZvaWQge1xuXHRcdGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcblx0XHRcdG9wdGlvbnMgPSB7IHRleHQ6IG9wdGlvbnMgfTtcblx0XHR9XG5cblx0XHRjb25zdCB7IG5vZGVOYW1lIH0gPSBlbCxcblx0XHRcdGlzSW5wdXQgPSBub2RlTmFtZSA9PT0gJ0lOUFVUJyB8fCBub2RlTmFtZSA9PT0gJ1RFWFRBUkVBJyxcblx0XHRcdHtcblx0XHRcdFx0dGV4dCxcblx0XHRcdFx0cGxhY2Vob2xkZXIsXG5cdFx0XHRcdHRpdGxlLFxuXHRcdFx0XHRkYXRhID0ge30sXG5cdFx0XHRcdGxhbmcgPSB0aGlzLmRlZmF1bHRMYW5nQ29kZSxcblx0XHRcdFx0cGx1cmFsaXplLFxuXHRcdFx0fSA9IG9wdGlvbnM7XG5cdFx0bGV0IHN0cjtcblxuXHRcdGlmICh0ZXh0KSB7XG5cdFx0XHRzdHIgPSB0cmFuc2xhdGUodGV4dCwgZGF0YSwgcGx1cmFsaXplLCBsYW5nKTtcblx0XHRcdGlmICghaXNJbnB1dCkge1xuXHRcdFx0XHRlbC5pbm5lckhUTUwgPSBzdHI7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRlbC5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgc3RyKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoaXNJbnB1dCAmJiBwbGFjZWhvbGRlcikge1xuXHRcdFx0c3RyID0gdHJhbnNsYXRlKHBsYWNlaG9sZGVyLCBkYXRhLCBwbHVyYWxpemUsIGxhbmcpO1xuXHRcdFx0ZWwuc2V0QXR0cmlidXRlKCdwbGFjZWhvbGRlcicsIHN0cik7XG5cdFx0fVxuXG5cdFx0aWYgKHRpdGxlKSB7XG5cdFx0XHRzdHIgPSB0cmFuc2xhdGUodGl0bGUsIGRhdGEsIHBsdXJhbGl6ZSwgbGFuZyk7XG5cdFx0XHRlbC5zZXRBdHRyaWJ1dGUoJ3RpdGxlJywgc3RyKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogU2V0cyB0aGUgaTE4biBsYW5nIGRhdGEuXG5cdCAqXG5cdCAqIEBwYXJhbSBsYW5nIFRoZSBpMThuIGxhbmcgY29kZVxuXHQgKiBAcGFyYW0gZGF0YSBUaGUgaTE4biBsYW5nIGRhdGEuXG5cdCAqL1xuXHRzdGF0aWMgbG9hZExhbmdEYXRhKGxhbmc6IHN0cmluZywgZGF0YTogT0kxOG5EZWZpbml0aW9uKTogdm9pZCB7XG5cdFx0aWYgKCFpc1N0cmluZyhsYW5nKSkge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihcblx0XHRcdFx0J1tPV2ViSTE4bl0geW91ciBsYW5nIG5hbWUgc2hvdWxkIGJlIGEgdmFsaWQgc3RyaW5nLidcblx0XHRcdCk7XG5cdFx0fVxuXG5cdFx0aWYgKCFpc1BsYWluT2JqZWN0KGRhdGEpKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKFxuXHRcdFx0XHQnW09XZWJJMThuXSB5b3VyIGxhbmcgZGF0YSBzaG91bGQgYmUgYSB2YWxpZCBwbGFpbiBvYmplY3QuJ1xuXHRcdFx0KTtcblx0XHR9XG5cblx0XHRMQU5HX09CSkVDVFtsYW5nXSA9IGFzc2lnbihMQU5HX09CSkVDVFtsYW5nXSB8fCB7fSwgZGF0YSk7XG5cdH1cbn1cblxuZm9yRWFjaChkZWZhdWx0TGFuZ3MsIGZ1bmN0aW9uIGxvYWREZWZhdWx0TGFuZ3NEYXRhKHZhbHVlLCBjb2RlKSB7XG5cdE9XZWJJMThuLmxvYWRMYW5nRGF0YShjb2RlLCB2YWx1ZSk7XG59KTtcbiJdfQ==