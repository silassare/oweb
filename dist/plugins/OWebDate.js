const FORMAT_REG = /(?<!\\)(?:\\\\)*(ms|ss|ii|hh|mm|ll|A|a|s|i|H|h|y|Y|m|F|M|d|l|L|D)/g;
export default class OWebDate {
    _appContext;
    date;
    constructor(_appContext, date = new Date()) {
        this._appContext = _appContext;
        this.date = date;
    }
    /**
     * Format date with a given format.
     *
     * @param format
     */
    format(format = 'OW_TIME_DEFAULT_FORMAT') {
        format = this._appContext.i18n.toHuman(format);
        const o = this.describe();
        return format.replace(FORMAT_REG, function stringChunkReplacer(...args) {
            return o[args[1]];
        });
    }
    fromNow() {
        return this.format(this.compare(this.date, Date.now()).format);
    }
    compare(_startDate, _endDate) {
        const startDate = new Date(_startDate);
        const endDate = new Date(_endDate);
        let format;
        const start = {
            time: startDate.getTime(),
            year: startDate.getFullYear(),
            month: startDate.getMonth(),
            date: startDate.getDate(),
            hour: startDate.getHours(),
            minute: startDate.getMinutes(),
        };
        const end = {
            time: endDate.getTime(),
            year: endDate.getFullYear(),
            month: endDate.getMonth(),
            date: endDate.getDate(),
            hour: endDate.getHours(),
            minute: endDate.getMinutes(),
        };
        const aSecond = 1000;
        const aMinute = 60 * aSecond;
        const anHour = 60 * aMinute;
        const aDay = 24 * anHour;
        const aWeek = 7 * aDay;
        const inPast = start.time > end.time;
        const msCount = Math.abs(start.time - end.time);
        const nSeconds = Math.floor(msCount / aSecond);
        const nMinutes = Math.floor(msCount / aMinute);
        const nHours = Math.floor(msCount / anHour);
        const nDays = Math.floor(msCount / aDay);
        const nWeeks = Math.floor(msCount / aWeek);
        const nMonths = Math.abs(end.year - start.year) * 12 + (end.month - start.month);
        const nYears = Math.floor(nMonths / 12);
        if (nSeconds < 5) {
            format = inPast ? 'OW_TIME_JUST_NOW' : 'OW_TIME_IN_FEW_SECONDS';
        }
        else if (nSeconds < 10) {
            format = inPast ? 'OW_TIME_FEW_SECONDS_AGO' : 'OW_TIME_IN_FEW_SECONDS';
        }
        else if (nSeconds < 55) {
            format = inPast ? 'OW_TIME_N_SECONDS_AGO' : 'OW_TIME_IN_N_SECONDS';
        }
        else if (nSeconds < 60) {
            format = inPast
                ? 'OW_TIME_LESS_THAN_A_MINUTE_AGO'
                : 'OW_TIME_IN_LESS_THAN_A_MINUTE';
        }
        else if (nSeconds < 70) {
            format = inPast
                ? 'OW_TIME_ABOUT_A_MINUTE_AGO'
                : 'OW_TIME_IN_ABOUT_A_MINUTE';
        }
        else if (nMinutes < 55) {
            format = inPast ? 'OW_TIME_N_MINUTES_AGO' : 'OW_TIME_IN_N_MINUTES';
        }
        else if (nMinutes < 70) {
            format = inPast
                ? 'OW_TIME_ABOUT_AN_HOUR_AGO'
                : 'OW_TIME_IN_ABOUT_AN_HOUR';
        }
        else if (nHours < 24) {
            format = inPast ? 'OW_TIME_N_HOURS_AGO' : 'OW_TIME_IN_N_HOURS';
        }
        else if (nDays < 7) {
            format = inPast ? 'OW_TIME_N_DAYS_AGO' : 'OW_TIME_IN_N_DAYS';
        }
        else if (nWeeks < 4) {
            format = inPast ? 'OW_TIME_N_WEEKS_AGO' : 'OW_TIME_IN_N_WEEKS';
        }
        else if (nMonths < 12) {
            format = inPast ? 'OW_TIME_N_MONTHS_AGO' : 'OW_TIME_IN_N_MONTHS';
        }
        else {
            format = inPast ? 'OW_TIME_N_YEARS_AGO' : 'OW_TIME_IN_N_YEARS';
        }
        // used in an elapse time or duration counter
        const cSeconds = Math.floor((msCount / aSecond) % 60);
        const cMinutes = Math.floor((msCount / aMinute) % 60);
        const cHours = Math.floor((msCount / anHour) % 24);
        const cDays = Math.floor(msCount / aDay);
        return {
            format,
            nSeconds,
            nMinutes,
            nHours,
            nDays,
            nWeeks,
            nMonths,
            nYears,
            inPast,
            cDays,
            cHours,
            cMinutes,
            cSeconds,
        };
    }
    /**
     * Returns date description object.
     */
    describe() {
        const i18n = this._appContext.i18n, dayNamesShort = i18n.toHuman('OW_TIME_DAY_NAMES_SHORT').split(','), dayNamesFull = i18n.toHuman('OW_TIME_DAY_NAMES_FULL').split(','), monthNamesShort = i18n.toHuman('OW_TIME_MONTH_NAMES_SHORT').split(','), monthNamesFull = i18n.toHuman('OW_TIME_MONTH_NAMES_FULL').split(','), date = new Date(this.date), y = date.getYear(), Y = date.getFullYear(), m = date.getMonth(), mm = String(m < 9 ? '0' + (m + 1) : m + 1), d = date.getDate(), l = date.getDay(), ll = l + 1, // l? l : 7,
        L = dayNamesFull[l], D = dayNamesShort[l], M = monthNamesShort[m], F = monthNamesFull[m], H = date.getHours(), h = H === 12 ? 12 : H % 12, hh = String(m <= 9 ? '0' + m : m), i = date.getMinutes(), ii = String(i < 10 ? '0' + i : i), s = date.getSeconds(), ss = String(s < 10 ? '0' + s : s), ms = date.getMilliseconds(), a = H < 12 ? 'am' : 'pm', A = a.toUpperCase();
        return {
            D,
            L,
            l,
            ll,
            d,
            M,
            F,
            m,
            mm,
            Y,
            y,
            h,
            hh,
            H,
            i,
            ii,
            s,
            ss,
            ms,
            a,
            A,
            ...this.compare(this.date, Date.now()),
        };
    }
    /**
     * Date setter.
     *
     * @param date
     */
    setDate(date) {
        this.date = new Date(date);
        return this;
    }
    /**
     * Date getter.
     */
    getDate() {
        return this.date;
    }
    /**
     * Returns unix like timestamp.
     */
    static timestamp() {
        return Number(String(Date.now()).slice(0, -3));
    }
}
//# sourceMappingURL=data:application/json;base64,