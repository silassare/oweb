export default class OWebDate {
    constructor(app_context, date = new Date()) {
        this.app_context = app_context;
        this.date = date;
    }
    /**
     * Format date with a given lang key.
     *
     * @param langKey
     */
    format(langKey) {
        return this.app_context.i18n.toHuman(langKey, this.describe());
    }
    /**
     * Returns date description object.
     */
    describe() {
        let i18n = this.app_context.i18n, day_names_short = i18n.toHuman("OW_TIME_DAY_NAMES_SHORT").split(","), day_names_full = i18n.toHuman("OW_TIME_DAY_NAMES_FULL").split(","), month_names_short = i18n.toHuman("OW_TIME_MONTH_NAMES_SHORT").split(","), month_names_full = i18n.toHuman("OW_TIME_MONTH_NAMES_FULL").split(","), date = new Date(this.date), y = date.getYear(), Y = date.getFullYear(), m = date.getMonth(), mm = String(m < 9 ? "0" + (m + 1) : m + 1), d = date.getDate(), l = date.getDay(), ll = l + 1, // l? l : 7,
        L = day_names_full[l], LL = day_names_full[l], D = day_names_short[l], M = month_names_short[m], F = month_names_full[m], H = date.getHours(), i = date.getMinutes(), ii = String(i < 10 ? "0" + i : i), s = date.getSeconds(), ss = String(s < 10 ? "0" + s : s), ms = date.getMilliseconds(), h = (H === 12) ? 12 : H % 12, a = (H < 12) ? "am" : "pm", A = a.toUpperCase();
        return {
            D: D,
            l: l,
            L: L,
            ll: ll,
            LL: LL,
            d: d,
            M: M,
            F: F,
            m: m,
            mm: mm,
            Y: Y,
            y: y,
            h: h,
            H: H,
            i: i,
            ii: ii,
            s: s,
            ss: ss,
            ms: ms,
            a: a,
            A: A
        };
    }
    /**
     * Date setter.
     *
     * @param date
     */
    setDate(date) {
        this.date = new Date(date);
        return this;
    }
    /**
     * Date getter.
     */
    getDate() {
        return this.date;
    }
    /**
     * Returns unix like timestamp.
     */
    static timestamp() {
        return Number(String(Date.now()).slice(0, -3));
    }
}
;
//# sourceMappingURL=data:application/json;base64,