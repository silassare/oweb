const FORMAT_REG = /ms|ss|ii|hh|mm|ll|A|a|s|i|H|h|y|Y|m|F|M|d|l|L|D/g;
export default class OWebDate {
    constructor(_appContext, date = new Date()) {
        this._appContext = _appContext;
        this.date = date;
    }
    /**
     * Format date with a given lang key.
     *
     * @param format
     */
    format(format) {
        const o = this.describe();
        return format.replace(FORMAT_REG, function (k) {
            return k in o ? o[k] : k;
        });
    }
    /**
     * Returns date description object.
     */
    describe() {
        const i18n = this._appContext.i18n, dayNamesShort = i18n.toHuman('OW_TIME_DAY_NAMES_SHORT').split(','), dayNamesFull = i18n.toHuman('OW_TIME_DAY_NAMES_FULL').split(','), monthNamesShort = i18n
            .toHuman('OW_TIME_MONTH_NAMES_SHORT')
            .split(','), monthNamesFull = i18n
            .toHuman('OW_TIME_MONTH_NAMES_FULL')
            .split(','), date = new Date(this.date), y = date.getYear(), Y = date.getFullYear(), m = date.getMonth(), mm = String(m < 9 ? '0' + (m + 1) : m + 1), d = date.getDate(), l = date.getDay(), ll = l + 1, // l? l : 7,
        L = dayNamesFull[l], D = dayNamesShort[l], M = monthNamesShort[m], F = monthNamesFull[m], H = date.getHours(), h = H === 12 ? 12 : H % 12, hh = String(m <= 9 ? '0' + m : m), i = date.getMinutes(), ii = String(i < 10 ? '0' + i : i), s = date.getSeconds(), ss = String(s < 10 ? '0' + s : s), ms = date.getMilliseconds(), a = H < 12 ? 'am' : 'pm', A = a.toUpperCase();
        return {
            D,
            L,
            l,
            ll,
            d,
            M,
            F,
            m,
            mm,
            Y,
            y,
            h,
            hh,
            H,
            i,
            ii,
            s,
            ss,
            ms,
            a,
            A,
        };
    }
    /**
     * Date setter.
     *
     * @param date
     */
    setDate(date) {
        this.date = new Date(date);
        return this;
    }
    /**
     * Date getter.
     */
    getDate() {
        return this.date;
    }
    /**
     * Returns unix like timestamp.
     */
    static timestamp() {
        return Number(String(Date.now()).slice(0, -3));
    }
}
//# sourceMappingURL=data:application/json;base64,