"use strict";
/**
 * D The day of the week in three letters
 * l (L lowercase) The entire day of the week 0 to 6
 * ll (LL lowercase) The entire day of the week 1 to 7
 * d The day of the month
 * M The name of the month in three or four letters
 * F The full name of the month
 * m The number of the month 0 to 11
 * mm The number of the month 01 to 12
 * Y The year in four digits
 * y The year in two digits
 * h Time from 0 to 12
 * H Time from 0 to 23
 * i The minutes 0 to 59
 * s The seconds 0 to 59
 * a am / pm Display
 * A AM / PM display
 *
 * // OWebDate
 * ii The minutes 00, 01,..., 59
 * ss The seconds 00, 01,..., 59
 */
import Utils from "../utils/Utils";
import OWebLang from "../OWebLang";
export default class OWebDate {
    constructor(date) {
        this.date = date;
    }
    format(langKey, langCode) {
        return OWebLang.toHuman(langKey, this.describe(langCode), langCode);
    }
    describe(langCode) {
        let day_names_short = OWebLang.toHuman("OO_TIME_DAY_NAMES_SHORT", langCode).split(","), day_names_full = OWebLang.toHuman("OO_TIME_DAY_NAMES_FULL", langCode).split(","), month_names_short = OWebLang.toHuman("OO_TIME_MONTH_NAMES_SHORT", langCode).split(","), month_names_full = OWebLang.toHuman("OO_TIME_MONTH_NAMES_FULL", langCode).split(","), date = new Date(this.date), y = date.getYear(), Y = date.getFullYear(), m = date.getMonth(), mm = String(m < 9 ? "0" + (m + 1) : m + 1), d = date.getDate(), l = date.getDay(), ll = l + 1, // l? l : 7,
        L = day_names_full[l], LL = day_names_full[l], D = day_names_short[l], M = month_names_short[m], F = month_names_full[m], H = date.getHours(), i = date.getMinutes(), ii = String(i < 10 ? "0" + i : i), s = date.getSeconds(), ss = String(s < 10 ? "0" + s : s), ms = date.getMilliseconds(), h = (H === 12) ? 12 : H % 12, a = (H < 12) ? "am" : "pm", A = a.toUpperCase();
        return {
            D: D,
            l: l,
            L: L,
            ll: ll,
            LL: LL,
            d: d,
            M: M,
            F: F,
            m: m,
            mm: mm,
            Y: Y,
            y: y,
            h: h,
            H: H,
            i: i,
            ii: ii,
            s: s,
            ss: ss,
            ms: ms,
            a: a,
            A: A
        };
    }
    static fromInputValue(date_str) {
        let val = date_str.replace(/ /g, ""), reg_a = /^(\d{4})[\-\/](\d{1,2})[\-\/](\d{1,2})$/, // standard
        reg_b = /^(\d{1,2})[\-\/](\d{1,2})[\-\/](\d{4})$/; // when browser threat date field as text field (in firefox)
        if (reg_a.test(val)) {
            return new OWebDate(date_str);
        }
        if (reg_b.test(val)) {
            return new OWebDate(`${RegExp.$3}-${RegExp.$2}-${RegExp.$1}`);
        }
        return false;
    }
    static timestamp() {
        return Number(String(Date.now()).slice(0, -3));
    }
}
;
OWebLang.addPlugin("oweb_date", function (data = {}, langCode) {
    if (data["owebDate"]) {
        let t = new OWebDate(data["owebDate"]);
        return Utils.assign(data, t.describe(langCode));
    }
    return data;
}).setLangData("fr", {
    "OO_TIME_DAY_NAMES_SHORT": "dim.,lun.,mar.,mer.,jeu.,ven.,sam.",
    "OO_TIME_DAY_NAMES_FULL": "dimanche,lundi,mardi,mercredi,jeudi,vendredi,samedi",
    "OO_TIME_MONTH_NAMES_SHORT": "janv.,f\xe9vr.,mars,avr.,mai,juin,juil.,ao\xfbt,sept.,oct.,nov.,d\xe9c.",
    "OO_TIME_MONTH_NAMES_FULL": "janvier,f\xe9vrier,mars,avril,mai,juin,juillet,ao\xfbt,septembre,octobre,novembre,d\xe9cembre"
}).setLangData("en", {
    "OO_TIME_DAY_NAMES_SHORT": "Sun,Mon,Tue,Wed,Thu,Fri,Sat",
    "OO_TIME_DAY_NAMES_FULL": "Sunday,Monday,Tuesday,Wednesday,Thursday,Friday,Saturday",
    "OO_TIME_MONTH_NAMES_SHORT": "Jan,Feb,Mar,Apr,May,Jun,Jul,Aug,Sep,Oct,Nov,Dec",
    "OO_TIME_MONTH_NAMES_FULL": "January,February,March,April,May,June,July,August,September,October,November,December"
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYkRhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcGx1Z2lucy9PV2ViRGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFFYjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBcUJHO0FBQ0gsT0FBTyxLQUFLLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkMsT0FBTyxRQUFRLE1BQU0sYUFBYSxDQUFDO0FBeUJuQyxNQUFNLENBQUMsT0FBTztJQUViLFlBQTZCLElBQVk7UUFBWixTQUFJLEdBQUosSUFBSSxDQUFRO0lBQ3pDLENBQUM7SUFFRCxNQUFNLENBQUMsT0FBZSxFQUFFLFFBQWdCO1FBQ3ZDLE9BQU8sUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNyRSxDQUFDO0lBRUQsUUFBUSxDQUFDLFFBQWlCO1FBQ3pCLElBQUksZUFBZSxHQUFLLFFBQVEsQ0FBQyxPQUFPLENBQUMseUJBQXlCLEVBQUUsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUN2RixjQUFjLEdBQU0sUUFBUSxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsRUFBRSxRQUFRLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQ25GLGlCQUFpQixHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsMkJBQTJCLEVBQUUsUUFBUSxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUN0RixnQkFBZ0IsR0FBSSxRQUFRLENBQUMsT0FBTyxDQUFDLDBCQUEwQixFQUFFLFFBQVEsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFDckYsSUFBSSxHQUFnQixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQ3ZDLENBQUMsR0FBb0IsSUFBWSxDQUFDLE9BQU8sRUFBRSxFQUMzQyxDQUFDLEdBQW1C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IFRoZSBkYXkgb2YgdGhlIHdlZWsgaW4gdGhyZWUgbGV0dGVyc1xuICogbCAoTCBsb3dlcmNhc2UpIFRoZSBlbnRpcmUgZGF5IG9mIHRoZSB3ZWVrIDAgdG8gNlxuICogbGwgKExMIGxvd2VyY2FzZSkgVGhlIGVudGlyZSBkYXkgb2YgdGhlIHdlZWsgMSB0byA3XG4gKiBkIFRoZSBkYXkgb2YgdGhlIG1vbnRoXG4gKiBNIFRoZSBuYW1lIG9mIHRoZSBtb250aCBpbiB0aHJlZSBvciBmb3VyIGxldHRlcnNcbiAqIEYgVGhlIGZ1bGwgbmFtZSBvZiB0aGUgbW9udGhcbiAqIG0gVGhlIG51bWJlciBvZiB0aGUgbW9udGggMCB0byAxMVxuICogbW0gVGhlIG51bWJlciBvZiB0aGUgbW9udGggMDEgdG8gMTJcbiAqIFkgVGhlIHllYXIgaW4gZm91ciBkaWdpdHNcbiAqIHkgVGhlIHllYXIgaW4gdHdvIGRpZ2l0c1xuICogaCBUaW1lIGZyb20gMCB0byAxMlxuICogSCBUaW1lIGZyb20gMCB0byAyM1xuICogaSBUaGUgbWludXRlcyAwIHRvIDU5XG4gKiBzIFRoZSBzZWNvbmRzIDAgdG8gNTlcbiAqIGEgYW0gLyBwbSBEaXNwbGF5XG4gKiBBIEFNIC8gUE0gZGlzcGxheVxuICpcbiAqIC8vIE9XZWJEYXRlXG4gKiBpaSBUaGUgbWludXRlcyAwMCwgMDEsLi4uLCA1OVxuICogc3MgVGhlIHNlY29uZHMgMDAsIDAxLC4uLiwgNTlcbiAqL1xuaW1wb3J0IFV0aWxzIGZyb20gXCIuLi91dGlscy9VdGlsc1wiO1xuaW1wb3J0IE9XZWJMYW5nIGZyb20gXCIuLi9PV2ViTGFuZ1wiO1xuXG5leHBvcnQgdHlwZSB0RGF0ZURlc2MgPSB7XG5cdEQ6IHN0cmluZyxcblx0bDogbnVtYmVyLFxuXHRMOiBzdHJpbmcsXG5cdGxsOiBudW1iZXIsXG5cdExMOiBzdHJpbmcsXG5cdGQ6IG51bWJlcixcblx0TTogc3RyaW5nLFxuXHRGOiBzdHJpbmcsXG5cdG06IG51bWJlcixcblx0bW06IHN0cmluZyxcblx0WTogbnVtYmVyLFxuXHR5OiBudW1iZXIsXG5cdGg6IG51bWJlcixcblx0SDogbnVtYmVyLFxuXHRpOiBudW1iZXIsXG5cdGlpOiBzdHJpbmcsXG5cdHM6IG51bWJlcixcblx0c3M6IHN0cmluZyxcblx0bXM6IG51bWJlcixcblx0YTogc3RyaW5nLFxuXHRBOiBzdHJpbmdcbn07XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPV2ViRGF0ZSB7XG5cblx0Y29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBkYXRlOiBzdHJpbmcpIHtcblx0fVxuXG5cdGZvcm1hdChsYW5nS2V5OiBzdHJpbmcsIGxhbmdDb2RlOiBzdHJpbmcpOiBzdHJpbmcge1xuXHRcdHJldHVybiBPV2ViTGFuZy50b0h1bWFuKGxhbmdLZXksIHRoaXMuZGVzY3JpYmUobGFuZ0NvZGUpLCBsYW5nQ29kZSk7XG5cdH1cblxuXHRkZXNjcmliZShsYW5nQ29kZT86IHN0cmluZyk6IHREYXRlRGVzYyB7XG5cdFx0bGV0IGRheV9uYW1lc19zaG9ydCAgID0gT1dlYkxhbmcudG9IdW1hbihcIk9PX1RJTUVfREFZX05BTUVTX1NIT1JUXCIsIGxhbmdDb2RlKS5zcGxpdChcIixcIiksXG5cdFx0XHRkYXlfbmFtZXNfZnVsbCAgICA9IE9XZWJMYW5nLnRvSHVtYW4oXCJPT19USU1FX0RBWV9OQU1FU19GVUxMXCIsIGxhbmdDb2RlKS5zcGxpdChcIixcIiksXG5cdFx0XHRtb250aF9uYW1lc19zaG9ydCA9IE9XZWJMYW5nLnRvSHVtYW4oXCJPT19USU1FX01PTlRIX05BTUVTX1NIT1JUXCIsIGxhbmdDb2RlKS5zcGxpdChcIixcIiksXG5cdFx0XHRtb250aF9uYW1lc19mdWxsICA9IE9XZWJMYW5nLnRvSHVtYW4oXCJPT19USU1FX01PTlRIX05BTUVTX0ZVTExcIiwgbGFuZ0NvZGUpLnNwbGl0KFwiLFwiKSxcblx0XHRcdGRhdGUgICAgICAgICAgICAgID0gbmV3IERhdGUodGhpcy5kYXRlKSxcblx0XHRcdHk6IG51bWJlciAgICAgICAgID0gKGRhdGUgYXMgYW55KS5nZXRZZWFyKCksXG5cdFx0XHRZOiBudW1iZXIgICAgICAgICA9IGRhdGUuZ2V0RnVsbFllYXIoKSxcblx0XHRcdG06IG51bWJlciAgICAgICAgID0gZGF0ZS5nZXRNb250aCgpLFxuXHRcdFx0bW06IHN0cmluZyAgICAgICAgPSBTdHJpbmcobSA8IDkgPyBcIjBcIiArIChtICsgMSkgOiBtICsgMSksXG5cdFx0XHRkOiBudW1iZXIgICAgICAgICA9IGRhdGUuZ2V0RGF0ZSgpLFxuXHRcdFx0bDogbnVtYmVyICAgICAgICAgPSBkYXRlLmdldERheSgpLFxuXHRcdFx0bGw6IG51bWJlciAgICAgICAgPSBsICsgMSwvLyBsPyBsIDogNyxcblx0XHRcdEw6IHN0cmluZyAgICAgICAgID0gZGF5X25hbWVzX2Z1bGxbbF0sXG5cdFx0XHRMTDogc3RyaW5nICAgICAgICA9IGRheV9uYW1lc19mdWxsW2xdLFxuXHRcdFx0RDogc3RyaW5nICAgICAgICAgPSBkYXlfbmFtZXNfc2hvcnRbbF0sXG5cdFx0XHRNOiBzdHJpbmcgICAgICAgICA9IG1vbnRoX25hbWVzX3Nob3J0W21dLFxuXHRcdFx0Rjogc3RyaW5nICAgICAgICAgPSBtb250aF9uYW1lc19mdWxsW21dLFxuXHRcdFx0SDogbnVtYmVyICAgICAgICAgPSBkYXRlLmdldEhvdXJzKCksXG5cdFx0XHRpOiBudW1iZXIgICAgICAgICA9IGRhdGUuZ2V0TWludXRlcygpLFxuXHRcdFx0aWk6IHN0cmluZyAgICAgICAgPSBTdHJpbmcoaSA8IDEwID8gXCIwXCIgKyBpIDogaSksXG5cdFx0XHRzOiBudW1iZXIgICAgICAgICA9IGRhdGUuZ2V0U2Vjb25kcygpLFxuXHRcdFx0c3M6IHN0cmluZyAgICAgICAgPSBTdHJpbmcocyA8IDEwID8gXCIwXCIgKyBzIDogcyksXG5cdFx0XHRtczogbnVtYmVyICAgICAgICA9IGRhdGUuZ2V0TWlsbGlzZWNvbmRzKCksXG5cdFx0XHRoOiBudW1iZXIgICAgICAgICA9IChIID09PSAxMikgPyAxMiA6IEggJSAxMixcblx0XHRcdGE6IHN0cmluZyAgICAgICAgID0gKEggPCAxMikgPyBcImFtXCIgOiBcInBtXCIsXG5cdFx0XHRBOiBzdHJpbmcgICAgICAgICA9IGEudG9VcHBlckNhc2UoKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHREIDogRCxcblx0XHRcdGwgOiBsLFxuXHRcdFx0TCA6IEwsXG5cdFx0XHRsbDogbGwsXG5cdFx0XHRMTDogTEwsXG5cdFx0XHRkIDogZCxcblx0XHRcdE0gOiBNLFxuXHRcdFx0RiA6IEYsXG5cdFx0XHRtIDogbSxcblx0XHRcdG1tOiBtbSxcblx0XHRcdFkgOiBZLFxuXHRcdFx0eSA6IHksXG5cdFx0XHRoIDogaCxcblx0XHRcdEggOiBILFxuXHRcdFx0aSA6IGksXG5cdFx0XHRpaTogaWksXG5cdFx0XHRzIDogcyxcblx0XHRcdHNzOiBzcyxcblx0XHRcdG1zOiBtcyxcblx0XHRcdGEgOiBhLFxuXHRcdFx0QSA6IEFcblx0XHR9O1xuXHR9XG5cblx0c3RhdGljIGZyb21JbnB1dFZhbHVlKGRhdGVfc3RyOiBzdHJpbmcpOiBPV2ViRGF0ZSB8IGZhbHNlIHtcblx0XHRsZXQgdmFsICAgPSBkYXRlX3N0ci5yZXBsYWNlKC8gL2csIFwiXCIpLFxuXHRcdFx0cmVnX2EgPSAvXihcXGR7NH0pW1xcLVxcL10oXFxkezEsMn0pW1xcLVxcL10oXFxkezEsMn0pJC8sLy8gc3RhbmRhcmRcblx0XHRcdHJlZ19iID0gL14oXFxkezEsMn0pW1xcLVxcL10oXFxkezEsMn0pW1xcLVxcL10oXFxkezR9KSQvOy8vIHdoZW4gYnJvd3NlciB0aHJlYXQgZGF0ZSBmaWVsZCBhcyB0ZXh0IGZpZWxkIChpbiBmaXJlZm94KVxuXG5cdFx0aWYgKHJlZ19hLnRlc3QodmFsKSkge1xuXHRcdFx0cmV0dXJuIG5ldyBPV2ViRGF0ZShkYXRlX3N0cik7XG5cdFx0fVxuXHRcdGlmIChyZWdfYi50ZXN0KHZhbCkpIHtcblx0XHRcdHJldHVybiBuZXcgT1dlYkRhdGUoYCR7UmVnRXhwLiQzfS0ke1JlZ0V4cC4kMn0tJHtSZWdFeHAuJDF9YCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0c3RhdGljIHRpbWVzdGFtcCgpOiBudW1iZXIge1xuXHRcdHJldHVybiBOdW1iZXIoU3RyaW5nKERhdGUubm93KCkpLnNsaWNlKDAsIC0zKSk7XG5cdH1cbn07XG5cbk9XZWJMYW5nLmFkZFBsdWdpbihcIm93ZWJfZGF0ZVwiLCBmdW5jdGlvbiAoZGF0YTogYW55ID0ge30sIGxhbmdDb2RlOiBzdHJpbmcpIHtcblx0aWYgKGRhdGFbXCJvd2ViRGF0ZVwiXSkge1xuXHRcdGxldCB0ID0gbmV3IE9XZWJEYXRlKGRhdGFbXCJvd2ViRGF0ZVwiXSk7XG5cdFx0cmV0dXJuIFV0aWxzLmFzc2lnbihkYXRhLCB0LmRlc2NyaWJlKGxhbmdDb2RlKSk7XG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcbn0pLnNldExhbmdEYXRhKFwiZnJcIiwge1xuXHRcIk9PX1RJTUVfREFZX05BTUVTX1NIT1JUXCIgIDogXCJkaW0uLGx1bi4sbWFyLixtZXIuLGpldS4sdmVuLixzYW0uXCIsXG5cdFwiT09fVElNRV9EQVlfTkFNRVNfRlVMTFwiICAgOiBcImRpbWFuY2hlLGx1bmRpLG1hcmRpLG1lcmNyZWRpLGpldWRpLHZlbmRyZWRpLHNhbWVkaVwiLFxuXHRcIk9PX1RJTUVfTU9OVEhfTkFNRVNfU0hPUlRcIjogXCJqYW52LixmXFx4ZTl2ci4sbWFycyxhdnIuLG1haSxqdWluLGp1aWwuLGFvXFx4ZmJ0LHNlcHQuLG9jdC4sbm92LixkXFx4ZTljLlwiLFxuXHRcIk9PX1RJTUVfTU9OVEhfTkFNRVNfRlVMTFwiIDogXCJqYW52aWVyLGZcXHhlOXZyaWVyLG1hcnMsYXZyaWwsbWFpLGp1aW4sanVpbGxldCxhb1xceGZidCxzZXB0ZW1icmUsb2N0b2JyZSxub3ZlbWJyZSxkXFx4ZTljZW1icmVcIlxufSkuc2V0TGFuZ0RhdGEoXCJlblwiLCB7XG5cdFwiT09fVElNRV9EQVlfTkFNRVNfU0hPUlRcIiAgOiBcIlN1bixNb24sVHVlLFdlZCxUaHUsRnJpLFNhdFwiLFxuXHRcIk9PX1RJTUVfREFZX05BTUVTX0ZVTExcIiAgIDogXCJTdW5kYXksTW9uZGF5LFR1ZXNkYXksV2VkbmVzZGF5LFRodXJzZGF5LEZyaWRheSxTYXR1cmRheVwiLFxuXHRcIk9PX1RJTUVfTU9OVEhfTkFNRVNfU0hPUlRcIjogXCJKYW4sRmViLE1hcixBcHIsTWF5LEp1bixKdWwsQXVnLFNlcCxPY3QsTm92LERlY1wiLFxuXHRcIk9PX1RJTUVfTU9OVEhfTkFNRVNfRlVMTFwiIDogXCJKYW51YXJ5LEZlYnJ1YXJ5LE1hcmNoLEFwcmlsLE1heSxKdW5lLEp1bHksQXVndXN0LFNlcHRlbWJlcixPY3RvYmVyLE5vdmVtYmVyLERlY2VtYmVyXCJcbn0pOyJdfQ==