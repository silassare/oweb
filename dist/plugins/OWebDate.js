export default class OWebDate {
    constructor(appContext, date = new Date()) {
        this.appContext = appContext;
        this.date = date;
    }
    /**
     * Format date with a given lang key.
     *
     * @param langKey
     */
    format(langKey) {
        return this.appContext.i18n.toHuman(langKey, this.describe());
    }
    /**
     * Returns date description object.
     */
    describe() {
        const i18n = this.appContext.i18n, dayNamesShort = i18n.toHuman('OW_TIME_DAY_NAMES_SHORT').split(','), dayNamesFull = i18n.toHuman('OW_TIME_DAY_NAMES_FULL').split(','), monthNamesShort = i18n
            .toHuman('OW_TIME_MONTH_NAMES_SHORT')
            .split(','), monthNamesFull = i18n
            .toHuman('OW_TIME_MONTH_NAMES_FULL')
            .split(','), date = new Date(this.date), y = date.getYear(), Y = date.getFullYear(), m = date.getMonth(), mm = String(m < 9 ? '0' + (m + 1) : m + 1), d = date.getDate(), l = date.getDay(), ll = l + 1, // l? l : 7,
        L = dayNamesFull[l], LL = dayNamesFull[l], D = dayNamesShort[l], M = monthNamesShort[m], F = monthNamesFull[m], H = date.getHours(), i = date.getMinutes(), ii = String(i < 10 ? '0' + i : i), s = date.getSeconds(), ss = String(s < 10 ? '0' + s : s), ms = date.getMilliseconds(), h = H === 12 ? 12 : H % 12, a = H < 12 ? 'am' : 'pm', A = a.toUpperCase();
        return {
            D,
            l,
            L,
            ll,
            LL,
            d,
            M,
            F,
            m,
            mm,
            Y,
            y,
            h,
            H,
            i,
            ii,
            s,
            ss,
            ms,
            a,
            A,
        };
    }
    /**
     * Date setter.
     *
     * @param date
     */
    setDate(date) {
        this.date = new Date(date);
        return this;
    }
    /**
     * Date getter.
     */
    getDate() {
        return this.date;
    }
    /**
     * Returns unix like timestamp.
     */
    static timestamp() {
        return Number(String(Date.now()).slice(0, -3));
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYkRhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcGx1Z2lucy9PV2ViRGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFpREEsTUFBTSxDQUFDLE9BQU8sT0FBTyxRQUFRO0lBQzVCLFlBQ1MsVUFBbUIsRUFDbkIsT0FBbUIsSUFBSSxJQUFJLEVBQUU7UUFEN0IsZUFBVSxHQUFWLFVBQVUsQ0FBUztRQUNuQixTQUFJLEdBQUosSUFBSSxDQUF5QjtJQUNuQyxDQUFDO0lBRUo7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxPQUFlO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxRQUFRO1FBQ1AsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQ2hDLGFBQWEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLHlCQUF5QixDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUNsRSxZQUFZLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFDaEUsZUFBZSxHQUFHLElBQUk7YUFDcEIsT0FBTyxDQUFDLDJCQUEyQixDQUFDO2FBQ3BDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFDWixjQUFjLEdBQUcsSUFBSTthQUNuQixPQUFPLENBQUMsMEJBQTBCLENBQUM7YUFDbkMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUNaLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQzFCLENBQUMsR0FBWSxJQUFZLENBQUMsT0FBTyxFQUFFLEVBQ25DLENBQUMsR0FBVyxJQUFJLENBQUMsV0FBVyxFQUFFLEVBQzlCLENBQUMsR0FBVyxJQUFJLENBQUMsUUFBUSxFQUFFLEVBQzNCLEVBQUUsR0FBVyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQ2xELENBQUMsR0FBVyxJQUFJLENBQUMsT0FBTyxFQUFFLEVBQzFCLENBQUMsR0FBVyxJQUFJLENBQUMsTUFBTSxFQUFFLEVBQ3pCLEVBQUUsR0FBVyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFlBQVk7UUFDaEMsQ0FBQyxHQUFXLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFDM0IsRUFBRSxHQUFXLFlBQVksQ0FBQyxDQUFDLENBQUMsRUFDNUIsQ0FBQyxHQUFXLGFBQWEsQ0FBQyxDQUFDLENBQUMsRUFDNUIsQ0FBQyxHQUFXLGVBQWUsQ0FBQyxDQUFDLENBQUMsRUFDOUIsQ0FBQyxHQUFXLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFDN0IsQ0FBQyxHQUFXLElBQUksQ0FBQyxRQUFRLEVBQUUsRUFDM0IsQ0FBQyxHQUFXLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFDN0IsRUFBRSxHQUFXLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDekMsQ0FBQyxHQUFXLElBQUksQ0FBQyxVQUFVLEVBQUUsRUFDN0IsRUFBRSxHQUFXLE1BQU0sQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDekMsRUFBRSxHQUFXLElBQUksQ0FBQyxlQUFlLEVBQUUsRUFDbkMsQ0FBQyxHQUFXLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFDbEMsQ0FBQyxHQUFXLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUNoQyxDQUFDLEdBQVcsQ0FBQyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBRTdCLE9BQU87WUFDTixDQUFDO1lBQ0QsQ0FBQztZQUNELENBQUM7WUFDRCxFQUFFO1lBQ0YsRUFBRTtZQUNGLENBQUM7WUFDRCxDQUFDO1lBQ0QsQ0FBQztZQUNELENBQUM7WUFDRCxFQUFFO1lBQ0YsQ0FBQztZQUNELENBQUM7WUFDRCxDQUFDO1lBQ0QsQ0FBQztZQUNELENBQUM7WUFDRCxFQUFFO1lBQ0YsQ0FBQztZQUNELEVBQUU7WUFDRixFQUFFO1lBQ0YsQ0FBQztZQUNELENBQUM7U0FDRCxDQUFDO0lBQ0gsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxPQUFPLENBQUMsSUFBZ0I7UUFDdkIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzQixPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFRDs7T0FFRztJQUNILE9BQU87UUFDTixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDbEIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsTUFBTSxDQUFDLFNBQVM7UUFDZixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEQsQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBEIFRoZSBkYXkgb2YgdGhlIHdlZWsgaW4gdGhyZWUgbGV0dGVyc1xuICogbCAoTCBsb3dlcmNhc2UpIFRoZSBlbnRpcmUgZGF5IG9mIHRoZSB3ZWVrIDAgdG8gNlxuICogbGwgKExMIGxvd2VyY2FzZSkgVGhlIGVudGlyZSBkYXkgb2YgdGhlIHdlZWsgMSB0byA3XG4gKiBkIFRoZSBkYXkgb2YgdGhlIG1vbnRoXG4gKiBNIFRoZSBuYW1lIG9mIHRoZSBtb250aCBpbiB0aHJlZSBvciBmb3VyIGxldHRlcnNcbiAqIEYgVGhlIGZ1bGwgbmFtZSBvZiB0aGUgbW9udGhcbiAqIG0gVGhlIG51bWJlciBvZiB0aGUgbW9udGggMCB0byAxMVxuICogbW0gVGhlIG51bWJlciBvZiB0aGUgbW9udGggMDEgdG8gMTJcbiAqIFkgVGhlIHllYXIgaW4gZm91ciBkaWdpdHNcbiAqIHkgVGhlIHllYXIgaW4gdHdvIGRpZ2l0c1xuICogaCBUaW1lIGZyb20gMCB0byAxMlxuICogSCBUaW1lIGZyb20gMCB0byAyM1xuICogaSBUaGUgbWludXRlcyAwIHRvIDU5XG4gKiBzIFRoZSBzZWNvbmRzIDAgdG8gNTlcbiAqIGEgYW0gLyBwbSBEaXNwbGF5XG4gKiBBIEFNIC8gUE0gZGlzcGxheVxuICpcbiAqIC8vIE9XZWJEYXRlXG4gKiBpaSBUaGUgbWludXRlcyAwMCwgMDEsLi4uLCA1OVxuICogc3MgVGhlIHNlY29uZHMgMDAsIDAxLC4uLiwgNTlcbiAqL1xuaW1wb3J0IE9XZWJBcHAgZnJvbSAnLi4vT1dlYkFwcCc7XG5cbmV4cG9ydCB0eXBlIHREYXRlVmFsdWUgPSBEYXRlIHwgbnVtYmVyIHwgc3RyaW5nO1xuZXhwb3J0IHR5cGUgdERhdGVEZXNjID0ge1xuXHREOiBzdHJpbmc7XG5cdGw6IG51bWJlcjtcblx0TDogc3RyaW5nO1xuXHRsbDogbnVtYmVyO1xuXHRMTDogc3RyaW5nO1xuXHRkOiBudW1iZXI7XG5cdE06IHN0cmluZztcblx0Rjogc3RyaW5nO1xuXHRtOiBudW1iZXI7XG5cdG1tOiBzdHJpbmc7XG5cdFk6IG51bWJlcjtcblx0eTogbnVtYmVyO1xuXHRoOiBudW1iZXI7XG5cdEg6IG51bWJlcjtcblx0aTogbnVtYmVyO1xuXHRpaTogc3RyaW5nO1xuXHRzOiBudW1iZXI7XG5cdHNzOiBzdHJpbmc7XG5cdG1zOiBudW1iZXI7XG5cdGE6IHN0cmluZztcblx0QTogc3RyaW5nO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT1dlYkRhdGUge1xuXHRjb25zdHJ1Y3Rvcihcblx0XHRwcml2YXRlIGFwcENvbnRleHQ6IE9XZWJBcHAsXG5cdFx0cHJpdmF0ZSBkYXRlOiB0RGF0ZVZhbHVlID0gbmV3IERhdGUoKSxcblx0KSB7fVxuXG5cdC8qKlxuXHQgKiBGb3JtYXQgZGF0ZSB3aXRoIGEgZ2l2ZW4gbGFuZyBrZXkuXG5cdCAqXG5cdCAqIEBwYXJhbSBsYW5nS2V5XG5cdCAqL1xuXHRmb3JtYXQobGFuZ0tleTogc3RyaW5nKTogc3RyaW5nIHtcblx0XHRyZXR1cm4gdGhpcy5hcHBDb250ZXh0LmkxOG4udG9IdW1hbihsYW5nS2V5LCB0aGlzLmRlc2NyaWJlKCkpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgZGF0ZSBkZXNjcmlwdGlvbiBvYmplY3QuXG5cdCAqL1xuXHRkZXNjcmliZSgpOiB0RGF0ZURlc2Mge1xuXHRcdGNvbnN0IGkxOG4gPSB0aGlzLmFwcENvbnRleHQuaTE4bixcblx0XHRcdGRheU5hbWVzU2hvcnQgPSBpMThuLnRvSHVtYW4oJ09XX1RJTUVfREFZX05BTUVTX1NIT1JUJykuc3BsaXQoJywnKSxcblx0XHRcdGRheU5hbWVzRnVsbCA9IGkxOG4udG9IdW1hbignT1dfVElNRV9EQVlfTkFNRVNfRlVMTCcpLnNwbGl0KCcsJyksXG5cdFx0XHRtb250aE5hbWVzU2hvcnQgPSBpMThuXG5cdFx0XHRcdC50b0h1bWFuKCdPV19USU1FX01PTlRIX05BTUVTX1NIT1JUJylcblx0XHRcdFx0LnNwbGl0KCcsJyksXG5cdFx0XHRtb250aE5hbWVzRnVsbCA9IGkxOG5cblx0XHRcdFx0LnRvSHVtYW4oJ09XX1RJTUVfTU9OVEhfTkFNRVNfRlVMTCcpXG5cdFx0XHRcdC5zcGxpdCgnLCcpLFxuXHRcdFx0ZGF0ZSA9IG5ldyBEYXRlKHRoaXMuZGF0ZSksXG5cdFx0XHR5OiBudW1iZXIgPSAoZGF0ZSBhcyBhbnkpLmdldFllYXIoKSxcblx0XHRcdFk6IG51bWJlciA9IGRhdGUuZ2V0RnVsbFllYXIoKSxcblx0XHRcdG06IG51bWJlciA9IGRhdGUuZ2V0TW9udGgoKSxcblx0XHRcdG1tOiBzdHJpbmcgPSBTdHJpbmcobSA8IDkgPyAnMCcgKyAobSArIDEpIDogbSArIDEpLFxuXHRcdFx0ZDogbnVtYmVyID0gZGF0ZS5nZXREYXRlKCksXG5cdFx0XHRsOiBudW1iZXIgPSBkYXRlLmdldERheSgpLFxuXHRcdFx0bGw6IG51bWJlciA9IGwgKyAxLCAvLyBsPyBsIDogNyxcblx0XHRcdEw6IHN0cmluZyA9IGRheU5hbWVzRnVsbFtsXSxcblx0XHRcdExMOiBzdHJpbmcgPSBkYXlOYW1lc0Z1bGxbbF0sXG5cdFx0XHREOiBzdHJpbmcgPSBkYXlOYW1lc1Nob3J0W2xdLFxuXHRcdFx0TTogc3RyaW5nID0gbW9udGhOYW1lc1Nob3J0W21dLFxuXHRcdFx0Rjogc3RyaW5nID0gbW9udGhOYW1lc0Z1bGxbbV0sXG5cdFx0XHRIOiBudW1iZXIgPSBkYXRlLmdldEhvdXJzKCksXG5cdFx0XHRpOiBudW1iZXIgPSBkYXRlLmdldE1pbnV0ZXMoKSxcblx0XHRcdGlpOiBzdHJpbmcgPSBTdHJpbmcoaSA8IDEwID8gJzAnICsgaSA6IGkpLFxuXHRcdFx0czogbnVtYmVyID0gZGF0ZS5nZXRTZWNvbmRzKCksXG5cdFx0XHRzczogc3RyaW5nID0gU3RyaW5nKHMgPCAxMCA/ICcwJyArIHMgOiBzKSxcblx0XHRcdG1zOiBudW1iZXIgPSBkYXRlLmdldE1pbGxpc2Vjb25kcygpLFxuXHRcdFx0aDogbnVtYmVyID0gSCA9PT0gMTIgPyAxMiA6IEggJSAxMixcblx0XHRcdGE6IHN0cmluZyA9IEggPCAxMiA/ICdhbScgOiAncG0nLFxuXHRcdFx0QTogc3RyaW5nID0gYS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0cmV0dXJuIHtcblx0XHRcdEQsXG5cdFx0XHRsLFxuXHRcdFx0TCxcblx0XHRcdGxsLFxuXHRcdFx0TEwsXG5cdFx0XHRkLFxuXHRcdFx0TSxcblx0XHRcdEYsXG5cdFx0XHRtLFxuXHRcdFx0bW0sXG5cdFx0XHRZLFxuXHRcdFx0eSxcblx0XHRcdGgsXG5cdFx0XHRILFxuXHRcdFx0aSxcblx0XHRcdGlpLFxuXHRcdFx0cyxcblx0XHRcdHNzLFxuXHRcdFx0bXMsXG5cdFx0XHRhLFxuXHRcdFx0QSxcblx0XHR9O1xuXHR9XG5cblx0LyoqXG5cdCAqIERhdGUgc2V0dGVyLlxuXHQgKlxuXHQgKiBAcGFyYW0gZGF0ZVxuXHQgKi9cblx0c2V0RGF0ZShkYXRlOiB0RGF0ZVZhbHVlKTogdGhpcyB7XG5cdFx0dGhpcy5kYXRlID0gbmV3IERhdGUoZGF0ZSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogRGF0ZSBnZXR0ZXIuXG5cdCAqL1xuXHRnZXREYXRlKCk6IHREYXRlVmFsdWUge1xuXHRcdHJldHVybiB0aGlzLmRhdGU7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyB1bml4IGxpa2UgdGltZXN0YW1wLlxuXHQgKi9cblx0c3RhdGljIHRpbWVzdGFtcCgpOiBudW1iZXIge1xuXHRcdHJldHVybiBOdW1iZXIoU3RyaW5nKERhdGUubm93KCkpLnNsaWNlKDAsIC0zKSk7XG5cdH1cbn1cbiJdfQ==