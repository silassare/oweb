"use strict";
import OWebEvent from "../OWebEvent";
export default class OWebLogin extends OWebEvent {
    constructor(app_context) {
        super();
        this.app_context = app_context;
    }
    loginWithEmail(form) {
        let m = this, ofv = this.app_context.getFormValidator(form, ["email", "pass"]);
        if (ofv.validate()) {
            let data = {
                email: ofv.getField("email"),
                pass: ofv.getField("pass")
            };
            m._tryLogin(data);
        }
    }
    loginWithPhone(form) {
        let m = this, ofv = this.app_context.getFormValidator(form, ["phone", "pass"]);
        if (ofv.validate()) {
            let data = {
                phone: ofv.getField("phone"),
                pass: ofv.getField("pass")
            };
            m._tryLogin(data);
        }
    }
    _tryLogin(data) {
        let m = this, url = this.app_context.url.get("OZ_SERVER_LOGIN_SERVICE");
        this.app_context.request("POST", url, data, function (response) {
            m.trigger(OWebLogin.EVT_LOGIN_SUCCESS, [response]);
        }, function (response) {
            m.trigger(OWebLogin.EVT_LOGIN_ERROR, [response]);
        }, true);
    }
}
OWebLogin.SELF = "OWebLogin";
OWebLogin.EVT_LOGIN_ERROR = "OWebLogin:error";
OWebLogin.EVT_LOGIN_SUCCESS = "OWebLogin:success";
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYkxvZ2luLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3BsdWdpbnMvT1dlYkxvZ2luLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLFlBQVksQ0FBQztBQUViLE9BQU8sU0FBUyxNQUFNLGNBQWMsQ0FBQztBQUdyQyxNQUFNLENBQUMsT0FBTyxnQkFBaUIsU0FBUSxTQUFTO0lBTS9DLFlBQTZCLFdBQW9CO1FBQ2hELEtBQUssRUFBRSxDQUFDO1FBRG9CLGdCQUFXLEdBQVgsV0FBVyxDQUFTO0lBRWpELENBQUM7SUFFRCxjQUFjLENBQUMsSUFBcUI7UUFDbkMsSUFBSSxDQUFDLEdBQUssSUFBSSxFQUNiLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBRWxFLElBQUksR0FBRyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ25CLElBQUksSUFBSSxHQUFHO2dCQUNWLEtBQUssRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztnQkFDNUIsSUFBSSxFQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO2FBQzNCLENBQUM7WUFFRixDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2xCO0lBQ0YsQ0FBQztJQUVELGNBQWMsQ0FBQyxJQUFxQjtRQUNuQyxJQUFJLENBQUMsR0FBSyxJQUFJLEVBQ2IsR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFFbEUsSUFBSSxHQUFHLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDbkIsSUFBSSxJQUFJLEdBQUc7Z0JBQ1YsS0FBSyxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO2dCQUM1QixJQUFJLEVBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7YUFDM0IsQ0FBQztZQUVGLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDbEI7SUFDRixDQUFDO0lBRUQsU0FBUyxDQUFDLElBQVM7UUFDbEIsSUFBSSxDQUFDLEdBQUssSUFBSSxFQUNiLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMseUJBQXlCLENBQUMsQ0FBQztRQUUzRCxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxVQUFVLFFBQWE7WUFDbEUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ3BELENBQUMsRUFBRSxVQUFVLFFBQWE7WUFDekIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsZUFBZSxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNsRCxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDVixDQUFDOztBQTdDZSxjQUFJLEdBQWdCLFdBQVcsQ0FBQztBQUNoQyx5QkFBZSxHQUFLLGlCQUFpQixDQUFDO0FBQ3RDLDJCQUFpQixHQUFHLG1CQUFtQixDQUFDO0FBNEN4RCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgT1dlYkV2ZW50IGZyb20gXCIuLi9PV2ViRXZlbnRcIjtcclxuaW1wb3J0IE9XZWJBcHAgZnJvbSBcIi4uL09XZWJBcHBcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9XZWJMb2dpbiBleHRlbmRzIE9XZWJFdmVudCB7XHJcblxyXG5cdHN0YXRpYyByZWFkb25seSBTRUxGICAgICAgICAgICAgICA9IFwiT1dlYkxvZ2luXCI7XHJcblx0c3RhdGljIHJlYWRvbmx5IEVWVF9MT0dJTl9FUlJPUiAgID0gXCJPV2ViTG9naW46ZXJyb3JcIjtcclxuXHRzdGF0aWMgcmVhZG9ubHkgRVZUX0xPR0lOX1NVQ0NFU1MgPSBcIk9XZWJMb2dpbjpzdWNjZXNzXCI7XHJcblxyXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgYXBwX2NvbnRleHQ6IE9XZWJBcHApIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0fVxyXG5cclxuXHRsb2dpbldpdGhFbWFpbChmb3JtOiBIVE1MRm9ybUVsZW1lbnQpIHtcclxuXHRcdGxldCBtICAgPSB0aGlzLFxyXG5cdFx0XHRvZnYgPSB0aGlzLmFwcF9jb250ZXh0LmdldEZvcm1WYWxpZGF0b3IoZm9ybSwgW1wiZW1haWxcIiwgXCJwYXNzXCJdKTtcclxuXHJcblx0XHRpZiAob2Z2LnZhbGlkYXRlKCkpIHtcclxuXHRcdFx0bGV0IGRhdGEgPSB7XHJcblx0XHRcdFx0ZW1haWw6IG9mdi5nZXRGaWVsZChcImVtYWlsXCIpLFxyXG5cdFx0XHRcdHBhc3MgOiBvZnYuZ2V0RmllbGQoXCJwYXNzXCIpXHJcblx0XHRcdH07XHJcblxyXG5cdFx0XHRtLl90cnlMb2dpbihkYXRhKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdGxvZ2luV2l0aFBob25lKGZvcm06IEhUTUxGb3JtRWxlbWVudCkge1xyXG5cdFx0bGV0IG0gICA9IHRoaXMsXHJcblx0XHRcdG9mdiA9IHRoaXMuYXBwX2NvbnRleHQuZ2V0Rm9ybVZhbGlkYXRvcihmb3JtLCBbXCJwaG9uZVwiLCBcInBhc3NcIl0pO1xyXG5cclxuXHRcdGlmIChvZnYudmFsaWRhdGUoKSkge1xyXG5cdFx0XHRsZXQgZGF0YSA9IHtcclxuXHRcdFx0XHRwaG9uZTogb2Z2LmdldEZpZWxkKFwicGhvbmVcIiksXHJcblx0XHRcdFx0cGFzcyA6IG9mdi5nZXRGaWVsZChcInBhc3NcIilcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdG0uX3RyeUxvZ2luKGRhdGEpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0X3RyeUxvZ2luKGRhdGE6IGFueSkge1xyXG5cdFx0bGV0IG0gICA9IHRoaXMsXHJcblx0XHRcdHVybCA9IHRoaXMuYXBwX2NvbnRleHQudXJsLmdldChcIk9aX1NFUlZFUl9MT0dJTl9TRVJWSUNFXCIpO1xyXG5cclxuXHRcdHRoaXMuYXBwX2NvbnRleHQucmVxdWVzdChcIlBPU1RcIiwgdXJsLCBkYXRhLCBmdW5jdGlvbiAocmVzcG9uc2U6IGFueSkge1xyXG5cdFx0XHRtLnRyaWdnZXIoT1dlYkxvZ2luLkVWVF9MT0dJTl9TVUNDRVNTLCBbcmVzcG9uc2VdKTtcclxuXHRcdH0sIGZ1bmN0aW9uIChyZXNwb25zZTogYW55KSB7XHJcblx0XHRcdG0udHJpZ2dlcihPV2ViTG9naW4uRVZUX0xPR0lOX0VSUk9SLCBbcmVzcG9uc2VdKTtcclxuXHRcdH0sIHRydWUpO1xyXG5cdH1cclxufTtcclxuIl19