import { OWebEvent } from "../oweb";
export default class OWebLogin extends OWebEvent {
    constructor(app_context) {
        super();
        this.app_context = app_context;
    }
    loginWithEmail(form) {
        let m = this, ofv = this.app_context.getFormValidator(form, ["email", "pass"]);
        if (ofv.validate()) {
            let data = {
                email: ofv.getField("email"),
                pass: ofv.getField("pass")
            };
            m._tryLogin(data);
        }
    }
    loginWithPhone(form) {
        let m = this, ofv = this.app_context.getFormValidator(form, ["phone", "pass"]);
        if (ofv.validate()) {
            let data = {
                phone: ofv.getField("phone"),
                pass: ofv.getField("pass")
            };
            m._tryLogin(data);
        }
    }
    _tryLogin(data) {
        let m = this, url = this.app_context.url.get("OZ_SERVER_LOGIN_SERVICE");
        this.app_context.request("POST", url, data, function (response) {
            m.trigger(OWebLogin.EVT_LOGIN_SUCCESS, [response]);
        }, function (response) {
            m.trigger(OWebLogin.EVT_LOGIN_ERROR, [response]);
        }, true);
    }
}
OWebLogin.SELF = "OWebLogin";
OWebLogin.EVT_LOGIN_ERROR = "OWebLogin:error";
OWebLogin.EVT_LOGIN_SUCCESS = "OWebLogin:success";
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYkxvZ2luLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3BsdWdpbnMvT1dlYkxvZ2luLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBVSxTQUFTLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFFM0MsTUFBTSxDQUFDLE9BQU8sZ0JBQWlCLFNBQVEsU0FBUztJQU0vQyxZQUE2QixXQUFvQjtRQUNoRCxLQUFLLEVBQUUsQ0FBQztRQURvQixnQkFBVyxHQUFYLFdBQVcsQ0FBUztJQUVqRCxDQUFDO0lBRUQsY0FBYyxDQUFDLElBQXFCO1FBQ25DLElBQUksQ0FBQyxHQUFLLElBQUksRUFDYixHQUFHLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUVsRSxJQUFJLEdBQUcsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUNuQixJQUFJLElBQUksR0FBRztnQkFDVixLQUFLLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7Z0JBQzVCLElBQUksRUFBRyxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQzthQUMzQixDQUFDO1lBRUYsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNsQjtJQUNGLENBQUM7SUFFRCxjQUFjLENBQUMsSUFBcUI7UUFDbkMsSUFBSSxDQUFDLEdBQUssSUFBSSxFQUNiLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBRWxFLElBQUksR0FBRyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ25CLElBQUksSUFBSSxHQUFHO2dCQUNWLEtBQUssRUFBRSxHQUFHLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztnQkFDNUIsSUFBSSxFQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO2FBQzNCLENBQUM7WUFFRixDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2xCO0lBQ0YsQ0FBQztJQUVELFNBQVMsQ0FBQyxJQUFTO1FBQ2xCLElBQUksQ0FBQyxHQUFLLElBQUksRUFDYixHQUFHLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLHlCQUF5QixDQUFDLENBQUM7UUFFM0QsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsVUFBVSxRQUFhO1lBQ2xFLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLGlCQUFpQixFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUNwRCxDQUFDLEVBQUUsVUFBVSxRQUFhO1lBQ3pCLENBQUMsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLGVBQWUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDbEQsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ1YsQ0FBQzs7QUE3Q2UsY0FBSSxHQUFnQixXQUFXLENBQUM7QUFDaEMseUJBQWUsR0FBSyxpQkFBaUIsQ0FBQztBQUN0QywyQkFBaUIsR0FBRyxtQkFBbUIsQ0FBQztBQTRDeEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7T1dlYkFwcCwgT1dlYkV2ZW50fSBmcm9tIFwiLi4vb3dlYlwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT1dlYkxvZ2luIGV4dGVuZHMgT1dlYkV2ZW50IHtcclxuXHJcblx0c3RhdGljIHJlYWRvbmx5IFNFTEYgICAgICAgICAgICAgID0gXCJPV2ViTG9naW5cIjtcclxuXHRzdGF0aWMgcmVhZG9ubHkgRVZUX0xPR0lOX0VSUk9SICAgPSBcIk9XZWJMb2dpbjplcnJvclwiO1xyXG5cdHN0YXRpYyByZWFkb25seSBFVlRfTE9HSU5fU1VDQ0VTUyA9IFwiT1dlYkxvZ2luOnN1Y2Nlc3NcIjtcclxuXHJcblx0Y29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBhcHBfY29udGV4dDogT1dlYkFwcCkge1xyXG5cdFx0c3VwZXIoKTtcclxuXHR9XHJcblxyXG5cdGxvZ2luV2l0aEVtYWlsKGZvcm06IEhUTUxGb3JtRWxlbWVudCkge1xyXG5cdFx0bGV0IG0gICA9IHRoaXMsXHJcblx0XHRcdG9mdiA9IHRoaXMuYXBwX2NvbnRleHQuZ2V0Rm9ybVZhbGlkYXRvcihmb3JtLCBbXCJlbWFpbFwiLCBcInBhc3NcIl0pO1xyXG5cclxuXHRcdGlmIChvZnYudmFsaWRhdGUoKSkge1xyXG5cdFx0XHRsZXQgZGF0YSA9IHtcclxuXHRcdFx0XHRlbWFpbDogb2Z2LmdldEZpZWxkKFwiZW1haWxcIiksXHJcblx0XHRcdFx0cGFzcyA6IG9mdi5nZXRGaWVsZChcInBhc3NcIilcclxuXHRcdFx0fTtcclxuXHJcblx0XHRcdG0uX3RyeUxvZ2luKGRhdGEpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0bG9naW5XaXRoUGhvbmUoZm9ybTogSFRNTEZvcm1FbGVtZW50KSB7XHJcblx0XHRsZXQgbSAgID0gdGhpcyxcclxuXHRcdFx0b2Z2ID0gdGhpcy5hcHBfY29udGV4dC5nZXRGb3JtVmFsaWRhdG9yKGZvcm0sIFtcInBob25lXCIsIFwicGFzc1wiXSk7XHJcblxyXG5cdFx0aWYgKG9mdi52YWxpZGF0ZSgpKSB7XHJcblx0XHRcdGxldCBkYXRhID0ge1xyXG5cdFx0XHRcdHBob25lOiBvZnYuZ2V0RmllbGQoXCJwaG9uZVwiKSxcclxuXHRcdFx0XHRwYXNzIDogb2Z2LmdldEZpZWxkKFwicGFzc1wiKVxyXG5cdFx0XHR9O1xyXG5cclxuXHRcdFx0bS5fdHJ5TG9naW4oZGF0YSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRfdHJ5TG9naW4oZGF0YTogYW55KSB7XHJcblx0XHRsZXQgbSAgID0gdGhpcyxcclxuXHRcdFx0dXJsID0gdGhpcy5hcHBfY29udGV4dC51cmwuZ2V0KFwiT1pfU0VSVkVSX0xPR0lOX1NFUlZJQ0VcIik7XHJcblxyXG5cdFx0dGhpcy5hcHBfY29udGV4dC5yZXF1ZXN0KFwiUE9TVFwiLCB1cmwsIGRhdGEsIGZ1bmN0aW9uIChyZXNwb25zZTogYW55KSB7XHJcblx0XHRcdG0udHJpZ2dlcihPV2ViTG9naW4uRVZUX0xPR0lOX1NVQ0NFU1MsIFtyZXNwb25zZV0pO1xyXG5cdFx0fSwgZnVuY3Rpb24gKHJlc3BvbnNlOiBhbnkpIHtcclxuXHRcdFx0bS50cmlnZ2VyKE9XZWJMb2dpbi5FVlRfTE9HSU5fRVJST1IsIFtyZXNwb25zZV0pO1xyXG5cdFx0fSwgdHJ1ZSk7XHJcblx0fVxyXG59O1xyXG4iXX0=