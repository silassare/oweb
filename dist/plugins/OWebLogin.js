import OWebEvent from '../OWebEvent';
import { id } from '../utils';
export default class OWebLogin extends OWebEvent {
    constructor(_appContext) {
        super();
        this._appContext = _appContext;
    }
    loginWithEmail(data) {
        return this._tryLogin({
            email: data.email,
            pass: data.pass,
        });
    }
    loginWithPhone(data) {
        return this._tryLogin({
            phone: data.phone,
            pass: data.pass,
        });
    }
    onLoginFail(handler) {
        return this.on(OWebLogin.EVT_LOGIN_FAIL, handler);
    }
    onLoginSuccess(handler) {
        return this.on(OWebLogin.EVT_LOGIN_SUCCESS, handler);
    }
    _tryLogin(data) {
        const m = this, url = m._appContext.url.get('OZ_SERVER_LOGIN_SERVICE'), net = m._appContext.oz.request(url, {
            method: 'POST',
            body: data,
        });
        return net
            .onGoodNews(function (response) {
            m.trigger(OWebLogin.EVT_LOGIN_SUCCESS, [response]);
        })
            .onFail(function (err) {
            m.trigger(OWebLogin.EVT_LOGIN_FAIL, [err]);
        })
            .send();
    }
}
OWebLogin.SELF = id();
OWebLogin.EVT_LOGIN_FAIL = id();
OWebLogin.EVT_LOGIN_SUCCESS = id();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYkxvZ2luLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3BsdWdpbnMvT1dlYkxvZ2luLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sU0FBUyxNQUFNLGNBQWMsQ0FBQztBQUNyQyxPQUFPLEVBQUMsRUFBRSxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBSTVCLE1BQU0sQ0FBQyxPQUFPLE9BQU8sU0FBZ0IsU0FBUSxTQUFTO0lBS3JELFlBQTZCLFdBQW9CO1FBQ2hELEtBQUssRUFBRSxDQUFDO1FBRG9CLGdCQUFXLEdBQVgsV0FBVyxDQUFTO0lBRWpELENBQUM7SUFFRCxjQUFjLENBQUMsSUFBcUM7UUFDbkQsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ3JCLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztZQUNqQixJQUFJLEVBQUcsSUFBSSxDQUFDLElBQUk7U0FDaEIsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVELGNBQWMsQ0FBQyxJQUFxQztRQUNuRCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDckIsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2pCLElBQUksRUFBRyxJQUFJLENBQUMsSUFBSTtTQUNoQixDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQsV0FBVyxDQUNWLE9BQTZDO1FBRTdDLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ25ELENBQUM7SUFFRCxjQUFjLENBQ2IsT0FHUztRQUVULE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsaUJBQWlCLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVPLFNBQVMsQ0FBQyxJQUF1QjtRQUN4QyxNQUFNLENBQUMsR0FBSyxJQUFJLEVBQ2IsR0FBRyxHQUFHLENBQUMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyx5QkFBeUIsQ0FBQyxFQUN0RCxHQUFHLEdBQUcsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFpQixHQUFHLEVBQUU7WUFDbkQsTUFBTSxFQUFFLE1BQU07WUFDZCxJQUFJLEVBQUksSUFBSTtTQUNaLENBQUMsQ0FBQztRQUVOLE9BQU8sR0FBRzthQUNSLFVBQVUsQ0FBQyxVQUFVLFFBQVE7WUFDN0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ3BELENBQUMsQ0FBQzthQUNELE1BQU0sQ0FBQyxVQUFVLEdBQUc7WUFDcEIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsY0FBYyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUM1QyxDQUFDLENBQUM7YUFDRCxJQUFJLEVBQUUsQ0FBQztJQUNWLENBQUM7O0FBckRlLGNBQUksR0FBZ0IsRUFBRSxFQUFFLENBQUM7QUFDekIsd0JBQWMsR0FBTSxFQUFFLEVBQUUsQ0FBQztBQUN6QiwyQkFBaUIsR0FBRyxFQUFFLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBPV2ViQXBwIGZyb20gJy4uL09XZWJBcHAnO1xuaW1wb3J0IE9XZWJFdmVudCBmcm9tICcuLi9PV2ViRXZlbnQnO1xuaW1wb3J0IHtpZH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHtPTmV0RXJyb3IsIE9OZXRSZXNwb25zZX0gZnJvbSAnLi4vT1dlYk5ldCc7XG5pbXBvcnQge09BcGlKU09OfSBmcm9tICcuLi9vem9uZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9XZWJMb2dpbjxVc2VyPiBleHRlbmRzIE9XZWJFdmVudCB7XG5cdHN0YXRpYyByZWFkb25seSBTRUxGICAgICAgICAgICAgICA9IGlkKCk7XG5cdHN0YXRpYyByZWFkb25seSBFVlRfTE9HSU5fRkFJTCAgICA9IGlkKCk7XG5cdHN0YXRpYyByZWFkb25seSBFVlRfTE9HSU5fU1VDQ0VTUyA9IGlkKCk7XG5cblx0Y29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBfYXBwQ29udGV4dDogT1dlYkFwcCkge1xuXHRcdHN1cGVyKCk7XG5cdH1cblxuXHRsb2dpbldpdGhFbWFpbChkYXRhOiB7IGVtYWlsOiBzdHJpbmc7IHBhc3M6IHN0cmluZyB9KSB7XG5cdFx0cmV0dXJuIHRoaXMuX3RyeUxvZ2luKHtcblx0XHRcdGVtYWlsOiBkYXRhLmVtYWlsLFxuXHRcdFx0cGFzcyA6IGRhdGEucGFzcyxcblx0XHR9KTtcblx0fVxuXG5cdGxvZ2luV2l0aFBob25lKGRhdGE6IHsgcGhvbmU6IHN0cmluZzsgcGFzczogc3RyaW5nIH0pIHtcblx0XHRyZXR1cm4gdGhpcy5fdHJ5TG9naW4oe1xuXHRcdFx0cGhvbmU6IGRhdGEucGhvbmUsXG5cdFx0XHRwYXNzIDogZGF0YS5wYXNzLFxuXHRcdH0pO1xuXHR9XG5cblx0b25Mb2dpbkZhaWwoXG5cdFx0aGFuZGxlcjogKHRoaXM6IHRoaXMsIGVycjogT05ldEVycm9yKSA9PiB2b2lkLFxuXHQpOiB0aGlzIHtcblx0XHRyZXR1cm4gdGhpcy5vbihPV2ViTG9naW4uRVZUX0xPR0lOX0ZBSUwsIGhhbmRsZXIpO1xuXHR9XG5cblx0b25Mb2dpblN1Y2Nlc3MoXG5cdFx0aGFuZGxlcjogKFxuXHRcdFx0dGhpczogdGhpcyxcblx0XHRcdHJlc3BvbnNlOiBPTmV0UmVzcG9uc2U8T0FwaUpTT048VXNlcj4+LFxuXHRcdCkgPT4gdm9pZCxcblx0KTogdGhpcyB7XG5cdFx0cmV0dXJuIHRoaXMub24oT1dlYkxvZ2luLkVWVF9MT0dJTl9TVUNDRVNTLCBoYW5kbGVyKTtcblx0fVxuXG5cdHByaXZhdGUgX3RyeUxvZ2luKGRhdGE6IEZvcm1EYXRhIHwgb2JqZWN0KSB7XG5cdFx0Y29uc3QgbSAgID0gdGhpcyxcblx0XHRcdCAgdXJsID0gbS5fYXBwQ29udGV4dC51cmwuZ2V0KCdPWl9TRVJWRVJfTE9HSU5fU0VSVklDRScpLFxuXHRcdFx0ICBuZXQgPSBtLl9hcHBDb250ZXh0Lm96LnJlcXVlc3Q8T0FwaUpTT048VXNlcj4+KHVybCwge1xuXHRcdFx0XHQgIG1ldGhvZDogJ1BPU1QnLFxuXHRcdFx0XHQgIGJvZHkgIDogZGF0YSxcblx0XHRcdCAgfSk7XG5cblx0XHRyZXR1cm4gbmV0XG5cdFx0XHQub25Hb29kTmV3cyhmdW5jdGlvbiAocmVzcG9uc2UpIHtcblx0XHRcdFx0bS50cmlnZ2VyKE9XZWJMb2dpbi5FVlRfTE9HSU5fU1VDQ0VTUywgW3Jlc3BvbnNlXSk7XG5cdFx0XHR9KVxuXHRcdFx0Lm9uRmFpbChmdW5jdGlvbiAoZXJyKSB7XG5cdFx0XHRcdG0udHJpZ2dlcihPV2ViTG9naW4uRVZUX0xPR0lOX0ZBSUwsIFtlcnJdKTtcblx0XHRcdH0pXG5cdFx0XHQuc2VuZCgpO1xuXHR9XG59XG4iXX0=