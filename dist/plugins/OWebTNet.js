import OWebEvent from '../OWebEvent';
import { id } from '../utils';
export default class OWebTNet extends OWebEvent {
    _appContext;
    static SELF = id();
    static EVT_TNET_READY = id();
    static STATE_UNKNOWN = id();
    static STATE_NO_USER = id();
    static STATE_OFFLINE_USER = id();
    static STATE_VERIFIED_USER = id();
    static STATE_SIGN_UP_PROCESS = id();
    constructor(_appContext) {
        super();
        this._appContext = _appContext;
    }
    onReady(handler) {
        return this.on(OWebTNet.EVT_TNET_READY, handler);
    }
    check() {
        const m = this, url = m._appContext.url.get('OZ_SERVER_TNET_SERVICE'), net = m._appContext.oz.request(url, {
            method: 'GET',
        });
        return net
            .onGoodNews(function goodNewsHandler(response) {
            const data = response.json.data;
            let status = OWebTNet.STATE_NO_USER;
            if (data._current_user) {
                status = OWebTNet.STATE_VERIFIED_USER;
                m._appContext.user.setCurrentUser(data._current_user);
            }
            else if (data._info_sign_up) {
                status = OWebTNet.STATE_SIGN_UP_PROCESS;
            }
            m.trigger(OWebTNet.EVT_TNET_READY, [status, data]);
        })
            .onFail(function failHandler() {
            let state = OWebTNet.STATE_UNKNOWN;
            if (m._appContext.user.userVerified()) {
                state = OWebTNet.STATE_OFFLINE_USER;
            }
            m.trigger(OWebTNet.EVT_TNET_READY, [state]);
        })
            .send();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYlROZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcGx1Z2lucy9PV2ViVE5ldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLFNBQVMsTUFBTSxjQUFjLENBQUM7QUFDckMsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQWU5QixNQUFNLENBQUMsT0FBTyxPQUFPLFFBR25CLFNBQVEsU0FBUztJQVVXO0lBVDdCLE1BQU0sQ0FBVSxJQUFJLEdBQUcsRUFBRSxFQUFFLENBQUM7SUFDcEIsTUFBTSxDQUFVLGNBQWMsR0FBRyxFQUFFLEVBQUUsQ0FBQztJQUU5QyxNQUFNLENBQVUsYUFBYSxHQUFHLEVBQUUsRUFBRSxDQUFDO0lBQ3JDLE1BQU0sQ0FBVSxhQUFhLEdBQUcsRUFBRSxFQUFFLENBQUM7SUFDckMsTUFBTSxDQUFVLGtCQUFrQixHQUFHLEVBQUUsRUFBRSxDQUFDO0lBQzFDLE1BQU0sQ0FBVSxtQkFBbUIsR0FBRyxFQUFFLEVBQUUsQ0FBQztJQUMzQyxNQUFNLENBQVUscUJBQXFCLEdBQUcsRUFBRSxFQUFFLENBQUM7SUFFN0MsWUFBNkIsV0FBZ0I7UUFDNUMsS0FBSyxFQUFFLENBQUM7UUFEb0IsZ0JBQVcsR0FBWCxXQUFXLENBQUs7SUFFN0MsQ0FBQztJQUVELE9BQU8sQ0FDTixPQUEwRTtRQUUxRSxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQsS0FBSztRQUNKLE1BQU0sQ0FBQyxHQUFHLElBQUksRUFDYixHQUFHLEdBQUcsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLEVBQ3JELEdBQUcsR0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQzdCLEdBQUcsRUFDSDtZQUNDLE1BQU0sRUFBRSxLQUFLO1NBQ2IsQ0FDRCxDQUFDO1FBRUgsT0FBTyxHQUFHO2FBQ1IsVUFBVSxDQUFDLFNBQVMsZUFBZSxDQUFDLFFBQVE7WUFDNUMsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDaEMsSUFBSSxNQUFNLEdBQVcsUUFBUSxDQUFDLGFBQWEsQ0FBQztZQUU1QyxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7Z0JBRXZCLE1BQU0sR0FBRyxRQUFRLENBQUMsbUJBQW1CLENBQUM7Z0JBQ3RDLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7YUFDdEQ7aUJBQU0sSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO2dCQUU5QixNQUFNLEdBQUcsUUFBUSxDQUFDLHFCQUFxQixDQUFDO2FBQ3hDO1lBRUQsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDcEQsQ0FBQyxDQUFDO2FBQ0QsTUFBTSxDQUFDLFNBQVMsV0FBVztZQUMzQixJQUFJLEtBQUssR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDO1lBRW5DLElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLEVBQUU7Z0JBQ3RDLEtBQUssR0FBRyxRQUFRLENBQUMsa0JBQWtCLENBQUM7YUFDcEM7WUFFRCxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzdDLENBQUMsQ0FBQzthQUNELElBQUksRUFBRSxDQUFDO0lBQ1YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBPV2ViQXBwIGZyb20gJy4uL09XZWJBcHAnO1xuaW1wb3J0IE9XZWJFdmVudCBmcm9tICcuLi9PV2ViRXZlbnQnO1xuaW1wb3J0IHsgaWQgfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQgeyBPQXBpUmVzcG9uc2UgfSBmcm9tICcuLi9vem9uZSc7XG5pbXBvcnQgeyBPTmV0UmVzcG9uc2UgfSBmcm9tICcuLi9PV2ViTmV0JztcblxuZXhwb3J0IHR5cGUgT1ROZXRSZXNwb25zZURhdGE8VXNlcj4gPSB7XG5cdG9rOiBib29sZWFuO1xuXHRfY3VycmVudF91c2VyPzogVXNlcjtcblx0X2luZm9fc2lnbl91cD86IGFueTtcbn07XG5cbmV4cG9ydCB0eXBlIE9UTmV0UmVhZHlJbmZvPFVzZXI+ID0ge1xuXHRzdGF0dXM6IHN0cmluZztcblx0ZGF0YTogT1ROZXRSZXNwb25zZURhdGE8VXNlcj47XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPV2ViVE5ldDxcblx0QXBwIGV4dGVuZHMgT1dlYkFwcCxcblx0VXNlciA9IFJldHVyblR5cGU8QXBwWyd1c2VyJ11bJ2dldEN1cnJlbnRVc2VyJ10+XG4+IGV4dGVuZHMgT1dlYkV2ZW50IHtcblx0c3RhdGljIHJlYWRvbmx5IFNFTEYgPSBpZCgpO1xuXHRwcml2YXRlIHN0YXRpYyByZWFkb25seSBFVlRfVE5FVF9SRUFEWSA9IGlkKCk7XG5cblx0c3RhdGljIHJlYWRvbmx5IFNUQVRFX1VOS05PV04gPSBpZCgpO1xuXHRzdGF0aWMgcmVhZG9ubHkgU1RBVEVfTk9fVVNFUiA9IGlkKCk7XG5cdHN0YXRpYyByZWFkb25seSBTVEFURV9PRkZMSU5FX1VTRVIgPSBpZCgpO1xuXHRzdGF0aWMgcmVhZG9ubHkgU1RBVEVfVkVSSUZJRURfVVNFUiA9IGlkKCk7XG5cdHN0YXRpYyByZWFkb25seSBTVEFURV9TSUdOX1VQX1BST0NFU1MgPSBpZCgpO1xuXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgX2FwcENvbnRleHQ6IEFwcCkge1xuXHRcdHN1cGVyKCk7XG5cdH1cblxuXHRvblJlYWR5KFxuXHRcdGhhbmRsZXI6ICh0aGlzOiB0aGlzLCBzdGF0dXM6IHN0cmluZywgZGF0YT86IE9UTmV0UmVhZHlJbmZvPFVzZXI+KSA9PiB2b2lkXG5cdCk6IHRoaXMge1xuXHRcdHJldHVybiB0aGlzLm9uKE9XZWJUTmV0LkVWVF9UTkVUX1JFQURZLCBoYW5kbGVyKTtcblx0fVxuXG5cdGNoZWNrKCk6IFByb21pc2U8T05ldFJlc3BvbnNlPE9BcGlSZXNwb25zZTxPVE5ldFJlc3BvbnNlRGF0YTxVc2VyPj4+PiB7XG5cdFx0Y29uc3QgbSA9IHRoaXMsXG5cdFx0XHR1cmwgPSBtLl9hcHBDb250ZXh0LnVybC5nZXQoJ09aX1NFUlZFUl9UTkVUX1NFUlZJQ0UnKSxcblx0XHRcdG5ldCA9IG0uX2FwcENvbnRleHQub3oucmVxdWVzdDxPQXBpUmVzcG9uc2U8T1ROZXRSZXNwb25zZURhdGE8VXNlcj4+Pihcblx0XHRcdFx0dXJsLFxuXHRcdFx0XHR7XG5cdFx0XHRcdFx0bWV0aG9kOiAnR0VUJyxcblx0XHRcdFx0fVxuXHRcdFx0KTtcblxuXHRcdHJldHVybiBuZXRcblx0XHRcdC5vbkdvb2ROZXdzKGZ1bmN0aW9uIGdvb2ROZXdzSGFuZGxlcihyZXNwb25zZSkge1xuXHRcdFx0XHRjb25zdCBkYXRhID0gcmVzcG9uc2UuanNvbi5kYXRhO1xuXHRcdFx0XHRsZXQgc3RhdHVzOiBzdHJpbmcgPSBPV2ViVE5ldC5TVEFURV9OT19VU0VSO1xuXG5cdFx0XHRcdGlmIChkYXRhLl9jdXJyZW50X3VzZXIpIHtcblx0XHRcdFx0XHQvLyB1c2VyIGlzIHZlcmlmaWVkXG5cdFx0XHRcdFx0c3RhdHVzID0gT1dlYlROZXQuU1RBVEVfVkVSSUZJRURfVVNFUjtcblx0XHRcdFx0XHRtLl9hcHBDb250ZXh0LnVzZXIuc2V0Q3VycmVudFVzZXIoZGF0YS5fY3VycmVudF91c2VyKTtcblx0XHRcdFx0fSBlbHNlIGlmIChkYXRhLl9pbmZvX3NpZ25fdXApIHtcblx0XHRcdFx0XHQvLyB1c2VyIGlzIGluIHJlZ2lzdHJhdGlvbiBwcm9jZXNzXG5cdFx0XHRcdFx0c3RhdHVzID0gT1dlYlROZXQuU1RBVEVfU0lHTl9VUF9QUk9DRVNTO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0bS50cmlnZ2VyKE9XZWJUTmV0LkVWVF9UTkVUX1JFQURZLCBbc3RhdHVzLCBkYXRhXSk7XG5cdFx0XHR9KVxuXHRcdFx0Lm9uRmFpbChmdW5jdGlvbiBmYWlsSGFuZGxlcigpIHtcblx0XHRcdFx0bGV0IHN0YXRlID0gT1dlYlROZXQuU1RBVEVfVU5LTk9XTjtcblxuXHRcdFx0XHRpZiAobS5fYXBwQ29udGV4dC51c2VyLnVzZXJWZXJpZmllZCgpKSB7XG5cdFx0XHRcdFx0c3RhdGUgPSBPV2ViVE5ldC5TVEFURV9PRkZMSU5FX1VTRVI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRtLnRyaWdnZXIoT1dlYlROZXQuRVZUX1RORVRfUkVBRFksIFtzdGF0ZV0pO1xuXHRcdFx0fSlcblx0XHRcdC5zZW5kKCk7XG5cdH1cbn1cbiJdfQ==