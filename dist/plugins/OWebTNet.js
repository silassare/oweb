import OWebEvent from '../OWebEvent';
import { id } from '../utils';
export default class OWebTNet extends OWebEvent {
    _appContext;
    static SELF = id();
    static EVT_TNET_READY = id();
    static STATE_UNKNOWN = id();
    static STATE_NO_USER = id();
    static STATE_OFFLINE_USER = id();
    static STATE_VERIFIED_USER = id();
    static STATE_SIGN_UP_PROCESS = id();
    constructor(_appContext) {
        super();
        this._appContext = _appContext;
    }
    onReady(handler) {
        return this.on(OWebTNet.EVT_TNET_READY, handler);
    }
    check() {
        const m = this, url = m._appContext.url.get('OZ_SERVER_TNET_SERVICE'), net = m._appContext.oz.request(url, {
            method: 'GET',
        });
        return net.onGoodNews(function goodNewsHandler(response) {
            const data = response.json.data;
            let status = OWebTNet.STATE_NO_USER;
            if (data._current_user) {
                // user is verified
                status = OWebTNet.STATE_VERIFIED_USER;
                m._appContext.user.setCurrentUser(data._current_user);
            }
            else if (data._info_sign_up) {
                // user is in registration process
                status = OWebTNet.STATE_SIGN_UP_PROCESS;
            }
            m.trigger(OWebTNet.EVT_TNET_READY, [status, data]);
        })
            .onFail(function failHandler() {
            let state = OWebTNet.STATE_UNKNOWN;
            if (m._appContext.user.userVerified()) {
                state = OWebTNet.STATE_OFFLINE_USER;
            }
            m.trigger(OWebTNet.EVT_TNET_READY, [state]);
        })
            .send();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYlROZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcGx1Z2lucy9PV2ViVE5ldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLFNBQVMsTUFBTSxjQUFjLENBQUM7QUFDckMsT0FBTyxFQUFDLEVBQUUsRUFBQyxNQUFNLFVBQVUsQ0FBQztBQVk1QixNQUFNLENBQUMsT0FBTyxPQUFPLFFBQWdGLFNBQVEsU0FBUztJQVV4RjtJQVQ3QixNQUFNLENBQVUsSUFBSSxHQUFhLEVBQUUsRUFBRSxDQUFDO0lBQzlCLE1BQU0sQ0FBVSxjQUFjLEdBQUcsRUFBRSxFQUFFLENBQUM7SUFFOUMsTUFBTSxDQUFVLGFBQWEsR0FBVyxFQUFFLEVBQUUsQ0FBQztJQUM3QyxNQUFNLENBQVUsYUFBYSxHQUFXLEVBQUUsRUFBRSxDQUFDO0lBQzdDLE1BQU0sQ0FBVSxrQkFBa0IsR0FBTSxFQUFFLEVBQUUsQ0FBQztJQUM3QyxNQUFNLENBQVUsbUJBQW1CLEdBQUssRUFBRSxFQUFFLENBQUM7SUFDN0MsTUFBTSxDQUFVLHFCQUFxQixHQUFHLEVBQUUsRUFBRSxDQUFDO0lBRTdDLFlBQTZCLFdBQWdCO1FBQzVDLEtBQUssRUFBRSxDQUFDO1FBRG9CLGdCQUFXLEdBQVgsV0FBVyxDQUFLO0lBRTdDLENBQUM7SUFFRCxPQUFPLENBQ04sT0FBeUU7UUFFekUsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDbEQsQ0FBQztJQUVELEtBQUs7UUFDSixNQUFNLENBQUMsR0FBSyxJQUFJLEVBQ2IsR0FBRyxHQUFHLENBQUMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQyxFQUNyRCxHQUFHLEdBQUcsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUF3QyxHQUFHLEVBQUU7WUFDMUUsTUFBTSxFQUFFLEtBQUs7U0FDYixDQUFDLENBQUM7UUFFTixPQUFPLEdBQUcsQ0FBQyxVQUFVLENBQUMsU0FBUyxlQUFlLENBQUMsUUFBUTtZQUN0RCxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztZQUNoQyxJQUFJLE1BQU0sR0FBVSxRQUFRLENBQUMsYUFBYSxDQUFDO1lBRTNDLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtnQkFDdkIsbUJBQW1CO2dCQUNuQixNQUFNLEdBQUksUUFBUSxDQUFDLG1CQUFtQixDQUFDO2dCQUN2QyxDQUFDLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2FBQ3REO2lCQUFNLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtnQkFDOUIsa0NBQWtDO2dCQUNsQyxNQUFNLEdBQUcsUUFBUSxDQUFDLHFCQUFxQixDQUFDO2FBQ3hDO1lBRUQsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDcEQsQ0FBQyxDQUFDO2FBQ0csTUFBTSxDQUFDLFNBQVMsV0FBVztZQUMzQixJQUFJLEtBQUssR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDO1lBRW5DLElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLEVBQUU7Z0JBQ3RDLEtBQUssR0FBRyxRQUFRLENBQUMsa0JBQWtCLENBQUM7YUFDcEM7WUFFRCxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzdDLENBQUMsQ0FBQzthQUNELElBQUksRUFBRSxDQUFDO0lBQ2IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBPV2ViQXBwIGZyb20gJy4uL09XZWJBcHAnO1xuaW1wb3J0IE9XZWJFdmVudCBmcm9tICcuLi9PV2ViRXZlbnQnO1xuaW1wb3J0IHtpZH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHtPQXBpUmVzcG9uc2V9IGZyb20gJy4uL296b25lJztcbmltcG9ydCB7T05ldFJlc3BvbnNlfSBmcm9tICcuLi9PV2ViTmV0JztcblxuZXhwb3J0IHR5cGUgT1ROZXRSZXNwb25zZURhdGE8VXNlcj4gPSB7XG5cdG9rOiBib29sZWFuO1xuXHRfY3VycmVudF91c2VyPzogVXNlcjtcblx0X2luZm9fc2lnbl91cD86IGFueTtcbn07XG5cbmV4cG9ydCB0eXBlIE9UTmV0UmVhZHlJbmZvPFVzZXI+ID0geyBzdGF0dXM6IHN0cmluZywgZGF0YTogT1ROZXRSZXNwb25zZURhdGE8VXNlcj59O1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPV2ViVE5ldDxBcHAgZXh0ZW5kcyBPV2ViQXBwLCBVc2VyID0gUmV0dXJuVHlwZTxBcHBbJ3VzZXInXVsnZ2V0Q3VycmVudFVzZXInXT4+IGV4dGVuZHMgT1dlYkV2ZW50IHtcblx0c3RhdGljIHJlYWRvbmx5IFNFTEYgICAgICAgICAgID0gaWQoKTtcblx0cHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgRVZUX1RORVRfUkVBRFkgPSBpZCgpO1xuXG5cdHN0YXRpYyByZWFkb25seSBTVEFURV9VTktOT1dOICAgICAgICAgPSBpZCgpO1xuXHRzdGF0aWMgcmVhZG9ubHkgU1RBVEVfTk9fVVNFUiAgICAgICAgID0gaWQoKTtcblx0c3RhdGljIHJlYWRvbmx5IFNUQVRFX09GRkxJTkVfVVNFUiAgICA9IGlkKCk7XG5cdHN0YXRpYyByZWFkb25seSBTVEFURV9WRVJJRklFRF9VU0VSICAgPSBpZCgpO1xuXHRzdGF0aWMgcmVhZG9ubHkgU1RBVEVfU0lHTl9VUF9QUk9DRVNTID0gaWQoKTtcblxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IF9hcHBDb250ZXh0OiBBcHApIHtcblx0XHRzdXBlcigpO1xuXHR9XG5cblx0b25SZWFkeShcblx0XHRoYW5kbGVyOiAodGhpczogdGhpcywgc3RhdHVzOnN0cmluZywgZGF0YT86IE9UTmV0UmVhZHlJbmZvPFVzZXI+KSA9PiB2b2lkXG5cdCk6IHRoaXMge1xuXHRcdHJldHVybiB0aGlzLm9uKE9XZWJUTmV0LkVWVF9UTkVUX1JFQURZLCBoYW5kbGVyKTtcblx0fVxuXG5cdGNoZWNrKCk6IFByb21pc2U8T05ldFJlc3BvbnNlPE9BcGlSZXNwb25zZTxPVE5ldFJlc3BvbnNlRGF0YTxVc2VyPj4+PiB7XG5cdFx0Y29uc3QgbSAgID0gdGhpcyxcblx0XHRcdCAgdXJsID0gbS5fYXBwQ29udGV4dC51cmwuZ2V0KCdPWl9TRVJWRVJfVE5FVF9TRVJWSUNFJyksXG5cdFx0XHQgIG5ldCA9IG0uX2FwcENvbnRleHQub3oucmVxdWVzdDxPQXBpUmVzcG9uc2U8T1ROZXRSZXNwb25zZURhdGE8VXNlcj4+Pih1cmwsIHtcblx0XHRcdFx0ICBtZXRob2Q6ICdHRVQnLFxuXHRcdFx0ICB9KTtcblxuXHRcdHJldHVybiBuZXQub25Hb29kTmV3cyhmdW5jdGlvbiBnb29kTmV3c0hhbmRsZXIocmVzcG9uc2UpIHtcblx0XHRcdGNvbnN0IGRhdGEgPSByZXNwb25zZS5qc29uLmRhdGE7XG5cdFx0XHRsZXQgc3RhdHVzOnN0cmluZyA9IE9XZWJUTmV0LlNUQVRFX05PX1VTRVI7XG5cblx0XHRcdGlmIChkYXRhLl9jdXJyZW50X3VzZXIpIHtcblx0XHRcdFx0Ly8gdXNlciBpcyB2ZXJpZmllZFxuXHRcdFx0XHRzdGF0dXMgPSAgT1dlYlROZXQuU1RBVEVfVkVSSUZJRURfVVNFUjtcblx0XHRcdFx0bS5fYXBwQ29udGV4dC51c2VyLnNldEN1cnJlbnRVc2VyKGRhdGEuX2N1cnJlbnRfdXNlcik7XG5cdFx0XHR9IGVsc2UgaWYgKGRhdGEuX2luZm9fc2lnbl91cCkge1xuXHRcdFx0XHQvLyB1c2VyIGlzIGluIHJlZ2lzdHJhdGlvbiBwcm9jZXNzXG5cdFx0XHRcdHN0YXR1cyA9IE9XZWJUTmV0LlNUQVRFX1NJR05fVVBfUFJPQ0VTUztcblx0XHRcdH1cblxuXHRcdFx0bS50cmlnZ2VyKE9XZWJUTmV0LkVWVF9UTkVUX1JFQURZLCBbc3RhdHVzLCBkYXRhXSk7XG5cdFx0fSlcblx0XHRcdFx0ICAub25GYWlsKGZ1bmN0aW9uIGZhaWxIYW5kbGVyKCkge1xuXHRcdFx0XHRcdCAgbGV0IHN0YXRlID0gT1dlYlROZXQuU1RBVEVfVU5LTk9XTjtcblxuXHRcdFx0XHRcdCAgaWYgKG0uX2FwcENvbnRleHQudXNlci51c2VyVmVyaWZpZWQoKSkge1xuXHRcdFx0XHRcdFx0ICBzdGF0ZSA9IE9XZWJUTmV0LlNUQVRFX09GRkxJTkVfVVNFUjtcblx0XHRcdFx0XHQgIH1cblxuXHRcdFx0XHRcdCAgbS50cmlnZ2VyKE9XZWJUTmV0LkVWVF9UTkVUX1JFQURZLCBbc3RhdGVdKTtcblx0XHRcdFx0ICB9KVxuXHRcdFx0XHQgIC5zZW5kKCk7XG5cdH1cbn0iXX0=