import OWebEvent from '../OWebEvent';
import { id } from '../utils/Utils';
let OWebTNet = /** @class */ (() => {
    class OWebTNet extends OWebEvent {
        constructor(appContext) {
            super();
            this.appContext = appContext;
        }
        check() {
            const m = this, url = m.appContext.url.get('OZ_SERVER_TNET_SERVICE'), net = m.appContext.net(url, {
                method: 'GET',
                isGoodNews(response) {
                    return Boolean(response.json && response.json.error === 0);
                },
            });
            return net
                .onGoodNews(function (response) {
                const data = response.json?.data;
                let res;
                if (data?._current_user) {
                    // user is verified
                    res = [OWebTNet.STATE_VERIFIED_USER, data._current_user];
                    m.appContext.user.setCurrentUser(data._current_user);
                }
                else if (data?._info_sign_up) {
                    // user is in registration process
                    res = [OWebTNet.STATE_SIGN_UP_PROCESS, data._info_sign_up];
                }
                else {
                    // no user
                    res = [OWebTNet.STATE_NO_USER];
                }
                m.trigger(OWebTNet.EVT_TNET_READY, res);
            })
                .onBadNews(function (response) {
                let state = OWebTNet.STATE_UNKNOWN;
                if (m.appContext.userVerified()) {
                    state = OWebTNet.STATE_OFFLINE_USER;
                }
                m.trigger(OWebTNet.EVT_TNET_READY, [state]);
            })
                .send();
        }
    }
    OWebTNet.SELF = id();
    OWebTNet.EVT_TNET_READY = id();
    OWebTNet.STATE_UNKNOWN = id();
    OWebTNet.STATE_NO_USER = id();
    OWebTNet.STATE_OFFLINE_USER = id();
    OWebTNet.STATE_VERIFIED_USER = id();
    OWebTNet.STATE_SIGN_UP_PROCESS = id();
    return OWebTNet;
})();
export default OWebTNet;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYlROZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcGx1Z2lucy9PV2ViVE5ldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLFNBQVMsTUFBTSxjQUFjLENBQUM7QUFDckMsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBVXBDO0lBQUEsTUFBcUIsUUFBUyxTQUFRLFNBQVM7UUFVOUMsWUFBNkIsVUFBbUI7WUFDL0MsS0FBSyxFQUFFLENBQUM7WUFEb0IsZUFBVSxHQUFWLFVBQVUsQ0FBUztRQUVoRCxDQUFDO1FBRUQsS0FBSztZQUNKLE1BQU0sQ0FBQyxHQUFHLElBQUksRUFDYixHQUFHLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLEVBQ3BELEdBQUcsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBbUMsR0FBRyxFQUFFO2dCQUM3RCxNQUFNLEVBQUUsS0FBSztnQkFDYixVQUFVLENBQUMsUUFBUTtvQkFDbEIsT0FBTyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDNUQsQ0FBQzthQUNELENBQUMsQ0FBQztZQUVKLE9BQU8sR0FBRztpQkFDUixVQUFVLENBQUMsVUFBVSxRQUFRO2dCQUM3QixNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQztnQkFDakMsSUFBSSxHQUFHLENBQUM7Z0JBRVIsSUFBSSxJQUFJLEVBQUUsYUFBYSxFQUFFO29CQUN4QixtQkFBbUI7b0JBQ25CLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7b0JBQ3pELENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7aUJBQ3JEO3FCQUFNLElBQUksSUFBSSxFQUFFLGFBQWEsRUFBRTtvQkFDL0Isa0NBQWtDO29CQUNsQyxHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMscUJBQXFCLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2lCQUMzRDtxQkFBTTtvQkFDTixVQUFVO29CQUNWLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQztpQkFDL0I7Z0JBRUQsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ3pDLENBQUMsQ0FBQztpQkFDRCxTQUFTLENBQUMsVUFBVSxRQUFRO2dCQUM1QixJQUFJLEtBQUssR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDO2dCQUVuQyxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFLEVBQUU7b0JBQ2hDLEtBQUssR0FBRyxRQUFRLENBQUMsa0JBQWtCLENBQUM7aUJBQ3BDO2dCQUVELENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDN0MsQ0FBQyxDQUFDO2lCQUNELElBQUksRUFBRSxDQUFDO1FBQ1YsQ0FBQzs7SUFwRGUsYUFBSSxHQUFHLEVBQUUsRUFBRSxDQUFDO0lBQ1osdUJBQWMsR0FBRyxFQUFFLEVBQUUsQ0FBQztJQUV0QixzQkFBYSxHQUFHLEVBQUUsRUFBRSxDQUFDO0lBQ3JCLHNCQUFhLEdBQUcsRUFBRSxFQUFFLENBQUM7SUFDckIsMkJBQWtCLEdBQUcsRUFBRSxFQUFFLENBQUM7SUFDMUIsNEJBQW1CLEdBQUcsRUFBRSxFQUFFLENBQUM7SUFDM0IsOEJBQXFCLEdBQUcsRUFBRSxFQUFFLENBQUM7SUE4QzlDLGVBQUM7S0FBQTtlQXREb0IsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBPV2ViQXBwIGZyb20gJy4uL09XZWJBcHAnO1xyXG5pbXBvcnQgT1dlYkV2ZW50IGZyb20gJy4uL09XZWJFdmVudCc7XHJcbmltcG9ydCB7IGlkIH0gZnJvbSAnLi4vdXRpbHMvVXRpbHMnO1xyXG5pbXBvcnQgeyBHb2JsU2luZ2xlUEtFbnRpdHkgfSBmcm9tICdnb2JsLXV0aWxzLXRzJztcclxuaW1wb3J0IHsgSU9ab25lQXBpSlNPTiB9IGZyb20gJy4uL296b25lJztcclxuXHJcbmV4cG9ydCB0eXBlIHRUTmV0UmVzcG9uc2VEYXRhID0ge1xyXG5cdG9rOiBib29sZWFuO1xyXG5cdF9jdXJyZW50X3VzZXI/OiBHb2JsU2luZ2xlUEtFbnRpdHk7XHJcblx0X2luZm9fc2lnbl91cD86IGFueTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9XZWJUTmV0IGV4dGVuZHMgT1dlYkV2ZW50IHtcclxuXHRzdGF0aWMgcmVhZG9ubHkgU0VMRiA9IGlkKCk7XHJcblx0c3RhdGljIHJlYWRvbmx5IEVWVF9UTkVUX1JFQURZID0gaWQoKTtcclxuXHJcblx0c3RhdGljIHJlYWRvbmx5IFNUQVRFX1VOS05PV04gPSBpZCgpO1xyXG5cdHN0YXRpYyByZWFkb25seSBTVEFURV9OT19VU0VSID0gaWQoKTtcclxuXHRzdGF0aWMgcmVhZG9ubHkgU1RBVEVfT0ZGTElORV9VU0VSID0gaWQoKTtcclxuXHRzdGF0aWMgcmVhZG9ubHkgU1RBVEVfVkVSSUZJRURfVVNFUiA9IGlkKCk7XHJcblx0c3RhdGljIHJlYWRvbmx5IFNUQVRFX1NJR05fVVBfUFJPQ0VTUyA9IGlkKCk7XHJcblxyXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgYXBwQ29udGV4dDogT1dlYkFwcCkge1xyXG5cdFx0c3VwZXIoKTtcclxuXHR9XHJcblxyXG5cdGNoZWNrKCkge1xyXG5cdFx0Y29uc3QgbSA9IHRoaXMsXHJcblx0XHRcdHVybCA9IG0uYXBwQ29udGV4dC51cmwuZ2V0KCdPWl9TRVJWRVJfVE5FVF9TRVJWSUNFJyksXHJcblx0XHRcdG5ldCA9IG0uYXBwQ29udGV4dC5uZXQ8SU9ab25lQXBpSlNPTjx0VE5ldFJlc3BvbnNlRGF0YT4+KHVybCwge1xyXG5cdFx0XHRcdG1ldGhvZDogJ0dFVCcsXHJcblx0XHRcdFx0aXNHb29kTmV3cyhyZXNwb25zZSkge1xyXG5cdFx0XHRcdFx0cmV0dXJuIEJvb2xlYW4ocmVzcG9uc2UuanNvbiAmJiByZXNwb25zZS5qc29uLmVycm9yID09PSAwKTtcclxuXHRcdFx0XHR9LFxyXG5cdFx0XHR9KTtcclxuXHJcblx0XHRyZXR1cm4gbmV0XHJcblx0XHRcdC5vbkdvb2ROZXdzKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG5cdFx0XHRcdGNvbnN0IGRhdGEgPSByZXNwb25zZS5qc29uPy5kYXRhO1xyXG5cdFx0XHRcdGxldCByZXM7XHJcblxyXG5cdFx0XHRcdGlmIChkYXRhPy5fY3VycmVudF91c2VyKSB7XHJcblx0XHRcdFx0XHQvLyB1c2VyIGlzIHZlcmlmaWVkXHJcblx0XHRcdFx0XHRyZXMgPSBbT1dlYlROZXQuU1RBVEVfVkVSSUZJRURfVVNFUiwgZGF0YS5fY3VycmVudF91c2VyXTtcclxuXHRcdFx0XHRcdG0uYXBwQ29udGV4dC51c2VyLnNldEN1cnJlbnRVc2VyKGRhdGEuX2N1cnJlbnRfdXNlcik7XHJcblx0XHRcdFx0fSBlbHNlIGlmIChkYXRhPy5faW5mb19zaWduX3VwKSB7XHJcblx0XHRcdFx0XHQvLyB1c2VyIGlzIGluIHJlZ2lzdHJhdGlvbiBwcm9jZXNzXHJcblx0XHRcdFx0XHRyZXMgPSBbT1dlYlROZXQuU1RBVEVfU0lHTl9VUF9QUk9DRVNTLCBkYXRhLl9pbmZvX3NpZ25fdXBdO1xyXG5cdFx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0XHQvLyBubyB1c2VyXHJcblx0XHRcdFx0XHRyZXMgPSBbT1dlYlROZXQuU1RBVEVfTk9fVVNFUl07XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRtLnRyaWdnZXIoT1dlYlROZXQuRVZUX1RORVRfUkVBRFksIHJlcyk7XHJcblx0XHRcdH0pXHJcblx0XHRcdC5vbkJhZE5ld3MoZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcblx0XHRcdFx0bGV0IHN0YXRlID0gT1dlYlROZXQuU1RBVEVfVU5LTk9XTjtcclxuXHJcblx0XHRcdFx0aWYgKG0uYXBwQ29udGV4dC51c2VyVmVyaWZpZWQoKSkge1xyXG5cdFx0XHRcdFx0c3RhdGUgPSBPV2ViVE5ldC5TVEFURV9PRkZMSU5FX1VTRVI7XHJcblx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRtLnRyaWdnZXIoT1dlYlROZXQuRVZUX1RORVRfUkVBRFksIFtzdGF0ZV0pO1xyXG5cdFx0XHR9KVxyXG5cdFx0XHQuc2VuZCgpO1xyXG5cdH1cclxufVxyXG4iXX0=