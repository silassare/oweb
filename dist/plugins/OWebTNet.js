import OWebEvent from '../OWebEvent';
import { id } from '../utils';
import { ozNet } from '../ozone';
let OWebTNet = /** @class */ (() => {
    class OWebTNet extends OWebEvent {
        constructor(appContext) {
            super();
            this.appContext = appContext;
        }
        check() {
            const m = this, url = m.appContext.url.get('OZ_SERVER_TNET_SERVICE'), net = ozNet(url, {
                method: 'GET',
                isGoodNews(response) {
                    return Boolean(response.json && response.json.error === 0);
                },
            });
            return net
                .onGoodNews(function (response) {
                const data = response.json?.data;
                let res;
                if (data?._current_user) {
                    // user is verified
                    res = [OWebTNet.STATE_VERIFIED_USER, data._current_user];
                    m.appContext.user.setCurrentUser(data._current_user);
                }
                else if (data?._info_sign_up) {
                    // user is in registration process
                    res = [OWebTNet.STATE_SIGN_UP_PROCESS, data._info_sign_up];
                }
                else {
                    // no user
                    res = [OWebTNet.STATE_NO_USER];
                }
                m.trigger(OWebTNet.EVT_TNET_READY, res);
            })
                .onBadNews(function (response) {
                let state = OWebTNet.STATE_UNKNOWN;
                if (m.appContext.userVerified()) {
                    state = OWebTNet.STATE_OFFLINE_USER;
                }
                m.trigger(OWebTNet.EVT_TNET_READY, [state]);
            })
                .send();
        }
    }
    OWebTNet.SELF = id();
    OWebTNet.EVT_TNET_READY = id();
    OWebTNet.STATE_UNKNOWN = id();
    OWebTNet.STATE_NO_USER = id();
    OWebTNet.STATE_OFFLINE_USER = id();
    OWebTNet.STATE_VERIFIED_USER = id();
    OWebTNet.STATE_SIGN_UP_PROCESS = id();
    return OWebTNet;
})();
export default OWebTNet;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYlROZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcGx1Z2lucy9PV2ViVE5ldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLFNBQVMsTUFBTSxjQUFjLENBQUM7QUFDckMsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUU5QixPQUFPLEVBQWlCLEtBQUssRUFBRSxNQUFNLFVBQVUsQ0FBQztBQVFoRDtJQUFBLE1BQXFCLFFBQVMsU0FBUSxTQUFTO1FBVTlDLFlBQTZCLFVBQW1CO1lBQy9DLEtBQUssRUFBRSxDQUFDO1lBRG9CLGVBQVUsR0FBVixVQUFVLENBQVM7UUFFaEQsQ0FBQztRQUVELEtBQUs7WUFDSixNQUFNLENBQUMsR0FBRyxJQUFJLEVBQ2IsR0FBRyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQyxFQUNwRCxHQUFHLEdBQUcsS0FBSyxDQUFtQyxHQUFHLEVBQUU7Z0JBQ2xELE1BQU0sRUFBRSxLQUFLO2dCQUNiLFVBQVUsQ0FBQyxRQUFRO29CQUNsQixPQUFPLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUM1RCxDQUFDO2FBQ0QsQ0FBQyxDQUFDO1lBRUosT0FBTyxHQUFHO2lCQUNSLFVBQVUsQ0FBQyxVQUFVLFFBQVE7Z0JBQzdCLE1BQU0sSUFBSSxHQUFHLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDO2dCQUNqQyxJQUFJLEdBQUcsQ0FBQztnQkFFUixJQUFJLElBQUksRUFBRSxhQUFhLEVBQUU7b0JBQ3hCLG1CQUFtQjtvQkFDbkIsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztvQkFDekQsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztpQkFDckQ7cUJBQU0sSUFBSSxJQUFJLEVBQUUsYUFBYSxFQUFFO29CQUMvQixrQ0FBa0M7b0JBQ2xDLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7aUJBQzNEO3FCQUFNO29CQUNOLFVBQVU7b0JBQ1YsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2lCQUMvQjtnQkFFRCxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDekMsQ0FBQyxDQUFDO2lCQUNELFNBQVMsQ0FBQyxVQUFVLFFBQVE7Z0JBQzVCLElBQUksS0FBSyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUM7Z0JBRW5DLElBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQyxZQUFZLEVBQUUsRUFBRTtvQkFDaEMsS0FBSyxHQUFHLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQztpQkFDcEM7Z0JBRUQsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUM3QyxDQUFDLENBQUM7aUJBQ0QsSUFBSSxFQUFFLENBQUM7UUFDVixDQUFDOztJQXBEZSxhQUFJLEdBQUcsRUFBRSxFQUFFLENBQUM7SUFDWix1QkFBYyxHQUFHLEVBQUUsRUFBRSxDQUFDO0lBRXRCLHNCQUFhLEdBQUcsRUFBRSxFQUFFLENBQUM7SUFDckIsc0JBQWEsR0FBRyxFQUFFLEVBQUUsQ0FBQztJQUNyQiwyQkFBa0IsR0FBRyxFQUFFLEVBQUUsQ0FBQztJQUMxQiw0QkFBbUIsR0FBRyxFQUFFLEVBQUUsQ0FBQztJQUMzQiw4QkFBcUIsR0FBRyxFQUFFLEVBQUUsQ0FBQztJQThDOUMsZUFBQztLQUFBO2VBdERvQixRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE9XZWJBcHAgZnJvbSAnLi4vT1dlYkFwcCc7XHJcbmltcG9ydCBPV2ViRXZlbnQgZnJvbSAnLi4vT1dlYkV2ZW50JztcclxuaW1wb3J0IHsgaWQgfSBmcm9tICcuLi91dGlscyc7XHJcbmltcG9ydCB7IEdvYmxTaW5nbGVQS0VudGl0eSB9IGZyb20gJ2dvYmwtdXRpbHMtdHMnO1xyXG5pbXBvcnQgeyBJT1pvbmVBcGlKU09OLCBvek5ldCB9IGZyb20gJy4uL296b25lJztcclxuXHJcbmV4cG9ydCB0eXBlIHRUTmV0UmVzcG9uc2VEYXRhID0ge1xyXG5cdG9rOiBib29sZWFuO1xyXG5cdF9jdXJyZW50X3VzZXI/OiBHb2JsU2luZ2xlUEtFbnRpdHk7XHJcblx0X2luZm9fc2lnbl91cD86IGFueTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9XZWJUTmV0IGV4dGVuZHMgT1dlYkV2ZW50IHtcclxuXHRzdGF0aWMgcmVhZG9ubHkgU0VMRiA9IGlkKCk7XHJcblx0c3RhdGljIHJlYWRvbmx5IEVWVF9UTkVUX1JFQURZID0gaWQoKTtcclxuXHJcblx0c3RhdGljIHJlYWRvbmx5IFNUQVRFX1VOS05PV04gPSBpZCgpO1xyXG5cdHN0YXRpYyByZWFkb25seSBTVEFURV9OT19VU0VSID0gaWQoKTtcclxuXHRzdGF0aWMgcmVhZG9ubHkgU1RBVEVfT0ZGTElORV9VU0VSID0gaWQoKTtcclxuXHRzdGF0aWMgcmVhZG9ubHkgU1RBVEVfVkVSSUZJRURfVVNFUiA9IGlkKCk7XHJcblx0c3RhdGljIHJlYWRvbmx5IFNUQVRFX1NJR05fVVBfUFJPQ0VTUyA9IGlkKCk7XHJcblxyXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgYXBwQ29udGV4dDogT1dlYkFwcCkge1xyXG5cdFx0c3VwZXIoKTtcclxuXHR9XHJcblxyXG5cdGNoZWNrKCkge1xyXG5cdFx0Y29uc3QgbSA9IHRoaXMsXHJcblx0XHRcdHVybCA9IG0uYXBwQ29udGV4dC51cmwuZ2V0KCdPWl9TRVJWRVJfVE5FVF9TRVJWSUNFJyksXHJcblx0XHRcdG5ldCA9IG96TmV0PElPWm9uZUFwaUpTT048dFROZXRSZXNwb25zZURhdGE+Pih1cmwsIHtcclxuXHRcdFx0XHRtZXRob2Q6ICdHRVQnLFxyXG5cdFx0XHRcdGlzR29vZE5ld3MocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRcdHJldHVybiBCb29sZWFuKHJlc3BvbnNlLmpzb24gJiYgcmVzcG9uc2UuanNvbi5lcnJvciA9PT0gMCk7XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0cmV0dXJuIG5ldFxyXG5cdFx0XHQub25Hb29kTmV3cyhmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRjb25zdCBkYXRhID0gcmVzcG9uc2UuanNvbj8uZGF0YTtcclxuXHRcdFx0XHRsZXQgcmVzO1xyXG5cclxuXHRcdFx0XHRpZiAoZGF0YT8uX2N1cnJlbnRfdXNlcikge1xyXG5cdFx0XHRcdFx0Ly8gdXNlciBpcyB2ZXJpZmllZFxyXG5cdFx0XHRcdFx0cmVzID0gW09XZWJUTmV0LlNUQVRFX1ZFUklGSUVEX1VTRVIsIGRhdGEuX2N1cnJlbnRfdXNlcl07XHJcblx0XHRcdFx0XHRtLmFwcENvbnRleHQudXNlci5zZXRDdXJyZW50VXNlcihkYXRhLl9jdXJyZW50X3VzZXIpO1xyXG5cdFx0XHRcdH0gZWxzZSBpZiAoZGF0YT8uX2luZm9fc2lnbl91cCkge1xyXG5cdFx0XHRcdFx0Ly8gdXNlciBpcyBpbiByZWdpc3RyYXRpb24gcHJvY2Vzc1xyXG5cdFx0XHRcdFx0cmVzID0gW09XZWJUTmV0LlNUQVRFX1NJR05fVVBfUFJPQ0VTUywgZGF0YS5faW5mb19zaWduX3VwXTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0Ly8gbm8gdXNlclxyXG5cdFx0XHRcdFx0cmVzID0gW09XZWJUTmV0LlNUQVRFX05PX1VTRVJdO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0bS50cmlnZ2VyKE9XZWJUTmV0LkVWVF9UTkVUX1JFQURZLCByZXMpO1xyXG5cdFx0XHR9KVxyXG5cdFx0XHQub25CYWROZXdzKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG5cdFx0XHRcdGxldCBzdGF0ZSA9IE9XZWJUTmV0LlNUQVRFX1VOS05PV047XHJcblxyXG5cdFx0XHRcdGlmIChtLmFwcENvbnRleHQudXNlclZlcmlmaWVkKCkpIHtcclxuXHRcdFx0XHRcdHN0YXRlID0gT1dlYlROZXQuU1RBVEVfT0ZGTElORV9VU0VSO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0bS50cmlnZ2VyKE9XZWJUTmV0LkVWVF9UTkVUX1JFQURZLCBbc3RhdGVdKTtcclxuXHRcdFx0fSlcclxuXHRcdFx0LnNlbmQoKTtcclxuXHR9XHJcbn1cclxuIl19