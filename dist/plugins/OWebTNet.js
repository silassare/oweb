import OWebEvent from '../OWebEvent';
import { id } from '../utils/Utils';
export default class OWebTNet extends OWebEvent {
    constructor(appContext) {
        super();
        this.appContext = appContext;
    }
    check() {
        const m = this, url = this.appContext.url.get('OZ_SERVER_TNET_SERVICE');
        this.appContext.request('GET', url, null, function (response) {
            const data = response.data;
            let res;
            if (data._current_user) {
                // user is verified
                res = [OWebTNet.STATE_VERIFIED_USER, data._current_user];
                m.appContext.user.setCurrentUser(data._current_user);
            }
            else if (data._info_sign_up) {
                // user is in registration process
                res = [OWebTNet.STATE_SIGN_UP_PROCESS, data._info_sign_up];
            }
            else {
                // no user
                res = [OWebTNet.STATE_NO_USER];
            }
            m.trigger(OWebTNet.EVT_TNET_READY, res);
        }, function () {
            let state = OWebTNet.STATE_UNKNOWN;
            if (m.appContext.userVerified()) {
                state = OWebTNet.STATE_OFFLINE_USER;
            }
            m.trigger(OWebTNet.EVT_TNET_READY, [state]);
        });
        return m;
    }
}
OWebTNet.SELF = id();
OWebTNet.EVT_TNET_READY = id();
OWebTNet.STATE_UNKNOWN = id();
OWebTNet.STATE_NO_USER = id();
OWebTNet.STATE_OFFLINE_USER = id();
OWebTNet.STATE_VERIFIED_USER = id();
OWebTNet.STATE_SIGN_UP_PROCESS = id();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYlROZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcGx1Z2lucy9PV2ViVE5ldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLFNBQVMsTUFBTSxjQUFjLENBQUM7QUFDckMsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXBDLE1BQU0sQ0FBQyxPQUFPLE9BQU8sUUFBUyxTQUFRLFNBQVM7SUFVOUMsWUFBNkIsVUFBbUI7UUFDL0MsS0FBSyxFQUFFLENBQUM7UUFEb0IsZUFBVSxHQUFWLFVBQVUsQ0FBUztJQUVoRCxDQUFDO0lBRUQsS0FBSztRQUNKLE1BQU0sQ0FBQyxHQUFHLElBQUksRUFDYixHQUFHLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFFekQsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQ3RCLEtBQUssRUFDTCxHQUFHLEVBQ0gsSUFBSSxFQUNKLFVBQVUsUUFBYTtZQUN0QixNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO1lBQzNCLElBQUksR0FBRyxDQUFDO1lBRVIsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO2dCQUN2QixtQkFBbUI7Z0JBQ25CLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7Z0JBQ3pELENBQUMsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7YUFDckQ7aUJBQU0sSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO2dCQUM5QixrQ0FBa0M7Z0JBQ2xDLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxxQkFBcUIsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7YUFDM0Q7aUJBQU07Z0JBQ04sVUFBVTtnQkFDVixHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7YUFDL0I7WUFFRCxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDekMsQ0FBQyxFQUNEO1lBQ0MsSUFBSSxLQUFLLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQztZQUVuQyxJQUFJLENBQUMsQ0FBQyxVQUFVLENBQUMsWUFBWSxFQUFFLEVBQUU7Z0JBQ2hDLEtBQUssR0FBRyxRQUFRLENBQUMsa0JBQWtCLENBQUM7YUFDcEM7WUFFRCxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzdDLENBQUMsQ0FDRCxDQUFDO1FBRUYsT0FBTyxDQUFDLENBQUM7SUFDVixDQUFDOztBQW5EZSxhQUFJLEdBQUcsRUFBRSxFQUFFLENBQUM7QUFDWix1QkFBYyxHQUFHLEVBQUUsRUFBRSxDQUFDO0FBRXRCLHNCQUFhLEdBQUcsRUFBRSxFQUFFLENBQUM7QUFDckIsc0JBQWEsR0FBRyxFQUFFLEVBQUUsQ0FBQztBQUNyQiwyQkFBa0IsR0FBRyxFQUFFLEVBQUUsQ0FBQztBQUMxQiw0QkFBbUIsR0FBRyxFQUFFLEVBQUUsQ0FBQztBQUMzQiw4QkFBcUIsR0FBRyxFQUFFLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBPV2ViQXBwIGZyb20gJy4uL09XZWJBcHAnO1xyXG5pbXBvcnQgT1dlYkV2ZW50IGZyb20gJy4uL09XZWJFdmVudCc7XHJcbmltcG9ydCB7IGlkIH0gZnJvbSAnLi4vdXRpbHMvVXRpbHMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT1dlYlROZXQgZXh0ZW5kcyBPV2ViRXZlbnQge1xyXG5cdHN0YXRpYyByZWFkb25seSBTRUxGID0gaWQoKTtcclxuXHRzdGF0aWMgcmVhZG9ubHkgRVZUX1RORVRfUkVBRFkgPSBpZCgpO1xyXG5cclxuXHRzdGF0aWMgcmVhZG9ubHkgU1RBVEVfVU5LTk9XTiA9IGlkKCk7XHJcblx0c3RhdGljIHJlYWRvbmx5IFNUQVRFX05PX1VTRVIgPSBpZCgpO1xyXG5cdHN0YXRpYyByZWFkb25seSBTVEFURV9PRkZMSU5FX1VTRVIgPSBpZCgpO1xyXG5cdHN0YXRpYyByZWFkb25seSBTVEFURV9WRVJJRklFRF9VU0VSID0gaWQoKTtcclxuXHRzdGF0aWMgcmVhZG9ubHkgU1RBVEVfU0lHTl9VUF9QUk9DRVNTID0gaWQoKTtcclxuXHJcblx0Y29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBhcHBDb250ZXh0OiBPV2ViQXBwKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdH1cclxuXHJcblx0Y2hlY2soKSB7XHJcblx0XHRjb25zdCBtID0gdGhpcyxcclxuXHRcdFx0dXJsID0gdGhpcy5hcHBDb250ZXh0LnVybC5nZXQoJ09aX1NFUlZFUl9UTkVUX1NFUlZJQ0UnKTtcclxuXHJcblx0XHR0aGlzLmFwcENvbnRleHQucmVxdWVzdChcclxuXHRcdFx0J0dFVCcsXHJcblx0XHRcdHVybCxcclxuXHRcdFx0bnVsbCxcclxuXHRcdFx0ZnVuY3Rpb24gKHJlc3BvbnNlOiBhbnkpIHtcclxuXHRcdFx0XHRjb25zdCBkYXRhID0gcmVzcG9uc2UuZGF0YTtcclxuXHRcdFx0XHRsZXQgcmVzO1xyXG5cclxuXHRcdFx0XHRpZiAoZGF0YS5fY3VycmVudF91c2VyKSB7XHJcblx0XHRcdFx0XHQvLyB1c2VyIGlzIHZlcmlmaWVkXHJcblx0XHRcdFx0XHRyZXMgPSBbT1dlYlROZXQuU1RBVEVfVkVSSUZJRURfVVNFUiwgZGF0YS5fY3VycmVudF91c2VyXTtcclxuXHRcdFx0XHRcdG0uYXBwQ29udGV4dC51c2VyLnNldEN1cnJlbnRVc2VyKGRhdGEuX2N1cnJlbnRfdXNlcik7XHJcblx0XHRcdFx0fSBlbHNlIGlmIChkYXRhLl9pbmZvX3NpZ25fdXApIHtcclxuXHRcdFx0XHRcdC8vIHVzZXIgaXMgaW4gcmVnaXN0cmF0aW9uIHByb2Nlc3NcclxuXHRcdFx0XHRcdHJlcyA9IFtPV2ViVE5ldC5TVEFURV9TSUdOX1VQX1BST0NFU1MsIGRhdGEuX2luZm9fc2lnbl91cF07XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdC8vIG5vIHVzZXJcclxuXHRcdFx0XHRcdHJlcyA9IFtPV2ViVE5ldC5TVEFURV9OT19VU0VSXTtcclxuXHRcdFx0XHR9XHJcblxyXG5cdFx0XHRcdG0udHJpZ2dlcihPV2ViVE5ldC5FVlRfVE5FVF9SRUFEWSwgcmVzKTtcclxuXHRcdFx0fSxcclxuXHRcdFx0ZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdGxldCBzdGF0ZSA9IE9XZWJUTmV0LlNUQVRFX1VOS05PV047XHJcblxyXG5cdFx0XHRcdGlmIChtLmFwcENvbnRleHQudXNlclZlcmlmaWVkKCkpIHtcclxuXHRcdFx0XHRcdHN0YXRlID0gT1dlYlROZXQuU1RBVEVfT0ZGTElORV9VU0VSO1xyXG5cdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0bS50cmlnZ2VyKE9XZWJUTmV0LkVWVF9UTkVUX1JFQURZLCBbc3RhdGVdKTtcclxuXHRcdFx0fSxcclxuXHRcdCk7XHJcblxyXG5cdFx0cmV0dXJuIG07XHJcblx0fVxyXG59XHJcbiJdfQ==