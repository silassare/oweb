import OWebEvent from "../OWebEvent";
import Utils from "../utils/Utils";
export default class OWebTNet extends OWebEvent {
    constructor(app_context) {
        super();
        this.app_context = app_context;
    }
    check() {
        let m = this, url = this.app_context.url.get("OZ_SERVER_TNET_SERVICE");
        this.app_context.request("GET", url, null, function (response) {
            let data = response["data"], res;
            if (Utils.isPlainObject(data["_current_user"])) {
                // user is verified
                res = [OWebTNet.STATE_VERIFIED_USER, data["_current_user"]];
                m.app_context.user.setCurrentUser(data["_current_user"]);
            }
            else if (Utils.isPlainObject(data["_info_sign_up"])) {
                // user is in registration process
                res = [OWebTNet.STATE_SIGN_UP_PROCESS,
                    data["_info_sign_up"]];
            }
            else {
                // no user
                res = [OWebTNet.STATE_NO_USER];
            }
            m.trigger(OWebTNet.EVT_TNET_READY, res);
        }, function () {
            let state = OWebTNet.STATE_UNKNOWN;
            if (m.app_context.userVerified()) {
                state = OWebTNet.STATE_OFFLINE_USER;
            }
            m.trigger(OWebTNet.EVT_TNET_READY, [state]);
        });
        return m;
    }
}
OWebTNet.SELF = Utils.id();
OWebTNet.EVT_TNET_READY = Utils.id();
OWebTNet.STATE_UNKNOWN = Utils.id();
OWebTNet.STATE_NO_USER = Utils.id();
OWebTNet.STATE_OFFLINE_USER = Utils.id();
OWebTNet.STATE_VERIFIED_USER = Utils.id();
OWebTNet.STATE_SIGN_UP_PROCESS = Utils.id();
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYlROZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcGx1Z2lucy9PV2ViVE5ldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLFNBQVMsTUFBTSxjQUFjLENBQUM7QUFDckMsT0FBTyxLQUFLLE1BQU0sZ0JBQWdCLENBQUM7QUFFbkMsTUFBTSxDQUFDLE9BQU8sZUFBZ0IsU0FBUSxTQUFTO0lBVzlDLFlBQTZCLFdBQW9CO1FBQ2hELEtBQUssRUFBRSxDQUFDO1FBRG9CLGdCQUFXLEdBQVgsV0FBVyxDQUFTO0lBRWpELENBQUM7SUFFRCxLQUFLO1FBQ0osSUFBSSxDQUFDLEdBQUssSUFBSSxFQUNiLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUUxRCxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxVQUFVLFFBQWE7WUFDakUsSUFBSSxJQUFJLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUMxQixHQUFHLENBQUM7WUFFTCxJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQUU7Z0JBQy9DLG1CQUFtQjtnQkFDbkIsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO2dCQUU1RCxDQUFDLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7YUFFekQ7aUJBQU0sSUFBSSxLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxFQUFFO2dCQUN0RCxrQ0FBa0M7Z0JBQ2xDLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxxQkFBcUI7b0JBQ3BDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO2FBQ3hCO2lCQUFNO2dCQUNOLFVBQVU7Z0JBQ1YsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2FBQy9CO1lBRUQsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3pDLENBQUMsRUFBRTtZQUNGLElBQUksS0FBSyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUM7WUFFbkMsSUFBSSxDQUFDLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxFQUFFO2dCQUNqQyxLQUFLLEdBQUcsUUFBUSxDQUFDLGtCQUFrQixDQUFDO2FBQ3BDO1lBRUQsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUM3QyxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sQ0FBQyxDQUFDO0lBQ1YsQ0FBQzs7QUFoRGUsYUFBSSxHQUFvQixLQUFLLENBQUMsRUFBRSxFQUFFLENBQUM7QUFDbkMsdUJBQWMsR0FBVSxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUM7QUFFbkMsc0JBQWEsR0FBVyxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUM7QUFDbkMsc0JBQWEsR0FBVyxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUM7QUFDbkMsMkJBQWtCLEdBQU0sS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDO0FBQ25DLDRCQUFtQixHQUFLLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQztBQUNuQyw4QkFBcUIsR0FBRyxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUM7QUEwQ25ELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgT1dlYkFwcCBmcm9tIFwiLi4vT1dlYkFwcFwiO1xyXG5pbXBvcnQgT1dlYkV2ZW50IGZyb20gXCIuLi9PV2ViRXZlbnRcIjtcclxuaW1wb3J0IFV0aWxzIGZyb20gXCIuLi91dGlscy9VdGlsc1wiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT1dlYlROZXQgZXh0ZW5kcyBPV2ViRXZlbnQge1xyXG5cclxuXHRzdGF0aWMgcmVhZG9ubHkgU0VMRiAgICAgICAgICAgICAgICAgID0gVXRpbHMuaWQoKTtcclxuXHRzdGF0aWMgcmVhZG9ubHkgRVZUX1RORVRfUkVBRFkgICAgICAgID0gVXRpbHMuaWQoKTtcclxuXHJcblx0c3RhdGljIHJlYWRvbmx5IFNUQVRFX1VOS05PV04gICAgICAgICA9IFV0aWxzLmlkKCk7XHJcblx0c3RhdGljIHJlYWRvbmx5IFNUQVRFX05PX1VTRVIgICAgICAgICA9IFV0aWxzLmlkKCk7XHJcblx0c3RhdGljIHJlYWRvbmx5IFNUQVRFX09GRkxJTkVfVVNFUiAgICA9IFV0aWxzLmlkKCk7XHJcblx0c3RhdGljIHJlYWRvbmx5IFNUQVRFX1ZFUklGSUVEX1VTRVIgICA9IFV0aWxzLmlkKCk7XHJcblx0c3RhdGljIHJlYWRvbmx5IFNUQVRFX1NJR05fVVBfUFJPQ0VTUyA9IFV0aWxzLmlkKCk7XHJcblxyXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgYXBwX2NvbnRleHQ6IE9XZWJBcHApIHtcclxuXHRcdHN1cGVyKCk7XHJcblx0fVxyXG5cclxuXHRjaGVjaygpIHtcclxuXHRcdGxldCBtICAgPSB0aGlzLFxyXG5cdFx0XHR1cmwgPSB0aGlzLmFwcF9jb250ZXh0LnVybC5nZXQoXCJPWl9TRVJWRVJfVE5FVF9TRVJWSUNFXCIpO1xyXG5cclxuXHRcdHRoaXMuYXBwX2NvbnRleHQucmVxdWVzdChcIkdFVFwiLCB1cmwsIG51bGwsIGZ1bmN0aW9uIChyZXNwb25zZTogYW55KSB7XHJcblx0XHRcdGxldCBkYXRhID0gcmVzcG9uc2VbXCJkYXRhXCJdLFxyXG5cdFx0XHRcdHJlcztcclxuXHJcblx0XHRcdGlmIChVdGlscy5pc1BsYWluT2JqZWN0KGRhdGFbXCJfY3VycmVudF91c2VyXCJdKSkge1xyXG5cdFx0XHRcdC8vIHVzZXIgaXMgdmVyaWZpZWRcclxuXHRcdFx0XHRyZXMgPSBbT1dlYlROZXQuU1RBVEVfVkVSSUZJRURfVVNFUiwgZGF0YVtcIl9jdXJyZW50X3VzZXJcIl1dO1xyXG5cclxuXHRcdFx0XHRtLmFwcF9jb250ZXh0LnVzZXIuc2V0Q3VycmVudFVzZXIoZGF0YVtcIl9jdXJyZW50X3VzZXJcIl0pO1xyXG5cclxuXHRcdFx0fSBlbHNlIGlmIChVdGlscy5pc1BsYWluT2JqZWN0KGRhdGFbXCJfaW5mb19zaWduX3VwXCJdKSkge1xyXG5cdFx0XHRcdC8vIHVzZXIgaXMgaW4gcmVnaXN0cmF0aW9uIHByb2Nlc3NcclxuXHRcdFx0XHRyZXMgPSBbT1dlYlROZXQuU1RBVEVfU0lHTl9VUF9QUk9DRVNTLFxyXG5cdFx0XHRcdFx0ZGF0YVtcIl9pbmZvX3NpZ25fdXBcIl1dO1xyXG5cdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdC8vIG5vIHVzZXJcclxuXHRcdFx0XHRyZXMgPSBbT1dlYlROZXQuU1RBVEVfTk9fVVNFUl07XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdG0udHJpZ2dlcihPV2ViVE5ldC5FVlRfVE5FVF9SRUFEWSwgcmVzKTtcclxuXHRcdH0sIGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0bGV0IHN0YXRlID0gT1dlYlROZXQuU1RBVEVfVU5LTk9XTjtcclxuXHJcblx0XHRcdGlmIChtLmFwcF9jb250ZXh0LnVzZXJWZXJpZmllZCgpKSB7XHJcblx0XHRcdFx0c3RhdGUgPSBPV2ViVE5ldC5TVEFURV9PRkZMSU5FX1VTRVI7XHJcblx0XHRcdH1cclxuXHJcblx0XHRcdG0udHJpZ2dlcihPV2ViVE5ldC5FVlRfVE5FVF9SRUFEWSwgW3N0YXRlXSk7XHJcblx0XHR9KTtcclxuXHJcblx0XHRyZXR1cm4gbTtcclxuXHR9XHJcbn07Il19