import OWebEvent from '../OWebEvent';
import { id } from '../utils';
export default class OWebTNet extends OWebEvent {
    _appContext;
    static SELF = id();
    static EVT_TNET_READY = id();
    static STATE_UNKNOWN = id();
    static STATE_NO_USER = id();
    static STATE_OFFLINE_USER = id();
    static STATE_VERIFIED_USER = id();
    static STATE_SIGN_UP_PROCESS = id();
    constructor(_appContext) {
        super();
        this._appContext = _appContext;
    }
    onReady(handler) {
        return this.on(OWebTNet.EVT_TNET_READY, handler);
    }
    check() {
        const m = this, url = m._appContext.url.get('OZ_SERVER_TNET_SERVICE'), net = m._appContext.oz.request(url, {
            method: 'GET',
        });
        return net
            .onGoodNews(function goodNewsHandler(response) {
            const data = response.json.data;
            let status = OWebTNet.STATE_NO_USER;
            if (data._current_user) {
                // user is verified
                status = OWebTNet.STATE_VERIFIED_USER;
                m._appContext.user.setCurrentUser(data._current_user);
            }
            else if (data._info_sign_up) {
                // user is in registration process
                status = OWebTNet.STATE_SIGN_UP_PROCESS;
            }
            m.trigger(OWebTNet.EVT_TNET_READY, [status, data]);
        })
            .onFail(function failHandler() {
            let state = OWebTNet.STATE_UNKNOWN;
            if (m._appContext.user.userVerified()) {
                state = OWebTNet.STATE_OFFLINE_USER;
            }
            m.trigger(OWebTNet.EVT_TNET_READY, [state]);
        })
            .send();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYlROZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcGx1Z2lucy9PV2ViVE5ldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLFNBQVMsTUFBTSxjQUFjLENBQUM7QUFDckMsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQWU5QixNQUFNLENBQUMsT0FBTyxPQUFPLFFBR25CLFNBQVEsU0FBUztJQVVXO0lBVDdCLE1BQU0sQ0FBVSxJQUFJLEdBQUcsRUFBRSxFQUFFLENBQUM7SUFDcEIsTUFBTSxDQUFVLGNBQWMsR0FBRyxFQUFFLEVBQUUsQ0FBQztJQUU5QyxNQUFNLENBQVUsYUFBYSxHQUFHLEVBQUUsRUFBRSxDQUFDO0lBQ3JDLE1BQU0sQ0FBVSxhQUFhLEdBQUcsRUFBRSxFQUFFLENBQUM7SUFDckMsTUFBTSxDQUFVLGtCQUFrQixHQUFHLEVBQUUsRUFBRSxDQUFDO0lBQzFDLE1BQU0sQ0FBVSxtQkFBbUIsR0FBRyxFQUFFLEVBQUUsQ0FBQztJQUMzQyxNQUFNLENBQVUscUJBQXFCLEdBQUcsRUFBRSxFQUFFLENBQUM7SUFFN0MsWUFBNkIsV0FBZ0I7UUFDNUMsS0FBSyxFQUFFLENBQUM7UUFEb0IsZ0JBQVcsR0FBWCxXQUFXLENBQUs7SUFFN0MsQ0FBQztJQUVELE9BQU8sQ0FDTixPQUEwRTtRQUUxRSxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQsS0FBSztRQUNKLE1BQU0sQ0FBQyxHQUFHLElBQUksRUFDYixHQUFHLEdBQUcsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLEVBQ3JELEdBQUcsR0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQzdCLEdBQUcsRUFDSDtZQUNDLE1BQU0sRUFBRSxLQUFLO1NBQ2IsQ0FDRCxDQUFDO1FBRUgsT0FBTyxHQUFHO2FBQ1IsVUFBVSxDQUFDLFNBQVMsZUFBZSxDQUFDLFFBQVE7WUFDNUMsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDaEMsSUFBSSxNQUFNLEdBQVcsUUFBUSxDQUFDLGFBQWEsQ0FBQztZQUU1QyxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7Z0JBQ3ZCLG1CQUFtQjtnQkFDbkIsTUFBTSxHQUFHLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQztnQkFDdEMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQzthQUN0RDtpQkFBTSxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7Z0JBQzlCLGtDQUFrQztnQkFDbEMsTUFBTSxHQUFHLFFBQVEsQ0FBQyxxQkFBcUIsQ0FBQzthQUN4QztZQUVELENBQUMsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ3BELENBQUMsQ0FBQzthQUNELE1BQU0sQ0FBQyxTQUFTLFdBQVc7WUFDM0IsSUFBSSxLQUFLLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQztZQUVuQyxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxFQUFFO2dCQUN0QyxLQUFLLEdBQUcsUUFBUSxDQUFDLGtCQUFrQixDQUFDO2FBQ3BDO1lBRUQsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUM3QyxDQUFDLENBQUM7YUFDRCxJQUFJLEVBQUUsQ0FBQztJQUNWLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgT1dlYkFwcCBmcm9tICcuLi9PV2ViQXBwJztcbmltcG9ydCBPV2ViRXZlbnQgZnJvbSAnLi4vT1dlYkV2ZW50JztcbmltcG9ydCB7IGlkIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgT0FwaVJlc3BvbnNlIH0gZnJvbSAnLi4vb3pvbmUnO1xuaW1wb3J0IHsgT05ldFJlc3BvbnNlIH0gZnJvbSAnLi4vT1dlYk5ldCc7XG5cbmV4cG9ydCB0eXBlIE9UTmV0UmVzcG9uc2VEYXRhPFVzZXI+ID0ge1xuXHRvazogYm9vbGVhbjtcblx0X2N1cnJlbnRfdXNlcj86IFVzZXI7XG5cdF9pbmZvX3NpZ25fdXA/OiBhbnk7XG59O1xuXG5leHBvcnQgdHlwZSBPVE5ldFJlYWR5SW5mbzxVc2VyPiA9IHtcblx0c3RhdHVzOiBzdHJpbmc7XG5cdGRhdGE6IE9UTmV0UmVzcG9uc2VEYXRhPFVzZXI+O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT1dlYlROZXQ8XG5cdEFwcCBleHRlbmRzIE9XZWJBcHAsXG5cdFVzZXIgPSBSZXR1cm5UeXBlPEFwcFsndXNlciddWydnZXRDdXJyZW50VXNlciddPlxuPiBleHRlbmRzIE9XZWJFdmVudCB7XG5cdHN0YXRpYyByZWFkb25seSBTRUxGID0gaWQoKTtcblx0cHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgRVZUX1RORVRfUkVBRFkgPSBpZCgpO1xuXG5cdHN0YXRpYyByZWFkb25seSBTVEFURV9VTktOT1dOID0gaWQoKTtcblx0c3RhdGljIHJlYWRvbmx5IFNUQVRFX05PX1VTRVIgPSBpZCgpO1xuXHRzdGF0aWMgcmVhZG9ubHkgU1RBVEVfT0ZGTElORV9VU0VSID0gaWQoKTtcblx0c3RhdGljIHJlYWRvbmx5IFNUQVRFX1ZFUklGSUVEX1VTRVIgPSBpZCgpO1xuXHRzdGF0aWMgcmVhZG9ubHkgU1RBVEVfU0lHTl9VUF9QUk9DRVNTID0gaWQoKTtcblxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IF9hcHBDb250ZXh0OiBBcHApIHtcblx0XHRzdXBlcigpO1xuXHR9XG5cblx0b25SZWFkeShcblx0XHRoYW5kbGVyOiAodGhpczogdGhpcywgc3RhdHVzOiBzdHJpbmcsIGRhdGE/OiBPVE5ldFJlYWR5SW5mbzxVc2VyPikgPT4gdm9pZFxuXHQpOiB0aGlzIHtcblx0XHRyZXR1cm4gdGhpcy5vbihPV2ViVE5ldC5FVlRfVE5FVF9SRUFEWSwgaGFuZGxlcik7XG5cdH1cblxuXHRjaGVjaygpOiBQcm9taXNlPE9OZXRSZXNwb25zZTxPQXBpUmVzcG9uc2U8T1ROZXRSZXNwb25zZURhdGE8VXNlcj4+Pj4ge1xuXHRcdGNvbnN0IG0gPSB0aGlzLFxuXHRcdFx0dXJsID0gbS5fYXBwQ29udGV4dC51cmwuZ2V0KCdPWl9TRVJWRVJfVE5FVF9TRVJWSUNFJyksXG5cdFx0XHRuZXQgPSBtLl9hcHBDb250ZXh0Lm96LnJlcXVlc3Q8T0FwaVJlc3BvbnNlPE9UTmV0UmVzcG9uc2VEYXRhPFVzZXI+Pj4oXG5cdFx0XHRcdHVybCxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdG1ldGhvZDogJ0dFVCcsXG5cdFx0XHRcdH1cblx0XHRcdCk7XG5cblx0XHRyZXR1cm4gbmV0XG5cdFx0XHQub25Hb29kTmV3cyhmdW5jdGlvbiBnb29kTmV3c0hhbmRsZXIocmVzcG9uc2UpIHtcblx0XHRcdFx0Y29uc3QgZGF0YSA9IHJlc3BvbnNlLmpzb24uZGF0YTtcblx0XHRcdFx0bGV0IHN0YXR1czogc3RyaW5nID0gT1dlYlROZXQuU1RBVEVfTk9fVVNFUjtcblxuXHRcdFx0XHRpZiAoZGF0YS5fY3VycmVudF91c2VyKSB7XG5cdFx0XHRcdFx0Ly8gdXNlciBpcyB2ZXJpZmllZFxuXHRcdFx0XHRcdHN0YXR1cyA9IE9XZWJUTmV0LlNUQVRFX1ZFUklGSUVEX1VTRVI7XG5cdFx0XHRcdFx0bS5fYXBwQ29udGV4dC51c2VyLnNldEN1cnJlbnRVc2VyKGRhdGEuX2N1cnJlbnRfdXNlcik7XG5cdFx0XHRcdH0gZWxzZSBpZiAoZGF0YS5faW5mb19zaWduX3VwKSB7XG5cdFx0XHRcdFx0Ly8gdXNlciBpcyBpbiByZWdpc3RyYXRpb24gcHJvY2Vzc1xuXHRcdFx0XHRcdHN0YXR1cyA9IE9XZWJUTmV0LlNUQVRFX1NJR05fVVBfUFJPQ0VTUztcblx0XHRcdFx0fVxuXG5cdFx0XHRcdG0udHJpZ2dlcihPV2ViVE5ldC5FVlRfVE5FVF9SRUFEWSwgW3N0YXR1cywgZGF0YV0pO1xuXHRcdFx0fSlcblx0XHRcdC5vbkZhaWwoZnVuY3Rpb24gZmFpbEhhbmRsZXIoKSB7XG5cdFx0XHRcdGxldCBzdGF0ZSA9IE9XZWJUTmV0LlNUQVRFX1VOS05PV047XG5cblx0XHRcdFx0aWYgKG0uX2FwcENvbnRleHQudXNlci51c2VyVmVyaWZpZWQoKSkge1xuXHRcdFx0XHRcdHN0YXRlID0gT1dlYlROZXQuU1RBVEVfT0ZGTElORV9VU0VSO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0bS50cmlnZ2VyKE9XZWJUTmV0LkVWVF9UTkVUX1JFQURZLCBbc3RhdGVdKTtcblx0XHRcdH0pXG5cdFx0XHQuc2VuZCgpO1xuXHR9XG59XG4iXX0=