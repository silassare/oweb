"use strict";
import Utils from "../utils/Utils";
import OWebEvent from "../OWebEvent";
export default class OWebTNet extends OWebEvent {
    constructor(app_context) {
        super();
        this.app_context = app_context;
    }
    check() {
        let m = this, url = this.app_context.url.get("OZ_SERVER_TNET_SERVICE");
        this.app_context.request("GET", url, null, function (response) {
            let data = response["data"], res;
            if (Utils.isPlainObject(data["_current_user"])) {
                // user is verified
                res = [OWebTNet.STATE_VERIFIED_USER, data["_current_user"]];
                m.app_context.user.setCurrentUser(data["_current_user"]);
            }
            else if (Utils.isPlainObject(data["_info_sign_up"])) {
                // user is in registration process
                res = [OWebTNet.STATE_SIGN_UP_PROCESS,
                    data["_info_sign_up"]];
            }
            else {
                // no user
                res = [OWebTNet.STATE_NO_USER];
            }
            m.trigger(OWebTNet.EVT_TNET_READY, res);
        }, function () {
            let state = OWebTNet.STATE_UNKNOWN;
            if (m.app_context.userVerified()) {
                state = OWebTNet.STATE_OFFLINE_USER;
            }
            m.trigger(OWebTNet.EVT_TNET_READY, [state]);
        });
        return m;
    }
}
OWebTNet.STATE_UNKNOWN = -1;
OWebTNet.STATE_NO_USER = 0;
OWebTNet.STATE_OFFLINE_USER = 1;
OWebTNet.STATE_VERIFIED_USER = 2;
OWebTNet.STATE_SIGN_UP_PROCESS = 3;
OWebTNet.EVT_TNET_READY = "OWebTNet:ready";
OWebTNet.SELF = "OWebTNet";
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYlROZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcGx1Z2lucy9PV2ViVE5ldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFFYixPQUFPLEtBQUssTUFBTSxnQkFBZ0IsQ0FBQztBQUNuQyxPQUFPLFNBQVMsTUFBTSxjQUFjLENBQUM7QUFHckMsTUFBTSxDQUFDLE9BQU8sZUFBZ0IsU0FBUSxTQUFTO0lBVzlDLFlBQTZCLFdBQW9CO1FBQ2hELEtBQUssRUFBRSxDQUFDO1FBRG9CLGdCQUFXLEdBQVgsV0FBVyxDQUFTO0lBRWpELENBQUM7SUFFRCxLQUFLO1FBQ0osSUFBSSxDQUFDLEdBQUssSUFBSSxFQUNiLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUUxRCxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxVQUFVLFFBQWE7WUFDakUsSUFBSSxJQUFJLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUMxQixHQUFHLENBQUM7WUFFTCxJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQUU7Z0JBQy9DLG1CQUFtQjtnQkFDbkIsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLG1CQUFtQixFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO2dCQUU1RCxDQUFDLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7YUFFekQ7aUJBQU0sSUFBSSxLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxFQUFFO2dCQUN0RCxrQ0FBa0M7Z0JBQ2xDLEdBQUcsR0FBRyxDQUFDLFFBQVEsQ0FBQyxxQkFBcUI7b0JBQ3BDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO2FBQ3hCO2lCQUFNO2dCQUNOLFVBQVU7Z0JBQ1YsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO2FBQy9CO1lBRUQsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3pDLENBQUMsRUFBRTtZQUNGLElBQUksS0FBSyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUM7WUFFbkMsSUFBSSxDQUFDLENBQUMsV0FBVyxDQUFDLFlBQVksRUFBRSxFQUFFO2dCQUNqQyxLQUFLLEdBQUcsUUFBUSxDQUFDLGtCQUFrQixDQUFDO2FBQ3BDO1lBRUQsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsY0FBYyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUM3QyxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sQ0FBQyxDQUFDO0lBQ1YsQ0FBQzs7QUFoRGUsc0JBQWEsR0FBVyxDQUFDLENBQUMsQ0FBQztBQUMzQixzQkFBYSxHQUFXLENBQUMsQ0FBQztBQUMxQiwyQkFBa0IsR0FBTSxDQUFDLENBQUM7QUFDMUIsNEJBQW1CLEdBQUssQ0FBQyxDQUFDO0FBQzFCLDhCQUFxQixHQUFHLENBQUMsQ0FBQztBQUUxQix1QkFBYyxHQUFHLGdCQUFnQixDQUFDO0FBQ2xDLGFBQUksR0FBYSxVQUFVLENBQUM7QUEwQzVDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuXHJcbmltcG9ydCBVdGlscyBmcm9tIFwiLi4vdXRpbHMvVXRpbHNcIjtcclxuaW1wb3J0IE9XZWJFdmVudCBmcm9tIFwiLi4vT1dlYkV2ZW50XCI7XHJcbmltcG9ydCBPV2ViQXBwIGZyb20gXCIuLi9PV2ViQXBwXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPV2ViVE5ldCBleHRlbmRzIE9XZWJFdmVudCB7XHJcblxyXG5cdHN0YXRpYyByZWFkb25seSBTVEFURV9VTktOT1dOICAgICAgICAgPSAtMTtcclxuXHRzdGF0aWMgcmVhZG9ubHkgU1RBVEVfTk9fVVNFUiAgICAgICAgID0gMDtcclxuXHRzdGF0aWMgcmVhZG9ubHkgU1RBVEVfT0ZGTElORV9VU0VSICAgID0gMTtcclxuXHRzdGF0aWMgcmVhZG9ubHkgU1RBVEVfVkVSSUZJRURfVVNFUiAgID0gMjtcclxuXHRzdGF0aWMgcmVhZG9ubHkgU1RBVEVfU0lHTl9VUF9QUk9DRVNTID0gMztcclxuXHJcblx0c3RhdGljIHJlYWRvbmx5IEVWVF9UTkVUX1JFQURZID0gXCJPV2ViVE5ldDpyZWFkeVwiO1xyXG5cdHN0YXRpYyByZWFkb25seSBTRUxGICAgICAgICAgICA9IFwiT1dlYlROZXRcIjtcclxuXHJcblx0Y29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBhcHBfY29udGV4dDogT1dlYkFwcCkge1xyXG5cdFx0c3VwZXIoKTtcclxuXHR9XHJcblxyXG5cdGNoZWNrKCkge1xyXG5cdFx0bGV0IG0gICA9IHRoaXMsXHJcblx0XHRcdHVybCA9IHRoaXMuYXBwX2NvbnRleHQudXJsLmdldChcIk9aX1NFUlZFUl9UTkVUX1NFUlZJQ0VcIik7XHJcblxyXG5cdFx0dGhpcy5hcHBfY29udGV4dC5yZXF1ZXN0KFwiR0VUXCIsIHVybCwgbnVsbCwgZnVuY3Rpb24gKHJlc3BvbnNlOiBhbnkpIHtcclxuXHRcdFx0bGV0IGRhdGEgPSByZXNwb25zZVtcImRhdGFcIl0sXHJcblx0XHRcdFx0cmVzO1xyXG5cclxuXHRcdFx0aWYgKFV0aWxzLmlzUGxhaW5PYmplY3QoZGF0YVtcIl9jdXJyZW50X3VzZXJcIl0pKSB7XHJcblx0XHRcdFx0Ly8gdXNlciBpcyB2ZXJpZmllZFxyXG5cdFx0XHRcdHJlcyA9IFtPV2ViVE5ldC5TVEFURV9WRVJJRklFRF9VU0VSLCBkYXRhW1wiX2N1cnJlbnRfdXNlclwiXV07XHJcblxyXG5cdFx0XHRcdG0uYXBwX2NvbnRleHQudXNlci5zZXRDdXJyZW50VXNlcihkYXRhW1wiX2N1cnJlbnRfdXNlclwiXSk7XHJcblxyXG5cdFx0XHR9IGVsc2UgaWYgKFV0aWxzLmlzUGxhaW5PYmplY3QoZGF0YVtcIl9pbmZvX3NpZ25fdXBcIl0pKSB7XHJcblx0XHRcdFx0Ly8gdXNlciBpcyBpbiByZWdpc3RyYXRpb24gcHJvY2Vzc1xyXG5cdFx0XHRcdHJlcyA9IFtPV2ViVE5ldC5TVEFURV9TSUdOX1VQX1BST0NFU1MsXHJcblx0XHRcdFx0XHRkYXRhW1wiX2luZm9fc2lnbl91cFwiXV07XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0Ly8gbm8gdXNlclxyXG5cdFx0XHRcdHJlcyA9IFtPV2ViVE5ldC5TVEFURV9OT19VU0VSXTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0bS50cmlnZ2VyKE9XZWJUTmV0LkVWVF9UTkVUX1JFQURZLCByZXMpO1xyXG5cdFx0fSwgZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRsZXQgc3RhdGUgPSBPV2ViVE5ldC5TVEFURV9VTktOT1dOO1xyXG5cclxuXHRcdFx0aWYgKG0uYXBwX2NvbnRleHQudXNlclZlcmlmaWVkKCkpIHtcclxuXHRcdFx0XHRzdGF0ZSA9IE9XZWJUTmV0LlNUQVRFX09GRkxJTkVfVVNFUjtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0bS50cmlnZ2VyKE9XZWJUTmV0LkVWVF9UTkVUX1JFQURZLCBbc3RhdGVdKTtcclxuXHRcdH0pO1xyXG5cclxuXHRcdHJldHVybiBtO1xyXG5cdH1cclxufTsiXX0=