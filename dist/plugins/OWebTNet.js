import { OWebEvent, Utils } from "../oweb";
export default class OWebTNet extends OWebEvent {
    constructor(app_context) {
        super();
        this.app_context = app_context;
    }
    check() {
        let m = this, url = this.app_context.url.get("OZ_SERVER_TNET_SERVICE");
        this.app_context.request("GET", url, null, function (response) {
            let data = response["data"], res;
            if (Utils.isPlainObject(data["_current_user"])) {
                // user is verified
                res = [OWebTNet.STATE_VERIFIED_USER, data["_current_user"]];
                m.app_context.user.setCurrentUser(data["_current_user"]);
            }
            else if (Utils.isPlainObject(data["_info_sign_up"])) {
                // user is in registration process
                res = [OWebTNet.STATE_SIGN_UP_PROCESS,
                    data["_info_sign_up"]];
            }
            else {
                // no user
                res = [OWebTNet.STATE_NO_USER];
            }
            m.trigger(OWebTNet.EVT_TNET_READY, res);
        }, function () {
            let state = OWebTNet.STATE_UNKNOWN;
            if (m.app_context.userVerified()) {
                state = OWebTNet.STATE_OFFLINE_USER;
            }
            m.trigger(OWebTNet.EVT_TNET_READY, [state]);
        });
        return m;
    }
}
OWebTNet.STATE_UNKNOWN = -1;
OWebTNet.STATE_NO_USER = 0;
OWebTNet.STATE_OFFLINE_USER = 1;
OWebTNet.STATE_VERIFIED_USER = 2;
OWebTNet.STATE_SIGN_UP_PROCESS = 3;
OWebTNet.EVT_TNET_READY = "OWebTNet:ready";
OWebTNet.SELF = "OWebTNet";
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYlROZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvcGx1Z2lucy9PV2ViVE5ldC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQVUsU0FBUyxFQUFFLEtBQUssRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUVsRCxNQUFNLENBQUMsT0FBTyxlQUFnQixTQUFRLFNBQVM7SUFXOUMsWUFBNkIsV0FBb0I7UUFDaEQsS0FBSyxFQUFFLENBQUM7UUFEb0IsZ0JBQVcsR0FBWCxXQUFXLENBQVM7SUFFakQsQ0FBQztJQUVELEtBQUs7UUFDSixJQUFJLENBQUMsR0FBSyxJQUFJLEVBQ2IsR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQyxDQUFDO1FBRTFELElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLFVBQVUsUUFBYTtZQUNqRSxJQUFJLElBQUksR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQzFCLEdBQUcsQ0FBQztZQUVMLElBQUksS0FBSyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsRUFBRTtnQkFDL0MsbUJBQW1CO2dCQUNuQixHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsbUJBQW1CLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7Z0JBRTVELENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQzthQUV6RDtpQkFBTSxJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3RELGtDQUFrQztnQkFDbEMsR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLHFCQUFxQjtvQkFDcEMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7YUFDeEI7aUJBQU07Z0JBQ04sVUFBVTtnQkFDVixHQUFHLEdBQUcsQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUM7YUFDL0I7WUFFRCxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDekMsQ0FBQyxFQUFFO1lBQ0YsSUFBSSxLQUFLLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQztZQUVuQyxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsWUFBWSxFQUFFLEVBQUU7Z0JBQ2pDLEtBQUssR0FBRyxRQUFRLENBQUMsa0JBQWtCLENBQUM7YUFDcEM7WUFFRCxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzdDLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxDQUFDLENBQUM7SUFDVixDQUFDOztBQWhEZSxzQkFBYSxHQUFXLENBQUMsQ0FBQyxDQUFDO0FBQzNCLHNCQUFhLEdBQVcsQ0FBQyxDQUFDO0FBQzFCLDJCQUFrQixHQUFNLENBQUMsQ0FBQztBQUMxQiw0QkFBbUIsR0FBSyxDQUFDLENBQUM7QUFDMUIsOEJBQXFCLEdBQUcsQ0FBQyxDQUFDO0FBRTFCLHVCQUFjLEdBQUcsZ0JBQWdCLENBQUM7QUFDbEMsYUFBSSxHQUFhLFVBQVUsQ0FBQztBQTBDNUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7T1dlYkFwcCwgT1dlYkV2ZW50LCBVdGlsc30gZnJvbSBcIi4uL293ZWJcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9XZWJUTmV0IGV4dGVuZHMgT1dlYkV2ZW50IHtcclxuXHJcblx0c3RhdGljIHJlYWRvbmx5IFNUQVRFX1VOS05PV04gICAgICAgICA9IC0xO1xyXG5cdHN0YXRpYyByZWFkb25seSBTVEFURV9OT19VU0VSICAgICAgICAgPSAwO1xyXG5cdHN0YXRpYyByZWFkb25seSBTVEFURV9PRkZMSU5FX1VTRVIgICAgPSAxO1xyXG5cdHN0YXRpYyByZWFkb25seSBTVEFURV9WRVJJRklFRF9VU0VSICAgPSAyO1xyXG5cdHN0YXRpYyByZWFkb25seSBTVEFURV9TSUdOX1VQX1BST0NFU1MgPSAzO1xyXG5cclxuXHRzdGF0aWMgcmVhZG9ubHkgRVZUX1RORVRfUkVBRFkgPSBcIk9XZWJUTmV0OnJlYWR5XCI7XHJcblx0c3RhdGljIHJlYWRvbmx5IFNFTEYgICAgICAgICAgID0gXCJPV2ViVE5ldFwiO1xyXG5cclxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGFwcF9jb250ZXh0OiBPV2ViQXBwKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdH1cclxuXHJcblx0Y2hlY2soKSB7XHJcblx0XHRsZXQgbSAgID0gdGhpcyxcclxuXHRcdFx0dXJsID0gdGhpcy5hcHBfY29udGV4dC51cmwuZ2V0KFwiT1pfU0VSVkVSX1RORVRfU0VSVklDRVwiKTtcclxuXHJcblx0XHR0aGlzLmFwcF9jb250ZXh0LnJlcXVlc3QoXCJHRVRcIiwgdXJsLCBudWxsLCBmdW5jdGlvbiAocmVzcG9uc2U6IGFueSkge1xyXG5cdFx0XHRsZXQgZGF0YSA9IHJlc3BvbnNlW1wiZGF0YVwiXSxcclxuXHRcdFx0XHRyZXM7XHJcblxyXG5cdFx0XHRpZiAoVXRpbHMuaXNQbGFpbk9iamVjdChkYXRhW1wiX2N1cnJlbnRfdXNlclwiXSkpIHtcclxuXHRcdFx0XHQvLyB1c2VyIGlzIHZlcmlmaWVkXHJcblx0XHRcdFx0cmVzID0gW09XZWJUTmV0LlNUQVRFX1ZFUklGSUVEX1VTRVIsIGRhdGFbXCJfY3VycmVudF91c2VyXCJdXTtcclxuXHJcblx0XHRcdFx0bS5hcHBfY29udGV4dC51c2VyLnNldEN1cnJlbnRVc2VyKGRhdGFbXCJfY3VycmVudF91c2VyXCJdKTtcclxuXHJcblx0XHRcdH0gZWxzZSBpZiAoVXRpbHMuaXNQbGFpbk9iamVjdChkYXRhW1wiX2luZm9fc2lnbl91cFwiXSkpIHtcclxuXHRcdFx0XHQvLyB1c2VyIGlzIGluIHJlZ2lzdHJhdGlvbiBwcm9jZXNzXHJcblx0XHRcdFx0cmVzID0gW09XZWJUTmV0LlNUQVRFX1NJR05fVVBfUFJPQ0VTUyxcclxuXHRcdFx0XHRcdGRhdGFbXCJfaW5mb19zaWduX3VwXCJdXTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHQvLyBubyB1c2VyXHJcblx0XHRcdFx0cmVzID0gW09XZWJUTmV0LlNUQVRFX05PX1VTRVJdO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRtLnRyaWdnZXIoT1dlYlROZXQuRVZUX1RORVRfUkVBRFksIHJlcyk7XHJcblx0XHR9LCBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdGxldCBzdGF0ZSA9IE9XZWJUTmV0LlNUQVRFX1VOS05PV047XHJcblxyXG5cdFx0XHRpZiAobS5hcHBfY29udGV4dC51c2VyVmVyaWZpZWQoKSkge1xyXG5cdFx0XHRcdHN0YXRlID0gT1dlYlROZXQuU1RBVEVfT0ZGTElORV9VU0VSO1xyXG5cdFx0XHR9XHJcblxyXG5cdFx0XHRtLnRyaWdnZXIoT1dlYlROZXQuRVZUX1RORVRfUkVBRFksIFtzdGF0ZV0pO1xyXG5cdFx0fSk7XHJcblxyXG5cdFx0cmV0dXJuIG07XHJcblx0fVxyXG59OyJdfQ==