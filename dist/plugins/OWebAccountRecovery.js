import OWebEvent from "../OWebEvent";
import Utils from "../utils/Utils";
export default class OWebAccountRecovery extends OWebEvent {
    constructor(app_context) {
        super();
        this.app_context = app_context;
    }
    stepStart(form) {
        let ofv = this.app_context.getFormValidator(form, ["phone"]), formData;
        if (ofv.validate()) {
            formData = ofv.getFormData(["phone", "cc2"]);
            formData.set("step", String(OWebAccountRecovery.AR_STEP_START));
            this._sendForm(form, formData, OWebAccountRecovery.AR_STEP_VALIDATE);
        }
    }
    stepValidate(form) {
        let ofv = this.app_context.getFormValidator(form, ["code"]);
        if (ofv.validate()) {
            this._sendForm(form, {
                "step": OWebAccountRecovery.AR_STEP_VALIDATE,
                "code": ofv.getField("code")
            }, OWebAccountRecovery.AR_STEP_END);
        }
    }
    stepEnd(form) {
        let required = ["pass", "vpass"], ofv = this.app_context.getFormValidator(form, required), formData;
        if (ofv.validate()) {
            formData = ofv.getFormData(required);
            formData.set("step", String(OWebAccountRecovery.AR_STEP_END));
            this._sendForm(form, formData);
        }
    }
    onError(handler) {
        return this.on(OWebAccountRecovery.EVT_AR_ERROR, handler);
    }
    onNextStep(handler) {
        return this.on(OWebAccountRecovery.EVT_AR_NEXT_STEP, handler);
    }
    onSuccess(handler) {
        return this.on(OWebAccountRecovery.EVT_AR_SUCCESS, handler);
    }
    _sendForm(form, data, next_step) {
        let m = this, url = m.app_context.url.get("OZ_SERVER_ACCOUNT_RECOVERY_SERVICE");
        m.app_context.request("POST", url, data, function (response) {
            if (next_step) {
                m.trigger(OWebAccountRecovery.EVT_AR_NEXT_STEP, [response, next_step]);
            }
            else {
                m.trigger(OWebAccountRecovery.EVT_AR_SUCCESS, [response]);
            }
        }, function (response) {
            m.trigger(OWebAccountRecovery.EVT_AR_ERROR, [response]);
        }, true);
    }
}
OWebAccountRecovery.SELF = Utils.id();
OWebAccountRecovery.EVT_AR_NEXT_STEP = Utils.id();
OWebAccountRecovery.EVT_AR_SUCCESS = Utils.id();
OWebAccountRecovery.EVT_AR_ERROR = Utils.id();
OWebAccountRecovery.AR_STEP_START = 1;
OWebAccountRecovery.AR_STEP_VALIDATE = 2;
OWebAccountRecovery.AR_STEP_END = 3;
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYkFjY291bnRSZWNvdmVyeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wbHVnaW5zL09XZWJBY2NvdW50UmVjb3ZlcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxTQUFTLE1BQU0sY0FBYyxDQUFDO0FBQ3JDLE9BQU8sS0FBSyxNQUFNLGdCQUFnQixDQUFDO0FBRW5DLE1BQU0sQ0FBQyxPQUFPLE9BQU8sbUJBQW9CLFNBQVEsU0FBUztJQVd6RCxZQUE2QixXQUFvQjtRQUNoRCxLQUFLLEVBQUUsQ0FBQztRQURvQixnQkFBVyxHQUFYLFdBQVcsQ0FBUztJQUVqRCxDQUFDO0lBRUQsU0FBUyxDQUFDLElBQXFCO1FBQzlCLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsRUFDM0QsUUFBUSxDQUFDO1FBRVYsSUFBSSxHQUFHLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDbkIsUUFBUSxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUM3QyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsbUJBQW1CLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztZQUNoRSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxRQUFRLEVBQUUsbUJBQW1CLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztTQUNyRTtJQUNGLENBQUM7SUFFRCxZQUFZLENBQUMsSUFBcUI7UUFDakMsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBRTVELElBQUksR0FBRyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ25CLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFO2dCQUNwQixNQUFNLEVBQUUsbUJBQW1CLENBQUMsZ0JBQWdCO2dCQUM1QyxNQUFNLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7YUFDNUIsRUFBRSxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNwQztJQUVGLENBQUM7SUFFRCxPQUFPLENBQUMsSUFBcUI7UUFDNUIsSUFBSSxRQUFRLEdBQUcsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLEVBQy9CLEdBQUcsR0FBUSxJQUFJLENBQUMsV0FBVyxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsRUFDNUQsUUFBUSxDQUFDO1FBRVYsSUFBSSxHQUFHLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDbkIsUUFBUSxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDckMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7WUFFOUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7U0FDL0I7SUFDRixDQUFDO0lBRUQsT0FBTyxDQUFDLE9BQXlDO1FBQ2hELE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDM0QsQ0FBQztJQUVELFVBQVUsQ0FBQyxPQUF1RDtRQUNqRSxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsbUJBQW1CLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDL0QsQ0FBQztJQUVELFNBQVMsQ0FBQyxPQUF5QztRQUNsRCxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsbUJBQW1CLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFFRCxTQUFTLENBQUMsSUFBcUIsRUFBRSxJQUFTLEVBQUUsU0FBa0I7UUFDN0QsSUFBSSxDQUFDLEdBQUssSUFBSSxFQUNiLEdBQUcsR0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsb0NBQW9DLENBQUMsQ0FBQztRQUVuRSxDQUFDLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxVQUFVLFFBQWE7WUFDL0QsSUFBSSxTQUFTLEVBQUU7Z0JBQ2QsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO2FBQ3ZFO2lCQUFNO2dCQUNOLENBQUMsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsY0FBYyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQzthQUMxRDtRQUNGLENBQUMsRUFBRSxVQUFVLFFBQWE7WUFDekIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ3pELENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNWLENBQUM7O0FBMUVlLHdCQUFJLEdBQWUsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDO0FBQzlCLG9DQUFnQixHQUFHLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQztBQUM5QixrQ0FBYyxHQUFLLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQztBQUM5QixnQ0FBWSxHQUFPLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQztBQUU5QixpQ0FBYSxHQUFNLENBQUMsQ0FBQztBQUNyQixvQ0FBZ0IsR0FBRyxDQUFDLENBQUM7QUFDckIsK0JBQVcsR0FBUSxDQUFDLENBQUM7QUFvRXJDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgT1dlYkFwcCBmcm9tIFwiLi4vT1dlYkFwcFwiO1xyXG5pbXBvcnQge2lDb21SZXNwb25zZX0gZnJvbSBcIi4uL09XZWJDb21cIjtcclxuaW1wb3J0IE9XZWJFdmVudCBmcm9tIFwiLi4vT1dlYkV2ZW50XCI7XHJcbmltcG9ydCBVdGlscyBmcm9tIFwiLi4vdXRpbHMvVXRpbHNcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9XZWJBY2NvdW50UmVjb3ZlcnkgZXh0ZW5kcyBPV2ViRXZlbnQge1xyXG5cclxuXHRzdGF0aWMgcmVhZG9ubHkgU0VMRiAgICAgICAgICAgICA9IFV0aWxzLmlkKCk7XHJcblx0c3RhdGljIHJlYWRvbmx5IEVWVF9BUl9ORVhUX1NURVAgPSBVdGlscy5pZCgpO1xyXG5cdHN0YXRpYyByZWFkb25seSBFVlRfQVJfU1VDQ0VTUyAgID0gVXRpbHMuaWQoKTtcclxuXHRzdGF0aWMgcmVhZG9ubHkgRVZUX0FSX0VSUk9SICAgICA9IFV0aWxzLmlkKCk7XHJcblxyXG5cdHN0YXRpYyByZWFkb25seSBBUl9TVEVQX1NUQVJUICAgID0gMTtcclxuXHRzdGF0aWMgcmVhZG9ubHkgQVJfU1RFUF9WQUxJREFURSA9IDI7XHJcblx0c3RhdGljIHJlYWRvbmx5IEFSX1NURVBfRU5EICAgICAgPSAzO1xyXG5cclxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGFwcF9jb250ZXh0OiBPV2ViQXBwKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdH1cclxuXHJcblx0c3RlcFN0YXJ0KGZvcm06IEhUTUxGb3JtRWxlbWVudCkge1xyXG5cdFx0bGV0IG9mdiA9IHRoaXMuYXBwX2NvbnRleHQuZ2V0Rm9ybVZhbGlkYXRvcihmb3JtLCBbXCJwaG9uZVwiXSksXHJcblx0XHRcdGZvcm1EYXRhO1xyXG5cclxuXHRcdGlmIChvZnYudmFsaWRhdGUoKSkge1xyXG5cdFx0XHRmb3JtRGF0YSA9IG9mdi5nZXRGb3JtRGF0YShbXCJwaG9uZVwiLCBcImNjMlwiXSk7XHJcblx0XHRcdGZvcm1EYXRhLnNldChcInN0ZXBcIiwgU3RyaW5nKE9XZWJBY2NvdW50UmVjb3ZlcnkuQVJfU1RFUF9TVEFSVCkpO1xyXG5cdFx0XHR0aGlzLl9zZW5kRm9ybShmb3JtLCBmb3JtRGF0YSwgT1dlYkFjY291bnRSZWNvdmVyeS5BUl9TVEVQX1ZBTElEQVRFKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHN0ZXBWYWxpZGF0ZShmb3JtOiBIVE1MRm9ybUVsZW1lbnQpIHtcclxuXHRcdGxldCBvZnYgPSB0aGlzLmFwcF9jb250ZXh0LmdldEZvcm1WYWxpZGF0b3IoZm9ybSwgW1wiY29kZVwiXSk7XHJcblxyXG5cdFx0aWYgKG9mdi52YWxpZGF0ZSgpKSB7XHJcblx0XHRcdHRoaXMuX3NlbmRGb3JtKGZvcm0sIHtcclxuXHRcdFx0XHRcInN0ZXBcIjogT1dlYkFjY291bnRSZWNvdmVyeS5BUl9TVEVQX1ZBTElEQVRFLFxyXG5cdFx0XHRcdFwiY29kZVwiOiBvZnYuZ2V0RmllbGQoXCJjb2RlXCIpXHJcblx0XHRcdH0sIE9XZWJBY2NvdW50UmVjb3ZlcnkuQVJfU1RFUF9FTkQpO1xyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdHN0ZXBFbmQoZm9ybTogSFRNTEZvcm1FbGVtZW50KSB7XHJcblx0XHRsZXQgcmVxdWlyZWQgPSBbXCJwYXNzXCIsIFwidnBhc3NcIl0sXHJcblx0XHRcdG9mdiAgICAgID0gdGhpcy5hcHBfY29udGV4dC5nZXRGb3JtVmFsaWRhdG9yKGZvcm0sIHJlcXVpcmVkKSxcclxuXHRcdFx0Zm9ybURhdGE7XHJcblxyXG5cdFx0aWYgKG9mdi52YWxpZGF0ZSgpKSB7XHJcblx0XHRcdGZvcm1EYXRhID0gb2Z2LmdldEZvcm1EYXRhKHJlcXVpcmVkKTtcclxuXHRcdFx0Zm9ybURhdGEuc2V0KFwic3RlcFwiLCBTdHJpbmcoT1dlYkFjY291bnRSZWNvdmVyeS5BUl9TVEVQX0VORCkpO1xyXG5cclxuXHRcdFx0dGhpcy5fc2VuZEZvcm0oZm9ybSwgZm9ybURhdGEpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0b25FcnJvcihoYW5kbGVyOiAocmVzcG9uc2U6IGlDb21SZXNwb25zZSkgPT4gdm9pZCk6IHRoaXMge1xyXG5cdFx0cmV0dXJuIHRoaXMub24oT1dlYkFjY291bnRSZWNvdmVyeS5FVlRfQVJfRVJST1IsIGhhbmRsZXIpO1xyXG5cdH1cclxuXHJcblx0b25OZXh0U3RlcChoYW5kbGVyOiAocmVzcG9uc2U6IGlDb21SZXNwb25zZSwgc3RlcDogbnVtYmVyKSA9PiB2b2lkKTogdGhpcyB7XHJcblx0XHRyZXR1cm4gdGhpcy5vbihPV2ViQWNjb3VudFJlY292ZXJ5LkVWVF9BUl9ORVhUX1NURVAsIGhhbmRsZXIpO1xyXG5cdH1cclxuXHJcblx0b25TdWNjZXNzKGhhbmRsZXI6IChyZXNwb25zZTogaUNvbVJlc3BvbnNlKSA9PiB2b2lkKTogdGhpcyB7XHJcblx0XHRyZXR1cm4gdGhpcy5vbihPV2ViQWNjb3VudFJlY292ZXJ5LkVWVF9BUl9TVUNDRVNTLCBoYW5kbGVyKTtcclxuXHR9XHJcblxyXG5cdF9zZW5kRm9ybShmb3JtOiBIVE1MRm9ybUVsZW1lbnQsIGRhdGE6IGFueSwgbmV4dF9zdGVwPzogbnVtYmVyKSB7XHJcblx0XHRsZXQgbSAgID0gdGhpcyxcclxuXHRcdFx0dXJsID0gbS5hcHBfY29udGV4dC51cmwuZ2V0KFwiT1pfU0VSVkVSX0FDQ09VTlRfUkVDT1ZFUllfU0VSVklDRVwiKTtcclxuXHJcblx0XHRtLmFwcF9jb250ZXh0LnJlcXVlc3QoXCJQT1NUXCIsIHVybCwgZGF0YSwgZnVuY3Rpb24gKHJlc3BvbnNlOiBhbnkpIHtcclxuXHRcdFx0aWYgKG5leHRfc3RlcCkge1xyXG5cdFx0XHRcdG0udHJpZ2dlcihPV2ViQWNjb3VudFJlY292ZXJ5LkVWVF9BUl9ORVhUX1NURVAsIFtyZXNwb25zZSwgbmV4dF9zdGVwXSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0bS50cmlnZ2VyKE9XZWJBY2NvdW50UmVjb3ZlcnkuRVZUX0FSX1NVQ0NFU1MsIFtyZXNwb25zZV0pO1xyXG5cdFx0XHR9XHJcblx0XHR9LCBmdW5jdGlvbiAocmVzcG9uc2U6IGFueSkge1xyXG5cdFx0XHRtLnRyaWdnZXIoT1dlYkFjY291bnRSZWNvdmVyeS5FVlRfQVJfRVJST1IsIFtyZXNwb25zZV0pO1xyXG5cdFx0fSwgdHJ1ZSk7XHJcblx0fVxyXG59O1xyXG4iXX0=