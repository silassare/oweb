import OWebEvent from '../OWebEvent';
import { id } from '../utils';
export default class OWebAccountRecovery extends OWebEvent {
    _appContext;
    static SELF = id();
    static EVT_AR_SUCCESS = id();
    static EVT_AR_FAIL = id();
    static AR_STEP_START = 1;
    static AR_STEP_VALIDATE = 2;
    static AR_STEP_END = 3;
    constructor(_appContext) {
        super();
        this._appContext = _appContext;
    }
    stepStart(data) {
        return this._sendForm({
            phone: data.phone,
            cc2: data.cc2,
            step: OWebAccountRecovery.AR_STEP_START,
        }, OWebAccountRecovery.AR_STEP_VALIDATE);
    }
    stepValidate(data) {
        return this._sendForm({
            step: OWebAccountRecovery.AR_STEP_VALIDATE,
            code: data.code,
        }, OWebAccountRecovery.AR_STEP_END);
    }
    stepEnd(data) {
        return this._sendForm({
            pass: data.pass,
            vpass: data.vpass,
            step: String(OWebAccountRecovery.AR_STEP_END),
        });
    }
    onRecoverySuccess(handler) {
        return this.on(OWebAccountRecovery.EVT_AR_SUCCESS, handler);
    }
    onRecoveryFail(handler) {
        return this.on(OWebAccountRecovery.EVT_AR_FAIL, handler);
    }
    _sendForm(data, nextStep) {
        const m = this, url = m._appContext.url.get('OZ_SERVER_ACCOUNT_RECOVERY_SERVICE'), net = m._appContext.oz.request(url, {
            method: 'POST',
            body: data,
        });
        return net
            .onGoodNews(function goodNewsHandler(response) {
            if (!nextStep) {
                m.trigger(OWebAccountRecovery.EVT_AR_SUCCESS, [response]);
            }
        })
            .onFail(function failHandler(err) {
            m.trigger(OWebAccountRecovery.EVT_AR_FAIL, [err]);
        })
            .send();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYkFjY291bnRSZWNvdmVyeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wbHVnaW5zL09XZWJBY2NvdW50UmVjb3ZlcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxTQUFTLE1BQU0sY0FBYyxDQUFDO0FBQ3JDLE9BQU8sRUFBQyxFQUFFLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFLNUIsTUFBTSxDQUFDLE9BQU8sT0FBTyxtQkFBMEMsU0FBUSxTQUFTO0lBU2xEO0lBUjdCLE1BQU0sQ0FBVSxJQUFJLEdBQXFCLEVBQUUsRUFBRSxDQUFDO0lBQ3RDLE1BQU0sQ0FBVSxjQUFjLEdBQUcsRUFBRSxFQUFFLENBQUM7SUFDdEMsTUFBTSxDQUFVLFdBQVcsR0FBTSxFQUFFLEVBQUUsQ0FBQztJQUU5QyxNQUFNLENBQVUsYUFBYSxHQUFNLENBQUMsQ0FBQztJQUNyQyxNQUFNLENBQVUsZ0JBQWdCLEdBQUcsQ0FBQyxDQUFDO0lBQ3JDLE1BQU0sQ0FBVSxXQUFXLEdBQVEsQ0FBQyxDQUFDO0lBRXJDLFlBQTZCLFdBQW9CO1FBQ2hELEtBQUssRUFBRSxDQUFDO1FBRG9CLGdCQUFXLEdBQVgsV0FBVyxDQUFTO0lBRWpELENBQUM7SUFFRCxTQUFTLENBQUMsSUFBb0M7UUFDN0MsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUNwQjtZQUNDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztZQUNqQixHQUFHLEVBQUksSUFBSSxDQUFDLEdBQUc7WUFDZixJQUFJLEVBQUcsbUJBQW1CLENBQUMsYUFBYTtTQUN4QyxFQUNELG1CQUFtQixDQUFDLGdCQUFnQixDQUNwQyxDQUFDO0lBQ0gsQ0FBQztJQUVELFlBQVksQ0FBQyxJQUFzQjtRQUNsQyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQ3BCO1lBQ0MsSUFBSSxFQUFFLG1CQUFtQixDQUFDLGdCQUFnQjtZQUMxQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7U0FDZixFQUNELG1CQUFtQixDQUFDLFdBQVcsQ0FDL0IsQ0FBQztJQUNILENBQUM7SUFFRCxPQUFPLENBQUMsSUFBcUM7UUFDNUMsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFNO1lBQzFCLElBQUksRUFBRyxJQUFJLENBQUMsSUFBSTtZQUNoQixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsSUFBSSxFQUFHLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLENBQUM7U0FDOUMsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVELGlCQUFpQixDQUNoQixPQUVtRDtRQUVuRCxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsbUJBQW1CLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFFRCxjQUFjLENBQ2IsT0FBNkM7UUFFN0MsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLG1CQUFtQixDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRU8sU0FBUyxDQUFJLElBQWUsRUFBRSxRQUFpQjtRQUN0RCxNQUFNLENBQUMsR0FBSyxJQUFJLEVBQ2IsR0FBRyxHQUFHLENBQUMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxvQ0FBb0MsQ0FBQyxFQUNqRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsT0FBTyxDQUFrQixHQUFHLEVBQUU7WUFDcEQsTUFBTSxFQUFFLE1BQU07WUFDZCxJQUFJLEVBQUksSUFBSTtTQUNaLENBQUMsQ0FBQztRQUVOLE9BQU8sR0FBRzthQUNSLFVBQVUsQ0FBQyxTQUFTLGVBQWUsQ0FBQyxRQUFRO1lBQzVDLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2QsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2FBQzFEO1FBQ0YsQ0FBQyxDQUFDO2FBQ0QsTUFBTSxDQUFDLFNBQVMsV0FBVyxDQUFDLEdBQUc7WUFDL0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ25ELENBQUMsQ0FBQzthQUNELElBQUksRUFBRSxDQUFDO0lBQ1YsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBPV2ViQXBwIGZyb20gJy4uL09XZWJBcHAnO1xuaW1wb3J0IE9XZWJFdmVudCBmcm9tICcuLi9PV2ViRXZlbnQnO1xuaW1wb3J0IHtpZH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHtPTmV0RXJyb3IsIE9OZXRSZXNwb25zZX0gZnJvbSAnLi4vT1dlYk5ldCc7XG5pbXBvcnQge09BcGlSZXNwb25zZX0gZnJvbSAnLi4vb3pvbmUnO1xuaW1wb3J0IHtPRm9ybURhdGF9IGZyb20gJy4uL09XZWJGb3JtVmFsaWRhdG9yJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT1dlYkFjY291bnRSZWNvdmVyeTxTdGFydCwgVmFsaWRhdGUsIEVuZD4gZXh0ZW5kcyBPV2ViRXZlbnQge1xuXHRzdGF0aWMgcmVhZG9ubHkgU0VMRiAgICAgICAgICAgICAgICAgICA9IGlkKCk7XG5cdHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEVWVF9BUl9TVUNDRVNTID0gaWQoKTtcblx0cHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgRVZUX0FSX0ZBSUwgICAgPSBpZCgpO1xuXG5cdHN0YXRpYyByZWFkb25seSBBUl9TVEVQX1NUQVJUICAgID0gMTtcblx0c3RhdGljIHJlYWRvbmx5IEFSX1NURVBfVkFMSURBVEUgPSAyO1xuXHRzdGF0aWMgcmVhZG9ubHkgQVJfU1RFUF9FTkQgICAgICA9IDM7XG5cblx0Y29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBfYXBwQ29udGV4dDogT1dlYkFwcCkge1xuXHRcdHN1cGVyKCk7XG5cdH1cblxuXHRzdGVwU3RhcnQoZGF0YTogeyBwaG9uZTogc3RyaW5nOyBjYzI6IHN0cmluZyB9KTogUHJvbWlzZTxPTmV0UmVzcG9uc2U8T0FwaVJlc3BvbnNlPFN0YXJ0Pj4+IHtcblx0XHRyZXR1cm4gdGhpcy5fc2VuZEZvcm08U3RhcnQ+KFxuXHRcdFx0e1xuXHRcdFx0XHRwaG9uZTogZGF0YS5waG9uZSxcblx0XHRcdFx0Y2MyICA6IGRhdGEuY2MyLFxuXHRcdFx0XHRzdGVwIDogT1dlYkFjY291bnRSZWNvdmVyeS5BUl9TVEVQX1NUQVJULFxuXHRcdFx0fSxcblx0XHRcdE9XZWJBY2NvdW50UmVjb3ZlcnkuQVJfU1RFUF9WQUxJREFURVxuXHRcdCk7XG5cdH1cblxuXHRzdGVwVmFsaWRhdGUoZGF0YTogeyBjb2RlOiBzdHJpbmcgfSk6IFByb21pc2U8T05ldFJlc3BvbnNlPE9BcGlSZXNwb25zZTxWYWxpZGF0ZT4+PiB7XG5cdFx0cmV0dXJuIHRoaXMuX3NlbmRGb3JtPFZhbGlkYXRlPihcblx0XHRcdHtcblx0XHRcdFx0c3RlcDogT1dlYkFjY291bnRSZWNvdmVyeS5BUl9TVEVQX1ZBTElEQVRFLFxuXHRcdFx0XHRjb2RlOiBkYXRhLmNvZGUsXG5cdFx0XHR9LFxuXHRcdFx0T1dlYkFjY291bnRSZWNvdmVyeS5BUl9TVEVQX0VORFxuXHRcdCk7XG5cdH1cblxuXHRzdGVwRW5kKGRhdGE6IHsgcGFzczogc3RyaW5nOyB2cGFzczogc3RyaW5nIH0pOiBQcm9taXNlPE9OZXRSZXNwb25zZTxPQXBpUmVzcG9uc2U8RW5kPj4+IHtcblx0XHRyZXR1cm4gdGhpcy5fc2VuZEZvcm08RW5kPih7XG5cdFx0XHRwYXNzIDogZGF0YS5wYXNzLFxuXHRcdFx0dnBhc3M6IGRhdGEudnBhc3MsXG5cdFx0XHRzdGVwIDogU3RyaW5nKE9XZWJBY2NvdW50UmVjb3ZlcnkuQVJfU1RFUF9FTkQpLFxuXHRcdH0pO1xuXHR9XG5cblx0b25SZWNvdmVyeVN1Y2Nlc3MoXG5cdFx0aGFuZGxlcjogKFxuXHRcdFx0dGhpczogdGhpcyxcblx0XHRcdHJlc3BvbnNlOiBPTmV0UmVzcG9uc2U8T0FwaVJlc3BvbnNlPEVuZD4+KSA9PiB2b2lkXG5cdCk6IHRoaXMge1xuXHRcdHJldHVybiB0aGlzLm9uKE9XZWJBY2NvdW50UmVjb3ZlcnkuRVZUX0FSX1NVQ0NFU1MsIGhhbmRsZXIpO1xuXHR9XG5cblx0b25SZWNvdmVyeUZhaWwoXG5cdFx0aGFuZGxlcjogKHRoaXM6IHRoaXMsIGVycjogT05ldEVycm9yKSA9PiB2b2lkXG5cdCk6IHRoaXMge1xuXHRcdHJldHVybiB0aGlzLm9uKE9XZWJBY2NvdW50UmVjb3ZlcnkuRVZUX0FSX0ZBSUwsIGhhbmRsZXIpO1xuXHR9XG5cblx0cHJpdmF0ZSBfc2VuZEZvcm08Uj4oZGF0YTogT0Zvcm1EYXRhLCBuZXh0U3RlcD86IG51bWJlcikge1xuXHRcdGNvbnN0IG0gICA9IHRoaXMsXG5cdFx0XHQgIHVybCA9IG0uX2FwcENvbnRleHQudXJsLmdldCgnT1pfU0VSVkVSX0FDQ09VTlRfUkVDT1ZFUllfU0VSVklDRScpLFxuXHRcdFx0ICBuZXQgPSBtLl9hcHBDb250ZXh0Lm96LnJlcXVlc3Q8T0FwaVJlc3BvbnNlPFI+Pih1cmwsIHtcblx0XHRcdFx0ICBtZXRob2Q6ICdQT1NUJyxcblx0XHRcdFx0ICBib2R5ICA6IGRhdGEsXG5cdFx0XHQgIH0pO1xuXG5cdFx0cmV0dXJuIG5ldFxuXHRcdFx0Lm9uR29vZE5ld3MoZnVuY3Rpb24gZ29vZE5ld3NIYW5kbGVyKHJlc3BvbnNlKSB7XG5cdFx0XHRcdGlmICghbmV4dFN0ZXApIHtcblx0XHRcdFx0XHRtLnRyaWdnZXIoT1dlYkFjY291bnRSZWNvdmVyeS5FVlRfQVJfU1VDQ0VTUywgW3Jlc3BvbnNlXSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cdFx0XHQub25GYWlsKGZ1bmN0aW9uIGZhaWxIYW5kbGVyKGVycikge1xuXHRcdFx0XHRtLnRyaWdnZXIoT1dlYkFjY291bnRSZWNvdmVyeS5FVlRfQVJfRkFJTCwgW2Vycl0pO1xuXHRcdFx0fSlcblx0XHRcdC5zZW5kKCk7XG5cdH1cbn1cbiJdfQ==