import OWebEvent from '../OWebEvent';
import { id } from '../utils/Utils';
export default class OWebAccountRecovery extends OWebEvent {
    constructor(appContext) {
        super();
        this.appContext = appContext;
    }
    stepStart(form) {
        const ofv = this.appContext.getFormValidator(form, ['phone']);
        let formData;
        if (ofv.validate()) {
            formData = ofv.getFormData(['phone', 'cc2']);
            formData.set('step', String(OWebAccountRecovery.AR_STEP_START));
            this._sendForm(form, formData, OWebAccountRecovery.AR_STEP_VALIDATE);
        }
    }
    stepValidate(form) {
        const ofv = this.appContext.getFormValidator(form, ['code']);
        if (ofv.validate()) {
            this._sendForm(form, {
                step: OWebAccountRecovery.AR_STEP_VALIDATE,
                code: ofv.getField('code'),
            }, OWebAccountRecovery.AR_STEP_END);
        }
    }
    stepEnd(form) {
        const required = ['pass', 'vpass'], ofv = this.appContext.getFormValidator(form, required);
        let formData;
        if (ofv.validate()) {
            formData = ofv.getFormData(required);
            formData.set('step', String(OWebAccountRecovery.AR_STEP_END));
            this._sendForm(form, formData);
        }
    }
    onError(handler) {
        return this.on(OWebAccountRecovery.EVT_AR_ERROR, handler);
    }
    onNextStep(handler) {
        return this.on(OWebAccountRecovery.EVT_AR_NEXT_STEP, handler);
    }
    onSuccess(handler) {
        return this.on(OWebAccountRecovery.EVT_AR_SUCCESS, handler);
    }
    _sendForm(form, data, nextStep) {
        const m = this, url = m.appContext.url.get('OZ_SERVER_ACCOUNT_RECOVERY_SERVICE');
        m.appContext.request('POST', url, data, function (response) {
            if (nextStep) {
                m.trigger(OWebAccountRecovery.EVT_AR_NEXT_STEP, [
                    response,
                    nextStep,
                ]);
            }
            else {
                m.trigger(OWebAccountRecovery.EVT_AR_SUCCESS, [response]);
            }
        }, function (response) {
            m.trigger(OWebAccountRecovery.EVT_AR_ERROR, [response]);
        }, true);
    }
}
OWebAccountRecovery.SELF = id();
OWebAccountRecovery.EVT_AR_NEXT_STEP = id();
OWebAccountRecovery.EVT_AR_SUCCESS = id();
OWebAccountRecovery.EVT_AR_ERROR = id();
OWebAccountRecovery.AR_STEP_START = 1;
OWebAccountRecovery.AR_STEP_VALIDATE = 2;
OWebAccountRecovery.AR_STEP_END = 3;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYkFjY291bnRSZWNvdmVyeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wbHVnaW5zL09XZWJBY2NvdW50UmVjb3ZlcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxTQUFTLE1BQU0sY0FBYyxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVwQyxNQUFNLENBQUMsT0FBTyxPQUFPLG1CQUFvQixTQUFRLFNBQVM7SUFVekQsWUFBNkIsVUFBbUI7UUFDL0MsS0FBSyxFQUFFLENBQUM7UUFEb0IsZUFBVSxHQUFWLFVBQVUsQ0FBUztJQUVoRCxDQUFDO0lBRUQsU0FBUyxDQUFDLElBQXFCO1FBQzlCLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUM5RCxJQUFJLFFBQVEsQ0FBQztRQUViLElBQUksR0FBRyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ25CLFFBQVEsR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7WUFDN0MsUUFBUSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUM7WUFDaEUsSUFBSSxDQUFDLFNBQVMsQ0FDYixJQUFJLEVBQ0osUUFBUSxFQUNSLG1CQUFtQixDQUFDLGdCQUFnQixDQUNwQyxDQUFDO1NBQ0Y7SUFDRixDQUFDO0lBRUQsWUFBWSxDQUFDLElBQXFCO1FBQ2pDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUU3RCxJQUFJLEdBQUcsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUNuQixJQUFJLENBQUMsU0FBUyxDQUNiLElBQUksRUFDSjtnQkFDQyxJQUFJLEVBQUUsbUJBQW1CLENBQUMsZ0JBQWdCO2dCQUMxQyxJQUFJLEVBQUUsR0FBRyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7YUFDMUIsRUFDRCxtQkFBbUIsQ0FBQyxXQUFXLENBQy9CLENBQUM7U0FDRjtJQUNGLENBQUM7SUFFRCxPQUFPLENBQUMsSUFBcUI7UUFDNUIsTUFBTSxRQUFRLEdBQUcsQ0FBQyxNQUFNLEVBQUUsT0FBTyxDQUFDLEVBQ2pDLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztRQUN4RCxJQUFJLFFBQVEsQ0FBQztRQUViLElBQUksR0FBRyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ25CLFFBQVEsR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3JDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDO1lBRTlELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQy9CO0lBQ0YsQ0FBQztJQUVELE9BQU8sQ0FBQyxPQUF5QztRQUNoRCxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsbUJBQW1CLENBQUMsWUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRCxVQUFVLENBQUMsT0FBdUQ7UUFDakUsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLG1CQUFtQixDQUFDLGdCQUFnQixFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQy9ELENBQUM7SUFFRCxTQUFTLENBQUMsT0FBeUM7UUFDbEQsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLG1CQUFtQixDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM3RCxDQUFDO0lBRUQsU0FBUyxDQUFDLElBQXFCLEVBQUUsSUFBUyxFQUFFLFFBQWlCO1FBQzVELE1BQU0sQ0FBQyxHQUFHLElBQUksRUFDYixHQUFHLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7UUFFbEUsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQ25CLE1BQU0sRUFDTixHQUFHLEVBQ0gsSUFBSSxFQUNKLFVBQVUsUUFBYTtZQUN0QixJQUFJLFFBQVEsRUFBRTtnQkFDYixDQUFDLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLGdCQUFnQixFQUFFO29CQUMvQyxRQUFRO29CQUNSLFFBQVE7aUJBQ1IsQ0FBQyxDQUFDO2FBQ0g7aUJBQU07Z0JBQ04sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2FBQzFEO1FBQ0YsQ0FBQyxFQUNELFVBQVUsUUFBYTtZQUN0QixDQUFDLENBQUMsT0FBTyxDQUFDLG1CQUFtQixDQUFDLFlBQVksRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDekQsQ0FBQyxFQUNELElBQUksQ0FDSixDQUFDO0lBQ0gsQ0FBQzs7QUEzRmUsd0JBQUksR0FBRyxFQUFFLEVBQUUsQ0FBQztBQUNaLG9DQUFnQixHQUFHLEVBQUUsRUFBRSxDQUFDO0FBQ3hCLGtDQUFjLEdBQUcsRUFBRSxFQUFFLENBQUM7QUFDdEIsZ0NBQVksR0FBRyxFQUFFLEVBQUUsQ0FBQztBQUVwQixpQ0FBYSxHQUFHLENBQUMsQ0FBQztBQUNsQixvQ0FBZ0IsR0FBRyxDQUFDLENBQUM7QUFDckIsK0JBQVcsR0FBRyxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgT1dlYkFwcCBmcm9tICcuLi9PV2ViQXBwJztcclxuaW1wb3J0IHsgSUNvbVJlc3BvbnNlIH0gZnJvbSAnLi4vT1dlYkNvbSc7XHJcbmltcG9ydCBPV2ViRXZlbnQgZnJvbSAnLi4vT1dlYkV2ZW50JztcclxuaW1wb3J0IHsgaWQgfSBmcm9tICcuLi91dGlscy9VdGlscyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPV2ViQWNjb3VudFJlY292ZXJ5IGV4dGVuZHMgT1dlYkV2ZW50IHtcclxuXHRzdGF0aWMgcmVhZG9ubHkgU0VMRiA9IGlkKCk7XHJcblx0c3RhdGljIHJlYWRvbmx5IEVWVF9BUl9ORVhUX1NURVAgPSBpZCgpO1xyXG5cdHN0YXRpYyByZWFkb25seSBFVlRfQVJfU1VDQ0VTUyA9IGlkKCk7XHJcblx0c3RhdGljIHJlYWRvbmx5IEVWVF9BUl9FUlJPUiA9IGlkKCk7XHJcblxyXG5cdHN0YXRpYyByZWFkb25seSBBUl9TVEVQX1NUQVJUID0gMTtcclxuXHRzdGF0aWMgcmVhZG9ubHkgQVJfU1RFUF9WQUxJREFURSA9IDI7XHJcblx0c3RhdGljIHJlYWRvbmx5IEFSX1NURVBfRU5EID0gMztcclxuXHJcblx0Y29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBhcHBDb250ZXh0OiBPV2ViQXBwKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdH1cclxuXHJcblx0c3RlcFN0YXJ0KGZvcm06IEhUTUxGb3JtRWxlbWVudCkge1xyXG5cdFx0Y29uc3Qgb2Z2ID0gdGhpcy5hcHBDb250ZXh0LmdldEZvcm1WYWxpZGF0b3IoZm9ybSwgWydwaG9uZSddKTtcclxuXHRcdGxldCBmb3JtRGF0YTtcclxuXHJcblx0XHRpZiAob2Z2LnZhbGlkYXRlKCkpIHtcclxuXHRcdFx0Zm9ybURhdGEgPSBvZnYuZ2V0Rm9ybURhdGEoWydwaG9uZScsICdjYzInXSk7XHJcblx0XHRcdGZvcm1EYXRhLnNldCgnc3RlcCcsIFN0cmluZyhPV2ViQWNjb3VudFJlY292ZXJ5LkFSX1NURVBfU1RBUlQpKTtcclxuXHRcdFx0dGhpcy5fc2VuZEZvcm0oXHJcblx0XHRcdFx0Zm9ybSxcclxuXHRcdFx0XHRmb3JtRGF0YSxcclxuXHRcdFx0XHRPV2ViQWNjb3VudFJlY292ZXJ5LkFSX1NURVBfVkFMSURBVEUsXHJcblx0XHRcdCk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRzdGVwVmFsaWRhdGUoZm9ybTogSFRNTEZvcm1FbGVtZW50KSB7XHJcblx0XHRjb25zdCBvZnYgPSB0aGlzLmFwcENvbnRleHQuZ2V0Rm9ybVZhbGlkYXRvcihmb3JtLCBbJ2NvZGUnXSk7XHJcblxyXG5cdFx0aWYgKG9mdi52YWxpZGF0ZSgpKSB7XHJcblx0XHRcdHRoaXMuX3NlbmRGb3JtKFxyXG5cdFx0XHRcdGZvcm0sXHJcblx0XHRcdFx0e1xyXG5cdFx0XHRcdFx0c3RlcDogT1dlYkFjY291bnRSZWNvdmVyeS5BUl9TVEVQX1ZBTElEQVRFLFxyXG5cdFx0XHRcdFx0Y29kZTogb2Z2LmdldEZpZWxkKCdjb2RlJyksXHJcblx0XHRcdFx0fSxcclxuXHRcdFx0XHRPV2ViQWNjb3VudFJlY292ZXJ5LkFSX1NURVBfRU5ELFxyXG5cdFx0XHQpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0c3RlcEVuZChmb3JtOiBIVE1MRm9ybUVsZW1lbnQpIHtcclxuXHRcdGNvbnN0IHJlcXVpcmVkID0gWydwYXNzJywgJ3ZwYXNzJ10sXHJcblx0XHRcdG9mdiA9IHRoaXMuYXBwQ29udGV4dC5nZXRGb3JtVmFsaWRhdG9yKGZvcm0sIHJlcXVpcmVkKTtcclxuXHRcdGxldCBmb3JtRGF0YTtcclxuXHJcblx0XHRpZiAob2Z2LnZhbGlkYXRlKCkpIHtcclxuXHRcdFx0Zm9ybURhdGEgPSBvZnYuZ2V0Rm9ybURhdGEocmVxdWlyZWQpO1xyXG5cdFx0XHRmb3JtRGF0YS5zZXQoJ3N0ZXAnLCBTdHJpbmcoT1dlYkFjY291bnRSZWNvdmVyeS5BUl9TVEVQX0VORCkpO1xyXG5cclxuXHRcdFx0dGhpcy5fc2VuZEZvcm0oZm9ybSwgZm9ybURhdGEpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0b25FcnJvcihoYW5kbGVyOiAocmVzcG9uc2U6IElDb21SZXNwb25zZSkgPT4gdm9pZCk6IHRoaXMge1xyXG5cdFx0cmV0dXJuIHRoaXMub24oT1dlYkFjY291bnRSZWNvdmVyeS5FVlRfQVJfRVJST1IsIGhhbmRsZXIpO1xyXG5cdH1cclxuXHJcblx0b25OZXh0U3RlcChoYW5kbGVyOiAocmVzcG9uc2U6IElDb21SZXNwb25zZSwgc3RlcDogbnVtYmVyKSA9PiB2b2lkKTogdGhpcyB7XHJcblx0XHRyZXR1cm4gdGhpcy5vbihPV2ViQWNjb3VudFJlY292ZXJ5LkVWVF9BUl9ORVhUX1NURVAsIGhhbmRsZXIpO1xyXG5cdH1cclxuXHJcblx0b25TdWNjZXNzKGhhbmRsZXI6IChyZXNwb25zZTogSUNvbVJlc3BvbnNlKSA9PiB2b2lkKTogdGhpcyB7XHJcblx0XHRyZXR1cm4gdGhpcy5vbihPV2ViQWNjb3VudFJlY292ZXJ5LkVWVF9BUl9TVUNDRVNTLCBoYW5kbGVyKTtcclxuXHR9XHJcblxyXG5cdF9zZW5kRm9ybShmb3JtOiBIVE1MRm9ybUVsZW1lbnQsIGRhdGE6IGFueSwgbmV4dFN0ZXA/OiBudW1iZXIpIHtcclxuXHRcdGNvbnN0IG0gPSB0aGlzLFxyXG5cdFx0XHR1cmwgPSBtLmFwcENvbnRleHQudXJsLmdldCgnT1pfU0VSVkVSX0FDQ09VTlRfUkVDT1ZFUllfU0VSVklDRScpO1xyXG5cclxuXHRcdG0uYXBwQ29udGV4dC5yZXF1ZXN0KFxyXG5cdFx0XHQnUE9TVCcsXHJcblx0XHRcdHVybCxcclxuXHRcdFx0ZGF0YSxcclxuXHRcdFx0ZnVuY3Rpb24gKHJlc3BvbnNlOiBhbnkpIHtcclxuXHRcdFx0XHRpZiAobmV4dFN0ZXApIHtcclxuXHRcdFx0XHRcdG0udHJpZ2dlcihPV2ViQWNjb3VudFJlY292ZXJ5LkVWVF9BUl9ORVhUX1NURVAsIFtcclxuXHRcdFx0XHRcdFx0cmVzcG9uc2UsXHJcblx0XHRcdFx0XHRcdG5leHRTdGVwLFxyXG5cdFx0XHRcdFx0XSk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdG0udHJpZ2dlcihPV2ViQWNjb3VudFJlY292ZXJ5LkVWVF9BUl9TVUNDRVNTLCBbcmVzcG9uc2VdKTtcclxuXHRcdFx0XHR9XHJcblx0XHRcdH0sXHJcblx0XHRcdGZ1bmN0aW9uIChyZXNwb25zZTogYW55KSB7XHJcblx0XHRcdFx0bS50cmlnZ2VyKE9XZWJBY2NvdW50UmVjb3ZlcnkuRVZUX0FSX0VSUk9SLCBbcmVzcG9uc2VdKTtcclxuXHRcdFx0fSxcclxuXHRcdFx0dHJ1ZSxcclxuXHRcdCk7XHJcblx0fVxyXG59XHJcbiJdfQ==