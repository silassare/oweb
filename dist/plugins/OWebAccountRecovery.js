import OWebEvent from '../OWebEvent';
import { id } from '../utils';
export default class OWebAccountRecovery extends OWebEvent {
    _appContext;
    static SELF = id();
    static EVT_AR_SUCCESS = id();
    static EVT_AR_FAIL = id();
    static AR_STEP_START = 1;
    static AR_STEP_VALIDATE = 2;
    static AR_STEP_END = 3;
    constructor(_appContext) {
        super();
        this._appContext = _appContext;
    }
    stepStart(data) {
        return this._sendForm({
            phone: data.phone,
            cc2: data.cc2,
            step: OWebAccountRecovery.AR_STEP_START,
        }, OWebAccountRecovery.AR_STEP_VALIDATE);
    }
    stepValidate(data) {
        return this._sendForm({
            step: OWebAccountRecovery.AR_STEP_VALIDATE,
            code: data.code,
        }, OWebAccountRecovery.AR_STEP_END);
    }
    stepEnd(data) {
        return this._sendForm({
            pass: data.pass,
            vpass: data.vpass,
            step: String(OWebAccountRecovery.AR_STEP_END),
        });
    }
    onRecoverySuccess(handler) {
        return this.on(OWebAccountRecovery.EVT_AR_SUCCESS, handler);
    }
    onRecoveryFail(handler) {
        return this.on(OWebAccountRecovery.EVT_AR_FAIL, handler);
    }
    _sendForm(data, nextStep) {
        const m = this, url = m._appContext.url.get('OZ_SERVER_ACCOUNT_RECOVERY_SERVICE'), net = m._appContext.oz.request(url, {
            method: 'POST',
            body: data,
        });
        return net
            .onGoodNews(function goodNewsHandler(response) {
            if (!nextStep) {
                m.trigger(OWebAccountRecovery.EVT_AR_SUCCESS, [response]);
            }
        })
            .onFail(function failHandler(err) {
            m.trigger(OWebAccountRecovery.EVT_AR_FAIL, [err]);
        })
            .send();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYkFjY291bnRSZWNvdmVyeS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wbHVnaW5zL09XZWJBY2NvdW50UmVjb3ZlcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxTQUFTLE1BQU0sY0FBYyxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFLOUIsTUFBTSxDQUFDLE9BQU8sT0FBTyxtQkFJbkIsU0FBUSxTQUFTO0lBU1c7SUFSN0IsTUFBTSxDQUFVLElBQUksR0FBRyxFQUFFLEVBQUUsQ0FBQztJQUNwQixNQUFNLENBQVUsY0FBYyxHQUFHLEVBQUUsRUFBRSxDQUFDO0lBQ3RDLE1BQU0sQ0FBVSxXQUFXLEdBQUcsRUFBRSxFQUFFLENBQUM7SUFFM0MsTUFBTSxDQUFVLGFBQWEsR0FBRyxDQUFDLENBQUM7SUFDbEMsTUFBTSxDQUFVLGdCQUFnQixHQUFHLENBQUMsQ0FBQztJQUNyQyxNQUFNLENBQVUsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUVoQyxZQUE2QixXQUFvQjtRQUNoRCxLQUFLLEVBQUUsQ0FBQztRQURvQixnQkFBVyxHQUFYLFdBQVcsQ0FBUztJQUVqRCxDQUFDO0lBRUQsU0FBUyxDQUFDLElBR1Q7UUFDQSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQ3BCO1lBQ0MsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ2pCLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRztZQUNiLElBQUksRUFBRSxtQkFBbUIsQ0FBQyxhQUFhO1NBQ3ZDLEVBQ0QsbUJBQW1CLENBQUMsZ0JBQWdCLENBQ3BDLENBQUM7SUFDSCxDQUFDO0lBRUQsWUFBWSxDQUFDLElBRVo7UUFDQSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQ3BCO1lBQ0MsSUFBSSxFQUFFLG1CQUFtQixDQUFDLGdCQUFnQjtZQUMxQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7U0FDZixFQUNELG1CQUFtQixDQUFDLFdBQVcsQ0FDL0IsQ0FBQztJQUNILENBQUM7SUFFRCxPQUFPLENBQUMsSUFHUDtRQUNBLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBTTtZQUMxQixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLENBQUM7U0FDN0MsQ0FBQyxDQUFDO0lBQ0osQ0FBQztJQUVELGlCQUFpQixDQUNoQixPQUF3RTtRQUV4RSxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsbUJBQW1CLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFFRCxjQUFjLENBQUMsT0FBNkM7UUFDM0QsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLG1CQUFtQixDQUFDLFdBQVcsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMxRCxDQUFDO0lBRU8sU0FBUyxDQUFJLElBQWtCLEVBQUUsUUFBaUI7UUFDekQsTUFBTSxDQUFDLEdBQUcsSUFBSSxFQUNiLEdBQUcsR0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsb0NBQW9DLENBQUMsRUFDakUsR0FBRyxHQUFHLENBQUMsQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBa0IsR0FBRyxFQUFFO1lBQ3BELE1BQU0sRUFBRSxNQUFNO1lBQ2QsSUFBSSxFQUFFLElBQUk7U0FDVixDQUFDLENBQUM7UUFFSixPQUFPLEdBQUc7YUFDUixVQUFVLENBQUMsU0FBUyxlQUFlLENBQUMsUUFBUTtZQUM1QyxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNkLENBQUMsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsY0FBYyxFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQzthQUMxRDtRQUNGLENBQUMsQ0FBQzthQUNELE1BQU0sQ0FBQyxTQUFTLFdBQVcsQ0FBQyxHQUFHO1lBQy9CLENBQUMsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsV0FBVyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUNuRCxDQUFDLENBQUM7YUFDRCxJQUFJLEVBQUUsQ0FBQztJQUNWLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgT1dlYkFwcCBmcm9tICcuLi9PV2ViQXBwJztcbmltcG9ydCBPV2ViRXZlbnQgZnJvbSAnLi4vT1dlYkV2ZW50JztcbmltcG9ydCB7IGlkIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgT05ldEVycm9yLCBPTmV0UmVzcG9uc2UgfSBmcm9tICcuLi9PV2ViTmV0JztcbmltcG9ydCB7IE9BcGlSZXNwb25zZSB9IGZyb20gJy4uL296b25lJztcbmltcG9ydCB7IE9XZWJGb3JtRGF0YSB9IGZyb20gJy4uL09XZWJGb3JtJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT1dlYkFjY291bnRSZWNvdmVyeTxcblx0U3RhcnQsXG5cdFZhbGlkYXRlLFxuXHRFbmRcbj4gZXh0ZW5kcyBPV2ViRXZlbnQge1xuXHRzdGF0aWMgcmVhZG9ubHkgU0VMRiA9IGlkKCk7XG5cdHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEVWVF9BUl9TVUNDRVNTID0gaWQoKTtcblx0cHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgRVZUX0FSX0ZBSUwgPSBpZCgpO1xuXG5cdHN0YXRpYyByZWFkb25seSBBUl9TVEVQX1NUQVJUID0gMTtcblx0c3RhdGljIHJlYWRvbmx5IEFSX1NURVBfVkFMSURBVEUgPSAyO1xuXHRzdGF0aWMgcmVhZG9ubHkgQVJfU1RFUF9FTkQgPSAzO1xuXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgX2FwcENvbnRleHQ6IE9XZWJBcHApIHtcblx0XHRzdXBlcigpO1xuXHR9XG5cblx0c3RlcFN0YXJ0KGRhdGE6IHtcblx0XHRwaG9uZTogc3RyaW5nO1xuXHRcdGNjMjogc3RyaW5nO1xuXHR9KTogUHJvbWlzZTxPTmV0UmVzcG9uc2U8T0FwaVJlc3BvbnNlPFN0YXJ0Pj4+IHtcblx0XHRyZXR1cm4gdGhpcy5fc2VuZEZvcm08U3RhcnQ+KFxuXHRcdFx0e1xuXHRcdFx0XHRwaG9uZTogZGF0YS5waG9uZSxcblx0XHRcdFx0Y2MyOiBkYXRhLmNjMixcblx0XHRcdFx0c3RlcDogT1dlYkFjY291bnRSZWNvdmVyeS5BUl9TVEVQX1NUQVJULFxuXHRcdFx0fSxcblx0XHRcdE9XZWJBY2NvdW50UmVjb3ZlcnkuQVJfU1RFUF9WQUxJREFURVxuXHRcdCk7XG5cdH1cblxuXHRzdGVwVmFsaWRhdGUoZGF0YToge1xuXHRcdGNvZGU6IHN0cmluZztcblx0fSk6IFByb21pc2U8T05ldFJlc3BvbnNlPE9BcGlSZXNwb25zZTxWYWxpZGF0ZT4+PiB7XG5cdFx0cmV0dXJuIHRoaXMuX3NlbmRGb3JtPFZhbGlkYXRlPihcblx0XHRcdHtcblx0XHRcdFx0c3RlcDogT1dlYkFjY291bnRSZWNvdmVyeS5BUl9TVEVQX1ZBTElEQVRFLFxuXHRcdFx0XHRjb2RlOiBkYXRhLmNvZGUsXG5cdFx0XHR9LFxuXHRcdFx0T1dlYkFjY291bnRSZWNvdmVyeS5BUl9TVEVQX0VORFxuXHRcdCk7XG5cdH1cblxuXHRzdGVwRW5kKGRhdGE6IHtcblx0XHRwYXNzOiBzdHJpbmc7XG5cdFx0dnBhc3M6IHN0cmluZztcblx0fSk6IFByb21pc2U8T05ldFJlc3BvbnNlPE9BcGlSZXNwb25zZTxFbmQ+Pj4ge1xuXHRcdHJldHVybiB0aGlzLl9zZW5kRm9ybTxFbmQ+KHtcblx0XHRcdHBhc3M6IGRhdGEucGFzcyxcblx0XHRcdHZwYXNzOiBkYXRhLnZwYXNzLFxuXHRcdFx0c3RlcDogU3RyaW5nKE9XZWJBY2NvdW50UmVjb3ZlcnkuQVJfU1RFUF9FTkQpLFxuXHRcdH0pO1xuXHR9XG5cblx0b25SZWNvdmVyeVN1Y2Nlc3MoXG5cdFx0aGFuZGxlcjogKHRoaXM6IHRoaXMsIHJlc3BvbnNlOiBPTmV0UmVzcG9uc2U8T0FwaVJlc3BvbnNlPEVuZD4+KSA9PiB2b2lkXG5cdCk6IHRoaXMge1xuXHRcdHJldHVybiB0aGlzLm9uKE9XZWJBY2NvdW50UmVjb3ZlcnkuRVZUX0FSX1NVQ0NFU1MsIGhhbmRsZXIpO1xuXHR9XG5cblx0b25SZWNvdmVyeUZhaWwoaGFuZGxlcjogKHRoaXM6IHRoaXMsIGVycjogT05ldEVycm9yKSA9PiB2b2lkKTogdGhpcyB7XG5cdFx0cmV0dXJuIHRoaXMub24oT1dlYkFjY291bnRSZWNvdmVyeS5FVlRfQVJfRkFJTCwgaGFuZGxlcik7XG5cdH1cblxuXHRwcml2YXRlIF9zZW5kRm9ybTxSPihkYXRhOiBPV2ViRm9ybURhdGEsIG5leHRTdGVwPzogbnVtYmVyKSB7XG5cdFx0Y29uc3QgbSA9IHRoaXMsXG5cdFx0XHR1cmwgPSBtLl9hcHBDb250ZXh0LnVybC5nZXQoJ09aX1NFUlZFUl9BQ0NPVU5UX1JFQ09WRVJZX1NFUlZJQ0UnKSxcblx0XHRcdG5ldCA9IG0uX2FwcENvbnRleHQub3oucmVxdWVzdDxPQXBpUmVzcG9uc2U8Uj4+KHVybCwge1xuXHRcdFx0XHRtZXRob2Q6ICdQT1NUJyxcblx0XHRcdFx0Ym9keTogZGF0YSxcblx0XHRcdH0pO1xuXG5cdFx0cmV0dXJuIG5ldFxuXHRcdFx0Lm9uR29vZE5ld3MoZnVuY3Rpb24gZ29vZE5ld3NIYW5kbGVyKHJlc3BvbnNlKSB7XG5cdFx0XHRcdGlmICghbmV4dFN0ZXApIHtcblx0XHRcdFx0XHRtLnRyaWdnZXIoT1dlYkFjY291bnRSZWNvdmVyeS5FVlRfQVJfU1VDQ0VTUywgW3Jlc3BvbnNlXSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cdFx0XHQub25GYWlsKGZ1bmN0aW9uIGZhaWxIYW5kbGVyKGVycikge1xuXHRcdFx0XHRtLnRyaWdnZXIoT1dlYkFjY291bnRSZWNvdmVyeS5FVlRfQVJfRkFJTCwgW2Vycl0pO1xuXHRcdFx0fSlcblx0XHRcdC5zZW5kKCk7XG5cdH1cbn1cbiJdfQ==