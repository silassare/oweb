import OWebEvent from '../OWebEvent';
import { id } from '../utils/Utils';
let OWebSignUp = /** @class */ (() => {
    class OWebSignUp extends OWebEvent {
        constructor(appContext) {
            super();
            this.appContext = appContext;
        }
        stepStart(data) {
            return this._sendForm({
                phone: data.phone,
                cc2: data.cc2,
                step: OWebSignUp.SIGN_UP_STEP_START,
            }, OWebSignUp.SIGN_UP_STEP_VALIDATE);
        }
        stepValidate(data) {
            return this._sendForm({
                step: OWebSignUp.SIGN_UP_STEP_VALIDATE,
                code: data.code,
            }, OWebSignUp.SIGN_UP_STEP_END);
        }
        stepEnd(data) {
            return this._sendForm({
                step: OWebSignUp.SIGN_UP_STEP_END,
            });
        }
        onError(handler) {
            return this.on(OWebSignUp.EVT_SIGN_UP_ERROR, handler);
        }
        onNextStep(handler) {
            return this.on(OWebSignUp.EVT_SIGN_UP_NEXT_STEP, handler);
        }
        onSuccess(handler) {
            return this.on(OWebSignUp.EVT_SIGN_UP_SUCCESS, handler);
        }
        _sendForm(data, nextStep) {
            const m = this, url = m.appContext.url.get('OZ_SERVER_SIGNUP_SERVICE'), net = m.appContext.net(url, {
                method: 'POST',
                body: data,
                isGoodNews(response) {
                    return Boolean(response.json && response.json.error === 0);
                },
            });
            return net
                .onGoodNews(function (response) {
                if (nextStep) {
                    m.trigger(OWebSignUp.EVT_SIGN_UP_NEXT_STEP, [
                        response,
                        nextStep,
                    ]);
                }
                else {
                    m.trigger(OWebSignUp.EVT_SIGN_UP_SUCCESS, [response]);
                }
            })
                .onBadNews(function (response) {
                m.trigger(OWebSignUp.EVT_SIGN_UP_ERROR, [response]);
            })
                .send();
        }
    }
    OWebSignUp.SELF = id();
    OWebSignUp.EVT_SIGN_UP_NEXT_STEP = id();
    OWebSignUp.EVT_SIGN_UP_SUCCESS = id();
    OWebSignUp.EVT_SIGN_UP_ERROR = id();
    OWebSignUp.SIGN_UP_STEP_START = 1;
    OWebSignUp.SIGN_UP_STEP_VALIDATE = 2;
    OWebSignUp.SIGN_UP_STEP_END = 3;
    return OWebSignUp;
})();
export default OWebSignUp;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYlNpZ25VcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wbHVnaW5zL09XZWJTaWduVXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxTQUFTLE1BQU0sY0FBYyxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUlwQztJQUFBLE1BQXFCLFVBQVcsU0FBUSxTQUFTO1FBVWhELFlBQTZCLFVBQW1CO1lBQy9DLEtBQUssRUFBRSxDQUFDO1lBRG9CLGVBQVUsR0FBVixVQUFVLENBQVM7UUFFaEQsQ0FBQztRQUVELFNBQVMsQ0FBQyxJQUFvQztZQUM3QyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQ3BCO2dCQUNDLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztnQkFDakIsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHO2dCQUNiLElBQUksRUFBRSxVQUFVLENBQUMsa0JBQWtCO2FBQ25DLEVBQ0QsVUFBVSxDQUFDLHFCQUFxQixDQUNoQyxDQUFDO1FBQ0gsQ0FBQztRQUVELFlBQVksQ0FBQyxJQUFzQjtZQUNsQyxPQUFPLElBQUksQ0FBQyxTQUFTLENBQ3BCO2dCQUNDLElBQUksRUFBRSxVQUFVLENBQUMscUJBQXFCO2dCQUN0QyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7YUFDZixFQUNELFVBQVUsQ0FBQyxnQkFBZ0IsQ0FDM0IsQ0FBQztRQUNILENBQUM7UUFFRCxPQUFPLENBQUMsSUFPUDtZQUNBLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztnQkFDckIsSUFBSSxFQUFFLFVBQVUsQ0FBQyxnQkFBZ0I7YUFDakMsQ0FBQyxDQUFDO1FBQ0osQ0FBQztRQUVELE9BQU8sQ0FDTixPQUE2RDtZQUU3RCxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLGlCQUFpQixFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZELENBQUM7UUFFRCxVQUFVLENBQ1QsT0FHUztZQUVULE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMscUJBQXFCLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDM0QsQ0FBQztRQUVELFNBQVMsQ0FDUixPQUE2RDtZQUU3RCxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLG1CQUFtQixFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3pELENBQUM7UUFFTyxTQUFTLENBQUMsSUFBdUIsRUFBRSxRQUFpQjtZQUMzRCxNQUFNLENBQUMsR0FBRyxJQUFJLEVBQ2IsR0FBRyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQyxFQUN0RCxHQUFHLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQXFCLEdBQUcsRUFBRTtnQkFDL0MsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsSUFBSSxFQUFFLElBQUk7Z0JBQ1YsVUFBVSxDQUFDLFFBQVE7b0JBQ2xCLE9BQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQzVELENBQUM7YUFDRCxDQUFDLENBQUM7WUFFSixPQUFPLEdBQUc7aUJBQ1IsVUFBVSxDQUFDLFVBQVUsUUFBUTtnQkFDN0IsSUFBSSxRQUFRLEVBQUU7b0JBQ2IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMscUJBQXFCLEVBQUU7d0JBQzNDLFFBQVE7d0JBQ1IsUUFBUTtxQkFDUixDQUFDLENBQUM7aUJBQ0g7cUJBQU07b0JBQ04sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO2lCQUN0RDtZQUNGLENBQUMsQ0FBQztpQkFDRCxTQUFTLENBQUMsVUFBVSxRQUFRO2dCQUM1QixDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDckQsQ0FBQyxDQUFDO2lCQUNELElBQUksRUFBRSxDQUFDO1FBQ1YsQ0FBQzs7SUE5RmUsZUFBSSxHQUFHLEVBQUUsRUFBRSxDQUFDO0lBQ1osZ0NBQXFCLEdBQUcsRUFBRSxFQUFFLENBQUM7SUFDN0IsOEJBQW1CLEdBQUcsRUFBRSxFQUFFLENBQUM7SUFDM0IsNEJBQWlCLEdBQUcsRUFBRSxFQUFFLENBQUM7SUFFekIsNkJBQWtCLEdBQUcsQ0FBQyxDQUFDO0lBQ3ZCLGdDQUFxQixHQUFHLENBQUMsQ0FBQztJQUMxQiwyQkFBZ0IsR0FBRyxDQUFDLENBQUM7SUF3RnRDLGlCQUFDO0tBQUE7ZUFoR29CLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgT1dlYkFwcCBmcm9tICcuLi9PV2ViQXBwJztcclxuaW1wb3J0IE9XZWJFdmVudCBmcm9tICcuLi9PV2ViRXZlbnQnO1xyXG5pbXBvcnQgeyBpZCB9IGZyb20gJy4uL3V0aWxzL1V0aWxzJztcclxuaW1wb3J0IHsgSU5ldFJlc3BvbnNlIH0gZnJvbSAnLi4vT1dlYk5ldCc7XHJcbmltcG9ydCB7IElPWm9uZUFwaUpTT04gfSBmcm9tICcuLi9vem9uZSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPV2ViU2lnblVwIGV4dGVuZHMgT1dlYkV2ZW50IHtcclxuXHRzdGF0aWMgcmVhZG9ubHkgU0VMRiA9IGlkKCk7XHJcblx0c3RhdGljIHJlYWRvbmx5IEVWVF9TSUdOX1VQX05FWFRfU1RFUCA9IGlkKCk7XHJcblx0c3RhdGljIHJlYWRvbmx5IEVWVF9TSUdOX1VQX1NVQ0NFU1MgPSBpZCgpO1xyXG5cdHN0YXRpYyByZWFkb25seSBFVlRfU0lHTl9VUF9FUlJPUiA9IGlkKCk7XHJcblxyXG5cdHN0YXRpYyByZWFkb25seSBTSUdOX1VQX1NURVBfU1RBUlQgPSAxO1xyXG5cdHN0YXRpYyByZWFkb25seSBTSUdOX1VQX1NURVBfVkFMSURBVEUgPSAyO1xyXG5cdHN0YXRpYyByZWFkb25seSBTSUdOX1VQX1NURVBfRU5EID0gMztcclxuXHJcblx0Y29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBhcHBDb250ZXh0OiBPV2ViQXBwKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdH1cclxuXHJcblx0c3RlcFN0YXJ0KGRhdGE6IHsgcGhvbmU6IHN0cmluZzsgY2MyOiBzdHJpbmcgfSkge1xyXG5cdFx0cmV0dXJuIHRoaXMuX3NlbmRGb3JtKFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0cGhvbmU6IGRhdGEucGhvbmUsXHJcblx0XHRcdFx0Y2MyOiBkYXRhLmNjMixcclxuXHRcdFx0XHRzdGVwOiBPV2ViU2lnblVwLlNJR05fVVBfU1RFUF9TVEFSVCxcclxuXHRcdFx0fSxcclxuXHRcdFx0T1dlYlNpZ25VcC5TSUdOX1VQX1NURVBfVkFMSURBVEUsXHJcblx0XHQpO1xyXG5cdH1cclxuXHJcblx0c3RlcFZhbGlkYXRlKGRhdGE6IHsgY29kZTogc3RyaW5nIH0pIHtcclxuXHRcdHJldHVybiB0aGlzLl9zZW5kRm9ybShcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHN0ZXA6IE9XZWJTaWduVXAuU0lHTl9VUF9TVEVQX1ZBTElEQVRFLFxyXG5cdFx0XHRcdGNvZGU6IGRhdGEuY29kZSxcclxuXHRcdFx0fSxcclxuXHRcdFx0T1dlYlNpZ25VcC5TSUdOX1VQX1NURVBfRU5ELFxyXG5cdFx0KTtcclxuXHR9XHJcblxyXG5cdHN0ZXBFbmQoZGF0YToge1xyXG5cdFx0dW5hbWU6IHN0cmluZztcclxuXHRcdHBhc3M6IHN0cmluZztcclxuXHRcdHZwYXNzOiBzdHJpbmc7XHJcblx0XHRiaXJ0aF9kYXRlOiBzdHJpbmc7XHJcblx0XHRnZW5kZXI6IHN0cmluZztcclxuXHRcdGVtYWlsPzogc3RyaW5nO1xyXG5cdH0pIHtcclxuXHRcdHJldHVybiB0aGlzLl9zZW5kRm9ybSh7XHJcblx0XHRcdHN0ZXA6IE9XZWJTaWduVXAuU0lHTl9VUF9TVEVQX0VORCxcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0b25FcnJvcihcclxuXHRcdGhhbmRsZXI6IChyZXNwb25zZTogSU5ldFJlc3BvbnNlPElPWm9uZUFwaUpTT048YW55Pj4pID0+IHZvaWQsXHJcblx0KTogdGhpcyB7XHJcblx0XHRyZXR1cm4gdGhpcy5vbihPV2ViU2lnblVwLkVWVF9TSUdOX1VQX0VSUk9SLCBoYW5kbGVyKTtcclxuXHR9XHJcblxyXG5cdG9uTmV4dFN0ZXAoXHJcblx0XHRoYW5kbGVyOiAoXHJcblx0XHRcdHJlc3BvbnNlOiBJTmV0UmVzcG9uc2U8SU9ab25lQXBpSlNPTjxhbnk+PixcclxuXHRcdFx0c3RlcDogbnVtYmVyLFxyXG5cdFx0KSA9PiB2b2lkLFxyXG5cdCk6IHRoaXMge1xyXG5cdFx0cmV0dXJuIHRoaXMub24oT1dlYlNpZ25VcC5FVlRfU0lHTl9VUF9ORVhUX1NURVAsIGhhbmRsZXIpO1xyXG5cdH1cclxuXHJcblx0b25TdWNjZXNzKFxyXG5cdFx0aGFuZGxlcjogKHJlc3BvbnNlOiBJTmV0UmVzcG9uc2U8SU9ab25lQXBpSlNPTjxhbnk+PikgPT4gdm9pZCxcclxuXHQpOiB0aGlzIHtcclxuXHRcdHJldHVybiB0aGlzLm9uKE9XZWJTaWduVXAuRVZUX1NJR05fVVBfU1VDQ0VTUywgaGFuZGxlcik7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIF9zZW5kRm9ybShkYXRhOiBGb3JtRGF0YSB8IG9iamVjdCwgbmV4dFN0ZXA/OiBudW1iZXIpIHtcclxuXHRcdGNvbnN0IG0gPSB0aGlzLFxyXG5cdFx0XHR1cmwgPSBtLmFwcENvbnRleHQudXJsLmdldCgnT1pfU0VSVkVSX1NJR05VUF9TRVJWSUNFJyksXHJcblx0XHRcdG5ldCA9IG0uYXBwQ29udGV4dC5uZXQ8SU9ab25lQXBpSlNPTjxhbnk+Pih1cmwsIHtcclxuXHRcdFx0XHRtZXRob2Q6ICdQT1NUJyxcclxuXHRcdFx0XHRib2R5OiBkYXRhLFxyXG5cdFx0XHRcdGlzR29vZE5ld3MocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRcdHJldHVybiBCb29sZWFuKHJlc3BvbnNlLmpzb24gJiYgcmVzcG9uc2UuanNvbi5lcnJvciA9PT0gMCk7XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0cmV0dXJuIG5ldFxyXG5cdFx0XHQub25Hb29kTmV3cyhmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRpZiAobmV4dFN0ZXApIHtcclxuXHRcdFx0XHRcdG0udHJpZ2dlcihPV2ViU2lnblVwLkVWVF9TSUdOX1VQX05FWFRfU1RFUCwgW1xyXG5cdFx0XHRcdFx0XHRyZXNwb25zZSxcclxuXHRcdFx0XHRcdFx0bmV4dFN0ZXAsXHJcblx0XHRcdFx0XHRdKTtcclxuXHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0bS50cmlnZ2VyKE9XZWJTaWduVXAuRVZUX1NJR05fVVBfU1VDQ0VTUywgW3Jlc3BvbnNlXSk7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9KVxyXG5cdFx0XHQub25CYWROZXdzKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG5cdFx0XHRcdG0udHJpZ2dlcihPV2ViU2lnblVwLkVWVF9TSUdOX1VQX0VSUk9SLCBbcmVzcG9uc2VdKTtcclxuXHRcdFx0fSlcclxuXHRcdFx0LnNlbmQoKTtcclxuXHR9XHJcbn1cclxuIl19