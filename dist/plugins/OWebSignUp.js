import { OWebEvent } from "../oweb";
export default class OWebSignUp extends OWebEvent {
    constructor(app_context) {
        super();
        this.app_context = app_context;
    }
    stepStart(form) {
        let ofv = this.app_context.getFormValidator(form, ["phone"]);
        if (ofv.validate()) {
            let form_data = ofv.getFormData(["phone", "cc2"]);
            form_data.set("step", String(OWebSignUp.SIGN_UP_STEP_START));
            this._sendForm(form, form_data, OWebSignUp.SIGN_UP_STEP_VALIDATE);
        }
    }
    stepValidate(form) {
        let ofv = this.app_context.getFormValidator(form, ["code"]);
        if (ofv.validate()) {
            let code = ofv.getField("code");
            this._sendForm(form, {
                "step": OWebSignUp.SIGN_UP_STEP_VALIDATE,
                "code": code
            }, OWebSignUp.SIGN_UP_STEP_END);
        }
    }
    stepEnd(form) {
        let required = ["uname", "pass", "vpass", "birth_date", "gender"], excluded = [], mailInput, agreeChk;
        if (mailInput = form.querySelector("input[name=email]")) {
            if (!mailInput.value.trim().length) {
                excluded.push("email");
            }
            else {
                required.push("email");
            }
        }
        let ofv = this.app_context.getFormValidator(form, required, excluded), formData;
        if (ofv.validate()) {
            if ((agreeChk = form.querySelector("input[name=oweb_cgu_agree_checkbox]")) && !agreeChk.checked) {
                this.trigger(OWebSignUp.EVT_SIGN_UP_ERROR, ["OZ_ERROR_SHOULD_ACCEPT_CGU", form]);
                return false;
            }
            formData = ofv.getFormData(required);
            formData.set("step", String(OWebSignUp.SIGN_UP_STEP_END));
            this._sendForm(form, formData);
        }
    }
    _sendForm(form, data, next_step) {
        let m = this, url = this.app_context.url.get("OZ_SERVER_SIGNUP_SERVICE");
        this.app_context.request("POST", url, data, function (response) {
            if (next_step) {
                m.trigger(OWebSignUp.EVT_NEXT_STEP, [{ "response": response, "step": next_step, }]);
            }
            else {
                m.trigger(OWebSignUp.EVT_SIGN_UP_SUCCESS, [{ "response": response }]);
            }
        }, function (response) {
            m.trigger(OWebSignUp.EVT_SIGN_UP_ERROR, [{ "step": next_step, "response": response }]);
        }, true);
    }
}
OWebSignUp.SIGN_UP_STEP_START = 1;
OWebSignUp.SIGN_UP_STEP_VALIDATE = 2;
OWebSignUp.SIGN_UP_STEP_END = 3;
OWebSignUp.EVT_NEXT_STEP = "OWebSignUp:next_step";
OWebSignUp.EVT_SIGN_UP_SUCCESS = "OWebSignUp:success";
OWebSignUp.EVT_SIGN_UP_ERROR = "OWebSignUp:error";
OWebSignUp.SELF = "OWebSignUp";
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYlNpZ25VcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wbHVnaW5zL09XZWJTaWduVXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFVLFNBQVMsRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUUzQyxNQUFNLENBQUMsT0FBTyxpQkFBa0IsU0FBUSxTQUFTO0lBV2hELFlBQTZCLFdBQW9CO1FBQ2hELEtBQUssRUFBRSxDQUFBO1FBRHFCLGdCQUFXLEdBQVgsV0FBVyxDQUFTO0lBRWpELENBQUM7SUFFRCxTQUFTLENBQUMsSUFBcUI7UUFDOUIsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBRTdELElBQUksR0FBRyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ25CLElBQUksU0FBUyxHQUFHLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztZQUNsRCxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztZQUM3RCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsVUFBVSxDQUFDLHFCQUFxQixDQUFDLENBQUM7U0FDbEU7SUFDRixDQUFDO0lBRUQsWUFBWSxDQUFDLElBQXFCO1FBQ2pDLElBQUksR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztRQUU1RCxJQUFJLEdBQUcsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUVuQixJQUFJLElBQUksR0FBRyxHQUFHLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBRWhDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFF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M0MsNEJBQWlCLEdBQUssa0JBQWtCLENBQUM7QUFDekMsZUFBSSxHQUFrQixZQUFZLENBQUM7QUE4RW5ELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge09XZWJBcHAsIE9XZWJFdmVudH0gZnJvbSBcIi4uL293ZWJcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9XZWJTaWduVXAgZXh0ZW5kcyBPV2ViRXZlbnQge1xyXG5cclxuXHRzdGF0aWMgcmVhZG9ubHkgU0lHTl9VUF9TVEVQX1NUQVJUICAgID0gMTtcclxuXHRzdGF0aWMgcmVhZG9ubHkgU0lHTl9VUF9TVEVQX1ZBTElEQVRFID0gMjtcclxuXHRzdGF0aWMgcmVhZG9ubHkgU0lHTl9VUF9TVEVQX0VORCAgICAgID0gMztcclxuXHJcblx0c3RhdGljIHJlYWRvbmx5IEVWVF9ORVhUX1NURVAgICAgICAgPSBcIk9XZWJTaWduVXA6bmV4dF9zdGVwXCI7XHJcblx0c3RhdGljIHJlYWRvbmx5IEVWVF9TSUdOX1VQX1NVQ0NFU1MgPSBcIk9XZWJTaWduVXA6c3VjY2Vzc1wiO1xyXG5cdHN0YXRpYyByZWFkb25seSBFVlRfU0lHTl9VUF9FUlJPUiAgID0gXCJPV2ViU2lnblVwOmVycm9yXCI7XHJcblx0c3RhdGljIHJlYWRvbmx5IFNFTEYgICAgICAgICAgICAgICAgPSBcIk9XZWJTaWduVXBcIjtcclxuXHJcblx0Y29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBhcHBfY29udGV4dDogT1dlYkFwcCkge1xyXG5cdFx0c3VwZXIoKVxyXG5cdH1cclxuXHJcblx0c3RlcFN0YXJ0KGZvcm06IEhUTUxGb3JtRWxlbWVudCkge1xyXG5cdFx0bGV0IG9mdiA9IHRoaXMuYXBwX2NvbnRleHQuZ2V0Rm9ybVZhbGlkYXRvcihmb3JtLCBbXCJwaG9uZVwiXSk7XHJcblxyXG5cdFx0aWYgKG9mdi52YWxpZGF0ZSgpKSB7XHJcblx0XHRcdGxldCBmb3JtX2RhdGEgPSBvZnYuZ2V0Rm9ybURhdGEoW1wicGhvbmVcIiwgXCJjYzJcIl0pO1xyXG5cdFx0XHRmb3JtX2RhdGEuc2V0KFwic3RlcFwiLCBTdHJpbmcoT1dlYlNpZ25VcC5TSUdOX1VQX1NURVBfU1RBUlQpKTtcclxuXHRcdFx0dGhpcy5fc2VuZEZvcm0oZm9ybSwgZm9ybV9kYXRhLCBPV2ViU2lnblVwLlNJR05fVVBfU1RFUF9WQUxJREFURSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxuXHRzdGVwVmFsaWRhdGUoZm9ybTogSFRNTEZvcm1FbGVtZW50KSB7XHJcblx0XHRsZXQgb2Z2ID0gdGhpcy5hcHBfY29udGV4dC5nZXRGb3JtVmFsaWRhdG9yKGZvcm0sIFtcImNvZGVcIl0pO1xyXG5cclxuXHRcdGlmIChvZnYudmFsaWRhdGUoKSkge1xyXG5cclxuXHRcdFx0bGV0IGNvZGUgPSBvZnYuZ2V0RmllbGQoXCJjb2RlXCIpO1xyXG5cclxuXHRcdFx0dGhpcy5fc2VuZEZvcm0oZm9ybSwge1xyXG5cdFx0XHRcdFwic3RlcFwiOiBPV2ViU2lnblVwLlNJR05fVVBfU1RFUF9WQUxJREFURSxcclxuXHRcdFx0XHRcImNvZGVcIjogY29kZVxyXG5cdFx0XHR9LCBPV2ViU2lnblVwLlNJR05fVVBfU1RFUF9FTkQpO1xyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdHN0ZXBFbmQoZm9ybTogSFRNTEZvcm1FbGVtZW50KSB7XHJcblxyXG5cdFx0bGV0IHJlcXVpcmVkID0gW1widW5hbWVcIiwgXCJwYXNzXCIsIFwidnBhc3NcIiwgXCJiaXJ0aF9kYXRlXCIsIFwiZ2VuZGVyXCJdLFxyXG5cdFx0XHRleGNsdWRlZCA9IFtdLFxyXG5cdFx0XHRtYWlsSW5wdXQ6IEhUTUxJbnB1dEVsZW1lbnQgfCBudWxsLFxyXG5cdFx0XHRhZ3JlZUNoazogSFRNTElucHV0RWxlbWVudCB8IG51bGw7XHJcblxyXG5cdFx0aWYgKG1haWxJbnB1dCA9IGZvcm0ucXVlcnlTZWxlY3RvcihcImlucHV0W25hbWU9ZW1haWxdXCIpKSB7XHJcblx0XHRcdGlmICghbWFpbElucHV0LnZhbHVlLnRyaW0oKS5sZW5ndGgpIHtcclxuXHRcdFx0XHRleGNsdWRlZC5wdXNoKFwiZW1haWxcIik7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0cmVxdWlyZWQucHVzaChcImVtYWlsXCIpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0bGV0IG9mdiA9IHRoaXMuYXBwX2NvbnRleHQuZ2V0Rm9ybVZhbGlkYXRvcihmb3JtLCByZXF1aXJlZCwgZXhjbHVkZWQpLFxyXG5cdFx0XHRmb3JtRGF0YTtcclxuXHJcblx0XHRpZiAob2Z2LnZhbGlkYXRlKCkpIHtcclxuXHJcblx0XHRcdGlmICgoYWdyZWVDaGsgPSBmb3JtLnF1ZXJ5U2VsZWN0b3IoXCJpbnB1dFtuYW1lPW93ZWJfY2d1X2FncmVlX2NoZWNrYm94XVwiKSkgJiYgIWFncmVlQ2hrLmNoZWNrZWQpIHtcclxuXHRcdFx0XHR0aGlzLnRyaWdnZXIoT1dlYlNpZ25VcC5FVlRfU0lHTl9VUF9FUlJPUiwgW1wiT1pfRVJST1JfU0hPVUxEX0FDQ0VQVF9DR1VcIiwgZm9ybV0pO1xyXG5cdFx0XHRcdHJldHVybiBmYWxzZTtcclxuXHRcdFx0fVxyXG5cclxuXHRcdFx0Zm9ybURhdGEgPSBvZnYuZ2V0Rm9ybURhdGEocmVxdWlyZWQpO1xyXG5cdFx0XHRmb3JtRGF0YS5zZXQoXCJzdGVwXCIsIFN0cmluZyhPV2ViU2lnblVwLlNJR05fVVBfU1RFUF9FTkQpKTtcclxuXHJcblx0XHRcdHRoaXMuX3NlbmRGb3JtKGZvcm0sIGZvcm1EYXRhKTtcclxuXHRcdH1cclxuXHJcblx0fVxyXG5cclxuXHRfc2VuZEZvcm0oZm9ybTogSFRNTEZvcm1FbGVtZW50LCBkYXRhOiBhbnksIG5leHRfc3RlcD86IG51bWJlcikge1xyXG5cdFx0bGV0IG0gICA9IHRoaXMsXHJcblx0XHRcdHVybCA9IHRoaXMuYXBwX2NvbnRleHQudXJsLmdldChcIk9aX1NFUlZFUl9TSUdOVVBfU0VSVklDRVwiKTtcclxuXHJcblx0XHR0aGlzLmFwcF9jb250ZXh0LnJlcXVlc3QoXCJQT1NUXCIsIHVybCwgZGF0YSwgZnVuY3Rpb24gKHJlc3BvbnNlOiBhbnkpIHtcclxuXHRcdFx0aWYgKG5leHRfc3RlcCkge1xyXG5cdFx0XHRcdG0udHJpZ2dlcihPV2ViU2lnblVwLkVWVF9ORVhUX1NURVAsIFt7XCJyZXNwb25zZVwiOiByZXNwb25zZSwgXCJzdGVwXCI6IG5leHRfc3RlcCx9XSk7XHJcblx0XHRcdH0gZWxzZSB7XHJcblx0XHRcdFx0bS50cmlnZ2VyKE9XZWJTaWduVXAuRVZUX1NJR05fVVBfU1VDQ0VTUywgW3tcInJlc3BvbnNlXCI6IHJlc3BvbnNlfV0pO1xyXG5cdFx0XHR9XHJcblx0XHR9LCBmdW5jdGlvbiAocmVzcG9uc2U6IGFueSkge1xyXG5cdFx0XHRtLnRyaWdnZXIoT1dlYlNpZ25VcC5FVlRfU0lHTl9VUF9FUlJPUiwgW3tcInN0ZXBcIjogbmV4dF9zdGVwLCBcInJlc3BvbnNlXCI6IHJlc3BvbnNlfV0pO1xyXG5cdFx0fSwgdHJ1ZSk7XHJcblx0fVxyXG59O1xyXG4iXX0=