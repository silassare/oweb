import OWebEvent from '../OWebEvent';
import { id } from '../utils';
export default class OWebSignUp extends OWebEvent {
    _appContext;
    static SELF = id();
    static EVT_SIGN_UP_SUCCESS = id();
    static EVT_SIGN_UP_FAIL = id();
    static SIGN_UP_STEP_START = 1;
    static SIGN_UP_STEP_VALIDATE = 2;
    static SIGN_UP_STEP_END = 3;
    constructor(_appContext) {
        super();
        this._appContext = _appContext;
    }
    stepStart(data) {
        return this._sendForm({
            phone: data.phone,
            cc2: data.cc2,
            step: OWebSignUp.SIGN_UP_STEP_START,
        }, OWebSignUp.SIGN_UP_STEP_VALIDATE);
    }
    stepValidate(data) {
        return this._sendForm({
            step: OWebSignUp.SIGN_UP_STEP_VALIDATE,
            code: data.code,
        }, OWebSignUp.SIGN_UP_STEP_END);
    }
    stepEnd(data) {
        const form = {
            step: OWebSignUp.SIGN_UP_STEP_END,
            ...data,
        };
        if (!form.email) {
            delete form.email;
        }
        return this._sendForm(form);
    }
    onSignUpFail(handler) {
        return this.on(OWebSignUp.EVT_SIGN_UP_FAIL, handler);
    }
    onSignUpSuccess(handler) {
        return this.on(OWebSignUp.EVT_SIGN_UP_SUCCESS, handler);
    }
    _sendForm(data, nextStep) {
        const m = this, url = m._appContext.url.get('OZ_SERVER_SIGNUP_SERVICE'), net = m._appContext.oz.request(url, {
            method: 'POST',
            body: data,
        });
        return net
            .onGoodNews(function goodNewsHandler(response) {
            if (!nextStep) {
                m.trigger(OWebSignUp.EVT_SIGN_UP_SUCCESS, [response]);
            }
        })
            .onFail(function failHandler(err) {
            m.trigger(OWebSignUp.EVT_SIGN_UP_FAIL, [err]);
        })
            .send();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYlNpZ25VcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wbHVnaW5zL09XZWJTaWduVXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxTQUFTLE1BQU0sY0FBYyxDQUFDO0FBQ3JDLE9BQU8sRUFBQyxFQUFFLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFLNUIsTUFBTSxDQUFDLE9BQU8sT0FBTyxVQUFnQyxTQUFRLFNBQVM7SUFTeEM7SUFSN0IsTUFBTSxDQUFVLElBQUksR0FBb0IsRUFBRSxFQUFFLENBQUM7SUFDckMsTUFBTSxDQUFVLG1CQUFtQixHQUFLLEVBQUUsRUFBRSxDQUFDO0lBQzdDLE1BQU0sQ0FBVSxnQkFBZ0IsR0FBUSxFQUFFLEVBQUUsQ0FBQztJQUVyRCxNQUFNLENBQVUsa0JBQWtCLEdBQU0sQ0FBQyxDQUFDO0lBQzFDLE1BQU0sQ0FBVSxxQkFBcUIsR0FBRyxDQUFDLENBQUM7SUFDMUMsTUFBTSxDQUFVLGdCQUFnQixHQUFRLENBQUMsQ0FBQztJQUUxQyxZQUE2QixXQUFvQjtRQUNoRCxLQUFLLEVBQUUsQ0FBQztRQURvQixnQkFBVyxHQUFYLFdBQVcsQ0FBUztJQUVqRCxDQUFDO0lBRUQsU0FBUyxDQUFDLElBQW9DO1FBQzdDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FDcEI7WUFDQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDakIsR0FBRyxFQUFJLElBQUksQ0FBQyxHQUFHO1lBQ2YsSUFBSSxFQUFHLFVBQVUsQ0FBQyxrQkFBa0I7U0FDcEMsRUFDRCxVQUFVLENBQUMscUJBQXFCLENBQ2hDLENBQUM7SUFDSCxDQUFDO0lBRUQsWUFBWSxDQUFDLElBQXNCO1FBQ2xDLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FDcEI7WUFDQyxJQUFJLEVBQUUsVUFBVSxDQUFDLHFCQUFxQjtZQUN0QyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7U0FDZixFQUNELFVBQVUsQ0FBQyxnQkFBZ0IsQ0FDM0IsQ0FBQztJQUNILENBQUM7SUFFRCxPQUFPLENBQUMsSUFPUDtRQUNBLE1BQU0sSUFBSSxHQUFHO1lBQ1osSUFBSSxFQUFFLFVBQVUsQ0FBQyxnQkFBZ0I7WUFDakMsR0FBRyxJQUFJO1NBQ1AsQ0FBQztRQUVGLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2hCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztTQUNsQjtRQUVELE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBTSxJQUFJLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQsWUFBWSxDQUNYLE9BQTZDO1FBRTdDLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELGVBQWUsQ0FDZCxPQUF3RTtRQUV4RSxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLG1CQUFtQixFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3pELENBQUM7SUFFTyxTQUFTLENBQUksSUFBZSxFQUFFLFFBQWlCO1FBQ3RELE1BQU0sQ0FBQyxHQUFLLElBQUksRUFDYixHQUFHLEdBQUcsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLDBCQUEwQixDQUFDLEVBQ3ZELEdBQUcsR0FBRyxDQUFDLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQWtCLEdBQUcsRUFBRTtZQUNwRCxNQUFNLEVBQUUsTUFBTTtZQUNkLElBQUksRUFBSSxJQUFJO1NBQ1osQ0FBQyxDQUFDO1FBRU4sT0FBTyxHQUFHO2FBQ1IsVUFBVSxDQUFDLFNBQVMsZUFBZSxDQUFDLFFBQVE7WUFDNUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtnQkFDZCxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7YUFDdEQ7UUFDRixDQUFDLENBQUM7YUFDRCxNQUFNLENBQUMsU0FBUyxXQUFXLENBQUMsR0FBRztZQUMvQixDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDL0MsQ0FBQyxDQUFDO2FBQ0QsSUFBSSxFQUFFLENBQUM7SUFDVixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE9XZWJBcHAgZnJvbSAnLi4vT1dlYkFwcCc7XG5pbXBvcnQgT1dlYkV2ZW50IGZyb20gJy4uL09XZWJFdmVudCc7XG5pbXBvcnQge2lkfSBmcm9tICcuLi91dGlscyc7XG5pbXBvcnQge09OZXRFcnJvciwgT05ldFJlc3BvbnNlfSBmcm9tICcuLi9PV2ViTmV0JztcbmltcG9ydCB7T0FwaVJlc3BvbnNlfSBmcm9tICcuLi9vem9uZSc7XG5pbXBvcnQge09Gb3JtRGF0YX0gZnJvbSAnLi4vT1dlYkZvcm1WYWxpZGF0b3InO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPV2ViU2lnblVwPFN0YXJ0LFZhbGlkYXRlLCBFbmQ+IGV4dGVuZHMgT1dlYkV2ZW50IHtcblx0c3RhdGljIHJlYWRvbmx5IFNFTEYgICAgICAgICAgICAgICAgICA9IGlkKCk7XG5cdHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEVWVF9TSUdOX1VQX1NVQ0NFU1MgICA9IGlkKCk7XG5cdHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IEVWVF9TSUdOX1VQX0ZBSUwgICAgICA9IGlkKCk7XG5cblx0c3RhdGljIHJlYWRvbmx5IFNJR05fVVBfU1RFUF9TVEFSVCAgICA9IDE7XG5cdHN0YXRpYyByZWFkb25seSBTSUdOX1VQX1NURVBfVkFMSURBVEUgPSAyO1xuXHRzdGF0aWMgcmVhZG9ubHkgU0lHTl9VUF9TVEVQX0VORCAgICAgID0gMztcblxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IF9hcHBDb250ZXh0OiBPV2ViQXBwKSB7XG5cdFx0c3VwZXIoKTtcblx0fVxuXG5cdHN0ZXBTdGFydChkYXRhOiB7IHBob25lOiBzdHJpbmc7IGNjMjogc3RyaW5nIH0pOiBQcm9taXNlPE9OZXRSZXNwb25zZTxPQXBpUmVzcG9uc2U8U3RhcnQ+Pj4ge1xuXHRcdHJldHVybiB0aGlzLl9zZW5kRm9ybTxTdGFydD4oXG5cdFx0XHR7XG5cdFx0XHRcdHBob25lOiBkYXRhLnBob25lLFxuXHRcdFx0XHRjYzIgIDogZGF0YS5jYzIsXG5cdFx0XHRcdHN0ZXAgOiBPV2ViU2lnblVwLlNJR05fVVBfU1RFUF9TVEFSVCxcblx0XHRcdH0sXG5cdFx0XHRPV2ViU2lnblVwLlNJR05fVVBfU1RFUF9WQUxJREFURVxuXHRcdCk7XG5cdH1cblxuXHRzdGVwVmFsaWRhdGUoZGF0YTogeyBjb2RlOiBzdHJpbmcgfSk6IFByb21pc2U8T05ldFJlc3BvbnNlPE9BcGlSZXNwb25zZTxWYWxpZGF0ZT4+PiB7XG5cdFx0cmV0dXJuIHRoaXMuX3NlbmRGb3JtPFZhbGlkYXRlPihcblx0XHRcdHtcblx0XHRcdFx0c3RlcDogT1dlYlNpZ25VcC5TSUdOX1VQX1NURVBfVkFMSURBVEUsXG5cdFx0XHRcdGNvZGU6IGRhdGEuY29kZSxcblx0XHRcdH0sXG5cdFx0XHRPV2ViU2lnblVwLlNJR05fVVBfU1RFUF9FTkRcblx0XHQpO1xuXHR9XG5cblx0c3RlcEVuZChkYXRhOiB7XG5cdFx0dW5hbWU6IHN0cmluZztcblx0XHRwYXNzOiBzdHJpbmc7XG5cdFx0dnBhc3M6IHN0cmluZztcblx0XHRiaXJ0aF9kYXRlOiBzdHJpbmc7XG5cdFx0Z2VuZGVyOiBzdHJpbmc7XG5cdFx0ZW1haWw/OiBzdHJpbmc7XG5cdH0pOiBQcm9taXNlPE9OZXRSZXNwb25zZTxPQXBpUmVzcG9uc2U8RW5kPj4+IHtcblx0XHRjb25zdCBmb3JtID0ge1xuXHRcdFx0c3RlcDogT1dlYlNpZ25VcC5TSUdOX1VQX1NURVBfRU5ELFxuXHRcdFx0Li4uZGF0YSxcblx0XHR9O1xuXG5cdFx0aWYgKCFmb3JtLmVtYWlsKSB7XG5cdFx0XHRkZWxldGUgZm9ybS5lbWFpbDtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5fc2VuZEZvcm08RW5kPihmb3JtKTtcblx0fVxuXG5cdG9uU2lnblVwRmFpbChcblx0XHRoYW5kbGVyOiAodGhpczogdGhpcywgZXJyOiBPTmV0RXJyb3IpID0+IHZvaWRcblx0KTogdGhpcyB7XG5cdFx0cmV0dXJuIHRoaXMub24oT1dlYlNpZ25VcC5FVlRfU0lHTl9VUF9GQUlMLCBoYW5kbGVyKTtcblx0fVxuXG5cdG9uU2lnblVwU3VjY2Vzcyhcblx0XHRoYW5kbGVyOiAodGhpczogdGhpcywgcmVzcG9uc2U6IE9OZXRSZXNwb25zZTxPQXBpUmVzcG9uc2U8RW5kPj4pID0+IHZvaWRcblx0KTogdGhpcyB7XG5cdFx0cmV0dXJuIHRoaXMub24oT1dlYlNpZ25VcC5FVlRfU0lHTl9VUF9TVUNDRVNTLCBoYW5kbGVyKTtcblx0fVxuXG5cdHByaXZhdGUgX3NlbmRGb3JtPFI+KGRhdGE6IE9Gb3JtRGF0YSwgbmV4dFN0ZXA/OiBudW1iZXIpIHtcblx0XHRjb25zdCBtICAgPSB0aGlzLFxuXHRcdFx0ICB1cmwgPSBtLl9hcHBDb250ZXh0LnVybC5nZXQoJ09aX1NFUlZFUl9TSUdOVVBfU0VSVklDRScpLFxuXHRcdFx0ICBuZXQgPSBtLl9hcHBDb250ZXh0Lm96LnJlcXVlc3Q8T0FwaVJlc3BvbnNlPFI+Pih1cmwsIHtcblx0XHRcdFx0ICBtZXRob2Q6ICdQT1NUJyxcblx0XHRcdFx0ICBib2R5ICA6IGRhdGEsXG5cdFx0XHQgIH0pO1xuXG5cdFx0cmV0dXJuIG5ldFxuXHRcdFx0Lm9uR29vZE5ld3MoZnVuY3Rpb24gZ29vZE5ld3NIYW5kbGVyKHJlc3BvbnNlKSB7XG5cdFx0XHRcdGlmICghbmV4dFN0ZXApIHtcblx0XHRcdFx0XHRtLnRyaWdnZXIoT1dlYlNpZ25VcC5FVlRfU0lHTl9VUF9TVUNDRVNTLCBbcmVzcG9uc2VdKTtcblx0XHRcdFx0fVxuXHRcdFx0fSlcblx0XHRcdC5vbkZhaWwoZnVuY3Rpb24gZmFpbEhhbmRsZXIoZXJyKSB7XG5cdFx0XHRcdG0udHJpZ2dlcihPV2ViU2lnblVwLkVWVF9TSUdOX1VQX0ZBSUwsIFtlcnJdKTtcblx0XHRcdH0pXG5cdFx0XHQuc2VuZCgpO1xuXHR9XG59XG4iXX0=