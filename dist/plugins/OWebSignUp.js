import OWebEvent from '../OWebEvent';
import { id } from '../utils';
import { ozNet } from '../ozone';
let OWebSignUp = /** @class */ (() => {
    class OWebSignUp extends OWebEvent {
        constructor(appContext) {
            super();
            this.appContext = appContext;
        }
        stepStart(data) {
            return this._sendForm({
                phone: data.phone,
                cc2: data.cc2,
                step: OWebSignUp.SIGN_UP_STEP_START,
            }, OWebSignUp.SIGN_UP_STEP_VALIDATE);
        }
        stepValidate(data) {
            return this._sendForm({
                step: OWebSignUp.SIGN_UP_STEP_VALIDATE,
                code: data.code,
            }, OWebSignUp.SIGN_UP_STEP_END);
        }
        stepEnd(data) {
            return this._sendForm({
                step: OWebSignUp.SIGN_UP_STEP_END,
            });
        }
        onError(handler) {
            return this.on(OWebSignUp.EVT_SIGN_UP_ERROR, handler);
        }
        onNextStep(handler) {
            return this.on(OWebSignUp.EVT_SIGN_UP_NEXT_STEP, handler);
        }
        onSuccess(handler) {
            return this.on(OWebSignUp.EVT_SIGN_UP_SUCCESS, handler);
        }
        _sendForm(data, nextStep) {
            const m = this, url = m.appContext.url.get('OZ_SERVER_SIGNUP_SERVICE'), net = ozNet(url, {
                method: 'POST',
                body: data,
                isGoodNews(response) {
                    return Boolean(response.json && response.json.error === 0);
                },
            });
            return net
                .onGoodNews(function (response) {
                if (nextStep) {
                    m.trigger(OWebSignUp.EVT_SIGN_UP_NEXT_STEP, [
                        response,
                        nextStep,
                    ]);
                }
                else {
                    m.trigger(OWebSignUp.EVT_SIGN_UP_SUCCESS, [response]);
                }
            })
                .onBadNews(function (response) {
                m.trigger(OWebSignUp.EVT_SIGN_UP_ERROR, [response]);
            })
                .send();
        }
    }
    OWebSignUp.SELF = id();
    OWebSignUp.EVT_SIGN_UP_NEXT_STEP = id();
    OWebSignUp.EVT_SIGN_UP_SUCCESS = id();
    OWebSignUp.EVT_SIGN_UP_ERROR = id();
    OWebSignUp.SIGN_UP_STEP_START = 1;
    OWebSignUp.SIGN_UP_STEP_VALIDATE = 2;
    OWebSignUp.SIGN_UP_STEP_END = 3;
    return OWebSignUp;
})();
export default OWebSignUp;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYlNpZ25VcC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9wbHVnaW5zL09XZWJTaWduVXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxTQUFTLE1BQU0sY0FBYyxDQUFDO0FBQ3JDLE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFOUIsT0FBTyxFQUFpQixLQUFLLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFaEQ7SUFBQSxNQUFxQixVQUFXLFNBQVEsU0FBUztRQVVoRCxZQUE2QixVQUFtQjtZQUMvQyxLQUFLLEVBQUUsQ0FBQztZQURvQixlQUFVLEdBQVYsVUFBVSxDQUFTO1FBRWhELENBQUM7UUFFRCxTQUFTLENBQUMsSUFBb0M7WUFDN0MsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUNwQjtnQkFDQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7Z0JBQ2pCLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRztnQkFDYixJQUFJLEVBQUUsVUFBVSxDQUFDLGtCQUFrQjthQUNuQyxFQUNELFVBQVUsQ0FBQyxxQkFBcUIsQ0FDaEMsQ0FBQztRQUNILENBQUM7UUFFRCxZQUFZLENBQUMsSUFBc0I7WUFDbEMsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUNwQjtnQkFDQyxJQUFJLEVBQUUsVUFBVSxDQUFDLHFCQUFxQjtnQkFDdEMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO2FBQ2YsRUFDRCxVQUFVLENBQUMsZ0JBQWdCLENBQzNCLENBQUM7UUFDSCxDQUFDO1FBRUQsT0FBTyxDQUFDLElBT1A7WUFDQSxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7Z0JBQ3JCLElBQUksRUFBRSxVQUFVLENBQUMsZ0JBQWdCO2FBQ2pDLENBQUMsQ0FBQztRQUNKLENBQUM7UUFFRCxPQUFPLENBQ04sT0FBNkQ7WUFFN0QsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN2RCxDQUFDO1FBRUQsVUFBVSxDQUNULE9BR1M7WUFFVCxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLHFCQUFxQixFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzNELENBQUM7UUFFRCxTQUFTLENBQ1IsT0FBNkQ7WUFFN0QsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUN6RCxDQUFDO1FBRU8sU0FBUyxDQUFDLElBQXVCLEVBQUUsUUFBaUI7WUFDM0QsTUFBTSxDQUFDLEdBQUcsSUFBSSxFQUNiLEdBQUcsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsMEJBQTBCLENBQUMsRUFDdEQsR0FBRyxHQUFHLEtBQUssQ0FBcUIsR0FBRyxFQUFFO2dCQUNwQyxNQUFNLEVBQUUsTUFBTTtnQkFDZCxJQUFJLEVBQUUsSUFBSTtnQkFDVixVQUFVLENBQUMsUUFBUTtvQkFDbEIsT0FBTyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDNUQsQ0FBQzthQUNELENBQUMsQ0FBQztZQUVKLE9BQU8sR0FBRztpQkFDUixVQUFVLENBQUMsVUFBVSxRQUFRO2dCQUM3QixJQUFJLFFBQVEsRUFBRTtvQkFDYixDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxxQkFBcUIsRUFBRTt3QkFDM0MsUUFBUTt3QkFDUixRQUFRO3FCQUNSLENBQUMsQ0FBQztpQkFDSDtxQkFBTTtvQkFDTixDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7aUJBQ3REO1lBQ0YsQ0FBQyxDQUFDO2lCQUNELFNBQVMsQ0FBQyxVQUFVLFFBQVE7Z0JBQzVCLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLGlCQUFpQixFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUNyRCxDQUFDLENBQUM7aUJBQ0QsSUFBSSxFQUFFLENBQUM7UUFDVixDQUFDOztJQTlGZSxlQUFJLEdBQUcsRUFBRSxFQUFFLENBQUM7SUFDWixnQ0FBcUIsR0FBRyxFQUFFLEVBQUUsQ0FBQztJQUM3Qiw4QkFBbUIsR0FBRyxFQUFFLEVBQUUsQ0FBQztJQUMzQiw0QkFBaUIsR0FBRyxFQUFFLEVBQUUsQ0FBQztJQUV6Qiw2QkFBa0IsR0FBRyxDQUFDLENBQUM7SUFDdkIsZ0NBQXFCLEdBQUcsQ0FBQyxDQUFDO0lBQzFCLDJCQUFnQixHQUFHLENBQUMsQ0FBQztJQXdGdEMsaUJBQUM7S0FBQTtlQWhHb0IsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBPV2ViQXBwIGZyb20gJy4uL09XZWJBcHAnO1xyXG5pbXBvcnQgT1dlYkV2ZW50IGZyb20gJy4uL09XZWJFdmVudCc7XHJcbmltcG9ydCB7IGlkIH0gZnJvbSAnLi4vdXRpbHMnO1xyXG5pbXBvcnQgeyBJTmV0UmVzcG9uc2UgfSBmcm9tICcuLi9PV2ViTmV0JztcclxuaW1wb3J0IHsgSU9ab25lQXBpSlNPTiwgb3pOZXQgfSBmcm9tICcuLi9vem9uZSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPV2ViU2lnblVwIGV4dGVuZHMgT1dlYkV2ZW50IHtcclxuXHRzdGF0aWMgcmVhZG9ubHkgU0VMRiA9IGlkKCk7XHJcblx0c3RhdGljIHJlYWRvbmx5IEVWVF9TSUdOX1VQX05FWFRfU1RFUCA9IGlkKCk7XHJcblx0c3RhdGljIHJlYWRvbmx5IEVWVF9TSUdOX1VQX1NVQ0NFU1MgPSBpZCgpO1xyXG5cdHN0YXRpYyByZWFkb25seSBFVlRfU0lHTl9VUF9FUlJPUiA9IGlkKCk7XHJcblxyXG5cdHN0YXRpYyByZWFkb25seSBTSUdOX1VQX1NURVBfU1RBUlQgPSAxO1xyXG5cdHN0YXRpYyByZWFkb25seSBTSUdOX1VQX1NURVBfVkFMSURBVEUgPSAyO1xyXG5cdHN0YXRpYyByZWFkb25seSBTSUdOX1VQX1NURVBfRU5EID0gMztcclxuXHJcblx0Y29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBhcHBDb250ZXh0OiBPV2ViQXBwKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdH1cclxuXHJcblx0c3RlcFN0YXJ0KGRhdGE6IHsgcGhvbmU6IHN0cmluZzsgY2MyOiBzdHJpbmcgfSkge1xyXG5cdFx0cmV0dXJuIHRoaXMuX3NlbmRGb3JtKFxyXG5cdFx0XHR7XHJcblx0XHRcdFx0cGhvbmU6IGRhdGEucGhvbmUsXHJcblx0XHRcdFx0Y2MyOiBkYXRhLmNjMixcclxuXHRcdFx0XHRzdGVwOiBPV2ViU2lnblVwLlNJR05fVVBfU1RFUF9TVEFSVCxcclxuXHRcdFx0fSxcclxuXHRcdFx0T1dlYlNpZ25VcC5TSUdOX1VQX1NURVBfVkFMSURBVEUsXHJcblx0XHQpO1xyXG5cdH1cclxuXHJcblx0c3RlcFZhbGlkYXRlKGRhdGE6IHsgY29kZTogc3RyaW5nIH0pIHtcclxuXHRcdHJldHVybiB0aGlzLl9zZW5kRm9ybShcclxuXHRcdFx0e1xyXG5cdFx0XHRcdHN0ZXA6IE9XZWJTaWduVXAuU0lHTl9VUF9TVEVQX1ZBTElEQVRFLFxyXG5cdFx0XHRcdGNvZGU6IGRhdGEuY29kZSxcclxuXHRcdFx0fSxcclxuXHRcdFx0T1dlYlNpZ25VcC5TSUdOX1VQX1NURVBfRU5ELFxyXG5cdFx0KTtcclxuXHR9XHJcblxyXG5cdHN0ZXBFbmQoZGF0YToge1xyXG5cdFx0dW5hbWU6IHN0cmluZztcclxuXHRcdHBhc3M6IHN0cmluZztcclxuXHRcdHZwYXNzOiBzdHJpbmc7XHJcblx0XHRiaXJ0aF9kYXRlOiBzdHJpbmc7XHJcblx0XHRnZW5kZXI6IHN0cmluZztcclxuXHRcdGVtYWlsPzogc3RyaW5nO1xyXG5cdH0pIHtcclxuXHRcdHJldHVybiB0aGlzLl9zZW5kRm9ybSh7XHJcblx0XHRcdHN0ZXA6IE9XZWJTaWduVXAuU0lHTl9VUF9TVEVQX0VORCxcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0b25FcnJvcihcclxuXHRcdGhhbmRsZXI6IChyZXNwb25zZTogSU5ldFJlc3BvbnNlPElPWm9uZUFwaUpTT048YW55Pj4pID0+IHZvaWQsXHJcblx0KTogdGhpcyB7XHJcblx0XHRyZXR1cm4gdGhpcy5vbihPV2ViU2lnblVwLkVWVF9TSUdOX1VQX0VSUk9SLCBoYW5kbGVyKTtcclxuXHR9XHJcblxyXG5cdG9uTmV4dFN0ZXAoXHJcblx0XHRoYW5kbGVyOiAoXHJcblx0XHRcdHJlc3BvbnNlOiBJTmV0UmVzcG9uc2U8SU9ab25lQXBpSlNPTjxhbnk+PixcclxuXHRcdFx0c3RlcDogbnVtYmVyLFxyXG5cdFx0KSA9PiB2b2lkLFxyXG5cdCk6IHRoaXMge1xyXG5cdFx0cmV0dXJuIHRoaXMub24oT1dlYlNpZ25VcC5FVlRfU0lHTl9VUF9ORVhUX1NURVAsIGhhbmRsZXIpO1xyXG5cdH1cclxuXHJcblx0b25TdWNjZXNzKFxyXG5cdFx0aGFuZGxlcjogKHJlc3BvbnNlOiBJTmV0UmVzcG9uc2U8SU9ab25lQXBpSlNPTjxhbnk+PikgPT4gdm9pZCxcclxuXHQpOiB0aGlzIHtcclxuXHRcdHJldHVybiB0aGlzLm9uKE9XZWJTaWduVXAuRVZUX1NJR05fVVBfU1VDQ0VTUywgaGFuZGxlcik7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIF9zZW5kRm9ybShkYXRhOiBGb3JtRGF0YSB8IG9iamVjdCwgbmV4dFN0ZXA/OiBudW1iZXIpIHtcclxuXHRcdGNvbnN0IG0gPSB0aGlzLFxyXG5cdFx0XHR1cmwgPSBtLmFwcENvbnRleHQudXJsLmdldCgnT1pfU0VSVkVSX1NJR05VUF9TRVJWSUNFJyksXHJcblx0XHRcdG5ldCA9IG96TmV0PElPWm9uZUFwaUpTT048YW55Pj4odXJsLCB7XHJcblx0XHRcdFx0bWV0aG9kOiAnUE9TVCcsXHJcblx0XHRcdFx0Ym9keTogZGF0YSxcclxuXHRcdFx0XHRpc0dvb2ROZXdzKHJlc3BvbnNlKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gQm9vbGVhbihyZXNwb25zZS5qc29uICYmIHJlc3BvbnNlLmpzb24uZXJyb3IgPT09IDApO1xyXG5cdFx0XHRcdH0sXHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdHJldHVybiBuZXRcclxuXHRcdFx0Lm9uR29vZE5ld3MoZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcblx0XHRcdFx0aWYgKG5leHRTdGVwKSB7XHJcblx0XHRcdFx0XHRtLnRyaWdnZXIoT1dlYlNpZ25VcC5FVlRfU0lHTl9VUF9ORVhUX1NURVAsIFtcclxuXHRcdFx0XHRcdFx0cmVzcG9uc2UsXHJcblx0XHRcdFx0XHRcdG5leHRTdGVwLFxyXG5cdFx0XHRcdFx0XSk7XHJcblx0XHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRcdG0udHJpZ2dlcihPV2ViU2lnblVwLkVWVF9TSUdOX1VQX1NVQ0NFU1MsIFtyZXNwb25zZV0pO1xyXG5cdFx0XHRcdH1cclxuXHRcdFx0fSlcclxuXHRcdFx0Lm9uQmFkTmV3cyhmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRtLnRyaWdnZXIoT1dlYlNpZ25VcC5FVlRfU0lHTl9VUF9FUlJPUiwgW3Jlc3BvbnNlXSk7XHJcblx0XHRcdH0pXHJcblx0XHRcdC5zZW5kKCk7XHJcblx0fVxyXG59XHJcbiJdfQ==