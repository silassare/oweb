import OWebEvent from '../OWebEvent';
import { id } from '../utils/Utils';
export default class OWebSignUp extends OWebEvent {
    constructor(appContext) {
        super();
        this.appContext = appContext;
    }
    stepStart(form) {
        const ofv = this.appContext.getFormValidator(form, ['phone']);
        if (ofv.validate()) {
            const formData = ofv.getFormData(['phone', 'cc2']);
            formData.set('step', String(OWebSignUp.SIGN_UP_STEP_START));
            this._sendForm(form, formData, OWebSignUp.SIGN_UP_STEP_VALIDATE);
        }
    }
    stepValidate(form) {
        const ofv = this.appContext.getFormValidator(form, ['code']);
        if (ofv.validate()) {
            const code = ofv.getField('code');
            this._sendForm(form, {
                step: OWebSignUp.SIGN_UP_STEP_VALIDATE,
                code,
            }, OWebSignUp.SIGN_UP_STEP_END);
        }
    }
    stepEnd(form) {
        const required = ['uname', 'pass', 'vpass', 'birth_date', 'gender'], excluded = [];
        let mailInput, agreeChk, ofv, formData;
        mailInput = form.querySelector('input[name=email]');
        if (mailInput) {
            if (!mailInput.value.trim().length) {
                excluded.push('email');
            }
            else {
                required.push('email');
            }
        }
        ofv = this.appContext.getFormValidator(form, required, excluded);
        if (ofv.validate()) {
            agreeChk = form.querySelector('input[name=oweb_signup_cgu_agree_checkbox]');
            if (agreeChk && !agreeChk.checked) {
                const error = {
                    error: 1,
                    msg: 'OZ_ERROR_SHOULD_ACCEPT_CGU',
                    utime: 0,
                };
                this.trigger(OWebSignUp.EVT_SIGN_UP_ERROR, [error]);
                return false;
            }
            formData = ofv.getFormData(required);
            formData.set('step', String(OWebSignUp.SIGN_UP_STEP_END));
            this._sendForm(form, formData);
        }
    }
    onError(handler) {
        return this.on(OWebSignUp.EVT_SIGN_UP_ERROR, handler);
    }
    onNextStep(handler) {
        return this.on(OWebSignUp.EVT_SIGN_UP_NEXT_STEP, handler);
    }
    onSuccess(handler) {
        return this.on(OWebSignUp.EVT_SIGN_UP_SUCCESS, handler);
    }
    _sendForm(form, data, nextStep) {
        const m = this, url = this.appContext.url.get('OZ_SERVER_SIGNUP_SERVICE');
        this.appContext.request('POST', url, data, function (response) {
            if (nextStep) {
                m.trigger(OWebSignUp.EVT_SIGN_UP_NEXT_STEP, [
                    response,
                    nextStep,
                ]);
            }
            else {
                m.trigger(OWebSignUp.EVT_SIGN_UP_SUCCESS, [response]);
            }
        }, function (response) {
            m.trigger(OWebSignUp.EVT_SIGN_UP_ERROR, [response]);
        }, true);
    }
}
OWebSignUp.SELF = id();
OWebSignUp.EVT_SIGN_UP_NEXT_STEP = id();
OWebSignUp.EVT_SIGN_UP_SUCCESS = id();
OWebSignUp.EVT_SIGN_UP_ERROR = id();
OWebSignUp.SIGN_UP_STEP_START = 1;
OWebSignUp.SIGN_UP_STEP_VALIDATE = 2;
OWebSignUp.SIGN_UP_STEP_END = 3;
//# sourceMappingURL=data:application/json;base64,