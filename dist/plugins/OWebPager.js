"use strict";
import OWebEvent from "../OWebEvent";
let linkId = 0;
let _isParentOf = (parent, link) => {
    let p;
    while (p = link.parent) {
        if (p === parent) {
            return true;
        }
        link = p;
    }
    return false;
};
export default class OWebPager extends OWebEvent {
    constructor(app_context) {
        super();
        this.app_context = app_context;
        this._pages = {};
        this._links = [];
        this._links_flattened = [];
        console.log("[OWebPager] ready!");
    }
    getLinks() {
        return this._links;
    }
    getPage(name) {
        let page = this._pages[name];
        if (undefined === page) {
            throw new Error(`[OWebPager] the page "${name}" is not defined.`);
        }
        return page;
    }
    getActivePage() {
        if (!this._active_page) {
            console.warn("[OWebPager] no active page");
        }
        return this._active_page;
    }
    getPageList() {
        return Object.create(this._pages);
    }
    registerPage(page) {
        let name = page.name;
        if (name in this._pages) {
            console.warn(`[OWebPager] page "${name}" will be redefined.`);
        }
        this._pages[name] = page;
        let links = page.getLinks();
        Array.prototype.push.apply(this._links, links);
        return this._registerLinks(links, page);
    }
    _registerLinks(links, page, parent) {
        let router = this.app_context.router;
        for (let i = 0; i < links.length; i++) {
            let link = links[i];
            link.id = ++linkId;
            link.parent = parent;
            link.href = router.pathToURL(link.path).href;
            link.active = false;
            link.active_child = false;
            link.require_login = link.require_login || false;
            link.show = link.show !== false;
            this._links_flattened.push(link);
            this._addRoute(link, page);
            if (link.sub && link.sub.length) {
                this._registerLinks(link.sub, page, link);
            }
        }
        return this;
    }
    _addRoute(link, page) {
        let ctx = this;
        this.app_context.router.on(link.path, link.options || {}, (routeContext) => {
            console.log("[OWebPager] page link match ->", link, page, routeContext);
            if (link.require_login && !ctx.app_context.userVerified()) {
                return routeContext.stop() && ctx.app_context.showLoginPage();
            }
            let p = ctx._active_page;
            p && p.onPageClose && p.onPageClose(routeContext);
            page.onPageOpen && page.onPageOpen(routeContext);
            ctx._setActivePage(page)
                ._setActiveLink(link);
        });
        return this;
    }
    _setActiveLink(link) {
        let links = this._links_flattened;
        this._active_link = link;
        for (let i = 0; i < links.length; i++) {
            let c = links[i];
            c.active = link.id === c.id;
            c.active_child = !c.active && _isParentOf(c, link);
        }
        return this;
    }
    _setActivePage(newPage) {
        let oldPage = this._active_page;
        if (oldPage !== newPage) {
            console.log(`[OWebPager] page changing ->`, newPage, oldPage);
            this._active_page = newPage;
            this.trigger(OWebPager.EVT_PAGE_CHANGE, [oldPage, newPage]);
        }
        else {
            console.log(`[OWebPager] same page ->`, oldPage, newPage);
        }
        return this;
    }
}
OWebPager.SELF = "OWebPager";
OWebPager.EVT_PAGE_CHANGE = "OWebPager:page_change";
//# sourceMappingURL=data:application/json;base64,