import OWebEvent from "../OWebEvent";
export default class OWebPassword extends OWebEvent {
    constructor(app_context) {
        super();
        this.app_context = app_context;
    }
    stepStart(form) {
        let ofv = this.app_context.getFormValidator(form, ["phone"]), formData;
        if (ofv.validate()) {
            formData = ofv.getFormData(["phone", "cc2"]);
            formData.set("step", String(OWebPassword.PASS_EDIT_STEP_START));
            this._sendForm(form, formData, OWebPassword.PASS_EDIT_STEP_VALIDATE);
        }
    }
    stepValidate(form) {
        let ofv = this.app_context.getFormValidator(form, ["code"]);
        if (ofv.validate()) {
            this._sendForm(form, {
                "step": OWebPassword.PASS_EDIT_STEP_VALIDATE,
                "code": ofv.getField("code")
            }, OWebPassword.PASS_EDIT_STEP_END);
        }
    }
    stepEnd(form) {
        let required = ["pass", "vpass"], ofv = this.app_context.getFormValidator(form, required), formData;
        if (ofv.validate()) {
            formData = ofv.getFormData(required);
            formData.set("step", String(OWebPassword.PASS_EDIT_STEP_END));
            this._sendForm(form, formData);
        }
    }
    onError(handler) {
        return this.on(OWebPassword.EVT_PASS_EDIT_ERROR, handler);
    }
    onNextStep(handler) {
        return this.on(OWebPassword.EVT_PASS_EDIT_NEXT_STEP, handler);
    }
    onSuccess(handler) {
        return this.on(OWebPassword.EVT_PASS_EDIT_SUCCESS, handler);
    }
    _sendForm(form, data, next_step) {
        let m = this, url = m.app_context.url.get("OZ_SERVER_PASS_EDIT_SERVICE");
        m.app_context.request("POST", url, data, function (response) {
            if (next_step) {
                m.trigger(OWebPassword.EVT_PASS_EDIT_NEXT_STEP, [response, next_step]);
            }
            else {
                m.trigger(OWebPassword.EVT_PASS_EDIT_SUCCESS, [response]);
            }
        }, function (response) {
            m.trigger(OWebPassword.EVT_PASS_EDIT_ERROR, [response]);
        }, true);
    }
}
OWebPassword.PASS_EDIT_STEP_START = 1;
OWebPassword.PASS_EDIT_STEP_VALIDATE = 2;
OWebPassword.PASS_EDIT_STEP_END = 3;
OWebPassword.EVT_PASS_EDIT_NEXT_STEP = "OWebPassword:next_step";
OWebPassword.EVT_PASS_EDIT_SUCCESS = "OWebPassword:success";
OWebPassword.EVT_PASS_EDIT_ERROR = "OWebPassword:error";
OWebPassword.SELF = "OWebPassword";
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYlBhc3N3b3JkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3BsdWdpbnMvT1dlYlBhc3N3b3JkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sU0FBUyxNQUFNLGNBQWMsQ0FBQztBQUVyQyxNQUFNLENBQUMsT0FBTyxtQkFBb0IsU0FBUSxTQUFTO0lBV2xELFlBQTZCLFdBQW9CO1FBQ2hELEtBQUssRUFBRSxDQUFDO1FBRG9CLGdCQUFXLEdBQVgsV0FBVyxDQUFTO0lBRWpELENBQUM7SUFFRCxTQUFTLENBQUMsSUFBcUI7UUFDOUIsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUMzRCxRQUFRLENBQUM7UUFFVixJQUFJLEdBQUcsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUNuQixRQUFRLEdBQUcsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO1lBQzdDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDO1lBQ2hFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxZQUFZLENBQUMsdUJBQXVCLENBQUMsQ0FBQztTQUNyRTtJQUNGLENBQUM7SUFFRCxZQUFZLENBQUMsSUFBcUI7UUFDakMsSUFBSSxHQUFHLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBRTVELElBQUksR0FBRyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ25CLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFO2dCQUNwQixNQUFNLEVBQUUsWUFBWSxDQUFDLHVCQUF1QjtnQkFDNUMsTUFBTSxFQUFFLEdBQUcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO2FBQzVCLEVBQUUsWUFBWSxDQUFDLGtCQUFrQixDQUFDLENBQUM7U0FDcEM7SUFFRixDQUFDO0lBRUQsT0FBTyxDQUFDLElBQXFCO1FBQzVCLElBQUksUUFBUSxHQUFHLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxFQUMvQixHQUFHLEdBQVEsSUFBSSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsUUFBUSxDQUFDLEVBQzVELFFBQVEsQ0FBQztRQUVWLElBQUksR0FBRyxDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ25CLFFBQVEsR0FBRyxHQUFHLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3JDLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxZQUFZLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO1lBRTlELElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQy9CO0lBQ0YsQ0FBQztJQUVELE9BQU8sQ0FBQyxPQUF5QztRQUNoRCxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLG1CQUFtQixFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRCxVQUFVLENBQUMsT0FBdUQ7UUFDakUsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyx1QkFBdUIsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRUQsU0FBUyxDQUFDLE9BQXlDO1FBQ2xELE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMscUJBQXFCLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVELFNBQVMsQ0FBQyxJQUFxQixFQUFFLElBQVMsRUFBRSxTQUFrQjtRQUM3RCxJQUFJLENBQUMsR0FBSyxJQUFJLEVBQ2IsR0FBRyxHQUFHLENBQUMsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1FBRTVELENBQUMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsSUFBSSxFQUFFLFVBQVUsUUFBYTtZQUMvRCxJQUFJLFNBQVMsRUFBRTtnQkFDZCxDQUFDLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyx1QkFBdUIsRUFBRSxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO2FBQ3ZFO2lCQUFNO2dCQUNOLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLHFCQUFxQixFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQzthQUMxRDtRQUNGLENBQUMsRUFBRSxVQUFVLFFBQWE7WUFDekIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBQ3pELENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNWLENBQUM7O0FBMUVlLGlDQUFvQixHQUFNLENBQUMsQ0FBQztBQUM1QixvQ0FBdUIsR0FBRyxDQUFDLENBQUM7QUFDNUIsK0JBQWtCLEdBQVEsQ0FBQyxDQUFDO0FBRTVCLG9DQUF1QixHQUFHLHdCQUF3QixDQUFDO0FBQ25ELGtDQUFxQixHQUFLLHNCQUFzQixDQUFDO0FBQ2pELGdDQUFtQixHQUFPLG9CQUFvQixDQUFDO0FBQy9DLGlCQUFJLEdBQXNCLGNBQWMsQ0FBQztBQW9FekQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBPV2ViQXBwIGZyb20gXCIuLi9PV2ViQXBwXCI7XHJcbmltcG9ydCB7aUNvbVJlc3BvbnNlfSBmcm9tIFwiLi4vT1dlYkNvbVwiO1xyXG5pbXBvcnQgT1dlYkV2ZW50IGZyb20gXCIuLi9PV2ViRXZlbnRcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9XZWJQYXNzd29yZCBleHRlbmRzIE9XZWJFdmVudCB7XHJcblxyXG5cdHN0YXRpYyByZWFkb25seSBQQVNTX0VESVRfU1RFUF9TVEFSVCAgICA9IDE7XHJcblx0c3RhdGljIHJlYWRvbmx5IFBBU1NfRURJVF9TVEVQX1ZBTElEQVRFID0gMjtcclxuXHRzdGF0aWMgcmVhZG9ubHkgUEFTU19FRElUX1NURVBfRU5EICAgICAgPSAzO1xyXG5cclxuXHRzdGF0aWMgcmVhZG9ubHkgRVZUX1BBU1NfRURJVF9ORVhUX1NURVAgPSBcIk9XZWJQYXNzd29yZDpuZXh0X3N0ZXBcIjtcclxuXHRzdGF0aWMgcmVhZG9ubHkgRVZUX1BBU1NfRURJVF9TVUNDRVNTICAgPSBcIk9XZWJQYXNzd29yZDpzdWNjZXNzXCI7XHJcblx0c3RhdGljIHJlYWRvbmx5IEVWVF9QQVNTX0VESVRfRVJST1IgICAgID0gXCJPV2ViUGFzc3dvcmQ6ZXJyb3JcIjtcclxuXHRzdGF0aWMgcmVhZG9ubHkgU0VMRiAgICAgICAgICAgICAgICAgICAgPSBcIk9XZWJQYXNzd29yZFwiO1xyXG5cclxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGFwcF9jb250ZXh0OiBPV2ViQXBwKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cdH1cclxuXHJcblx0c3RlcFN0YXJ0KGZvcm06IEhUTUxGb3JtRWxlbWVudCkge1xyXG5cdFx0bGV0IG9mdiA9IHRoaXMuYXBwX2NvbnRleHQuZ2V0Rm9ybVZhbGlkYXRvcihmb3JtLCBbXCJwaG9uZVwiXSksXHJcblx0XHRcdGZvcm1EYXRhO1xyXG5cclxuXHRcdGlmIChvZnYudmFsaWRhdGUoKSkge1xyXG5cdFx0XHRmb3JtRGF0YSA9IG9mdi5nZXRGb3JtRGF0YShbXCJwaG9uZVwiLCBcImNjMlwiXSk7XHJcblx0XHRcdGZvcm1EYXRhLnNldChcInN0ZXBcIiwgU3RyaW5nKE9XZWJQYXNzd29yZC5QQVNTX0VESVRfU1RFUF9TVEFSVCkpO1xyXG5cdFx0XHR0aGlzLl9zZW5kRm9ybShmb3JtLCBmb3JtRGF0YSwgT1dlYlBhc3N3b3JkLlBBU1NfRURJVF9TVEVQX1ZBTElEQVRFKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHN0ZXBWYWxpZGF0ZShmb3JtOiBIVE1MRm9ybUVsZW1lbnQpIHtcclxuXHRcdGxldCBvZnYgPSB0aGlzLmFwcF9jb250ZXh0LmdldEZvcm1WYWxpZGF0b3IoZm9ybSwgW1wiY29kZVwiXSk7XHJcblxyXG5cdFx0aWYgKG9mdi52YWxpZGF0ZSgpKSB7XHJcblx0XHRcdHRoaXMuX3NlbmRGb3JtKGZvcm0sIHtcclxuXHRcdFx0XHRcInN0ZXBcIjogT1dlYlBhc3N3b3JkLlBBU1NfRURJVF9TVEVQX1ZBTElEQVRFLFxyXG5cdFx0XHRcdFwiY29kZVwiOiBvZnYuZ2V0RmllbGQoXCJjb2RlXCIpXHJcblx0XHRcdH0sIE9XZWJQYXNzd29yZC5QQVNTX0VESVRfU1RFUF9FTkQpO1xyXG5cdFx0fVxyXG5cclxuXHR9XHJcblxyXG5cdHN0ZXBFbmQoZm9ybTogSFRNTEZvcm1FbGVtZW50KSB7XHJcblx0XHRsZXQgcmVxdWlyZWQgPSBbXCJwYXNzXCIsIFwidnBhc3NcIl0sXHJcblx0XHRcdG9mdiAgICAgID0gdGhpcy5hcHBfY29udGV4dC5nZXRGb3JtVmFsaWRhdG9yKGZvcm0sIHJlcXVpcmVkKSxcclxuXHRcdFx0Zm9ybURhdGE7XHJcblxyXG5cdFx0aWYgKG9mdi52YWxpZGF0ZSgpKSB7XHJcblx0XHRcdGZvcm1EYXRhID0gb2Z2LmdldEZvcm1EYXRhKHJlcXVpcmVkKTtcclxuXHRcdFx0Zm9ybURhdGEuc2V0KFwic3RlcFwiLCBTdHJpbmcoT1dlYlBhc3N3b3JkLlBBU1NfRURJVF9TVEVQX0VORCkpO1xyXG5cclxuXHRcdFx0dGhpcy5fc2VuZEZvcm0oZm9ybSwgZm9ybURhdGEpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0b25FcnJvcihoYW5kbGVyOiAocmVzcG9uc2U6IGlDb21SZXNwb25zZSkgPT4gdm9pZCk6dGhpcyB7XHJcblx0XHRyZXR1cm4gdGhpcy5vbihPV2ViUGFzc3dvcmQuRVZUX1BBU1NfRURJVF9FUlJPUiwgaGFuZGxlcik7XHJcblx0fVxyXG5cclxuXHRvbk5leHRTdGVwKGhhbmRsZXI6IChyZXNwb25zZTogaUNvbVJlc3BvbnNlLCBzdGVwOiBudW1iZXIpID0+IHZvaWQpOnRoaXMge1xyXG5cdFx0cmV0dXJuIHRoaXMub24oT1dlYlBhc3N3b3JkLkVWVF9QQVNTX0VESVRfTkVYVF9TVEVQLCBoYW5kbGVyKTtcclxuXHR9XHJcblxyXG5cdG9uU3VjY2VzcyhoYW5kbGVyOiAocmVzcG9uc2U6IGlDb21SZXNwb25zZSkgPT4gdm9pZCkgOnRoaXN7XHJcblx0XHRyZXR1cm4gdGhpcy5vbihPV2ViUGFzc3dvcmQuRVZUX1BBU1NfRURJVF9TVUNDRVNTLCBoYW5kbGVyKTtcclxuXHR9XHJcblxyXG5cdF9zZW5kRm9ybShmb3JtOiBIVE1MRm9ybUVsZW1lbnQsIGRhdGE6IGFueSwgbmV4dF9zdGVwPzogbnVtYmVyKSB7XHJcblx0XHRsZXQgbSAgID0gdGhpcyxcclxuXHRcdFx0dXJsID0gbS5hcHBfY29udGV4dC51cmwuZ2V0KFwiT1pfU0VSVkVSX1BBU1NfRURJVF9TRVJWSUNFXCIpO1xyXG5cclxuXHRcdG0uYXBwX2NvbnRleHQucmVxdWVzdChcIlBPU1RcIiwgdXJsLCBkYXRhLCBmdW5jdGlvbiAocmVzcG9uc2U6IGFueSkge1xyXG5cdFx0XHRpZiAobmV4dF9zdGVwKSB7XHJcblx0XHRcdFx0bS50cmlnZ2VyKE9XZWJQYXNzd29yZC5FVlRfUEFTU19FRElUX05FWFRfU1RFUCwgW3Jlc3BvbnNlLCBuZXh0X3N0ZXBdKTtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRtLnRyaWdnZXIoT1dlYlBhc3N3b3JkLkVWVF9QQVNTX0VESVRfU1VDQ0VTUywgW3Jlc3BvbnNlXSk7XHJcblx0XHRcdH1cclxuXHRcdH0sIGZ1bmN0aW9uIChyZXNwb25zZTogYW55KSB7XHJcblx0XHRcdG0udHJpZ2dlcihPV2ViUGFzc3dvcmQuRVZUX1BBU1NfRURJVF9FUlJPUiwgW3Jlc3BvbnNlXSk7XHJcblx0XHR9LCB0cnVlKTtcclxuXHR9XHJcbn07XHJcbiJdfQ==