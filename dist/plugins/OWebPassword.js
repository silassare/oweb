import OWebEvent from '../OWebEvent';
import { id } from '../utils';
import { ozNet } from '../ozone';
let OWebPassword = /** @class */ (() => {
    class OWebPassword extends OWebEvent {
        constructor(appContext) {
            super();
            this.appContext = appContext;
        }
        editPass(data) {
            return this._sendForm({
                action: 'edit',
                cpass: data.cpass,
                vpass: data.vpass,
                pass: data.pass,
            });
        }
        editPassAdmin(data) {
            return this._sendForm({
                action: 'edit',
                uid: data.uid,
                pass: data.pass,
                vpass: data.vpass,
            });
        }
        _sendForm(data) {
            const m = this, url = m.appContext.url.get('OZ_SERVER_PASSWORD_SERVICE'), net = ozNet(url, {
                method: 'POST',
                body: data,
                isGoodNews(response) {
                    return Boolean(response.json && response.json.error === 0);
                },
            });
            return net
                .onGoodNews(function (response) {
                m.trigger(OWebPassword.EVT_PASS_EDIT_SUCCESS, [response]);
            })
                .onBadNews(function (response) {
                m.trigger(OWebPassword.EVT_PASS_EDIT_ERROR, [response]);
            })
                .send();
        }
        onError(handler) {
            return this.on(OWebPassword.EVT_PASS_EDIT_ERROR, handler);
        }
        onSuccess(handler) {
            return this.on(OWebPassword.EVT_PASS_EDIT_SUCCESS, handler);
        }
    }
    OWebPassword.SELF = id();
    OWebPassword.EVT_PASS_EDIT_SUCCESS = id();
    OWebPassword.EVT_PASS_EDIT_ERROR = id();
    return OWebPassword;
})();
export default OWebPassword;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYlBhc3N3b3JkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3BsdWdpbnMvT1dlYlBhc3N3b3JkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sU0FBUyxNQUFNLGNBQWMsQ0FBQztBQUNyQyxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRTlCLE9BQU8sRUFBaUIsS0FBSyxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRWhEO0lBQUEsTUFBcUIsWUFBYSxTQUFRLFNBQVM7UUFLbEQsWUFBNkIsVUFBbUI7WUFDL0MsS0FBSyxFQUFFLENBQUM7WUFEb0IsZUFBVSxHQUFWLFVBQVUsQ0FBUztRQUVoRCxDQUFDO1FBRUQsUUFBUSxDQUFDLElBQW9EO1lBQzVELE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztnQkFDckIsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO2dCQUNqQixLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7Z0JBQ2pCLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTthQUNmLENBQUMsQ0FBQztRQUNKLENBQUM7UUFFRCxhQUFhLENBQUMsSUFBa0Q7WUFDL0QsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO2dCQUNyQixNQUFNLEVBQUUsTUFBTTtnQkFDZCxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7Z0JBQ2IsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO2dCQUNmLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSzthQUNqQixDQUFDLENBQUM7UUFDSixDQUFDO1FBRU8sU0FBUyxDQUFDLElBQXVCO1lBQ3hDLE1BQU0sQ0FBQyxHQUFHLElBQUksRUFDYixHQUFHLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLDRCQUE0QixDQUFDLEVBQ3hELEdBQUcsR0FBRyxLQUFLLENBQXFCLEdBQUcsRUFBRTtnQkFDcEMsTUFBTSxFQUFFLE1BQU07Z0JBQ2QsSUFBSSxFQUFFLElBQUk7Z0JBQ1YsVUFBVSxDQUFDLFFBQVE7b0JBQ2xCLE9BQU8sT0FBTyxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQzVELENBQUM7YUFDRCxDQUFDLENBQUM7WUFFSixPQUFPLEdBQUc7aUJBQ1IsVUFBVSxDQUFDLFVBQVUsUUFBUTtnQkFDN0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMscUJBQXFCLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQzNELENBQUMsQ0FBQztpQkFDRCxTQUFTLENBQUMsVUFBVSxRQUFRO2dCQUM1QixDQUFDLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDekQsQ0FBQyxDQUFDO2lCQUNELElBQUksRUFBRSxDQUFDO1FBQ1YsQ0FBQztRQUVELE9BQU8sQ0FDTixPQUdTO1lBRVQsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxtQkFBbUIsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUMzRCxDQUFDO1FBRUQsU0FBUyxDQUNSLE9BR1M7WUFFVCxPQUFPLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLHFCQUFxQixFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQzdELENBQUM7O0lBL0RlLGlCQUFJLEdBQUcsRUFBRSxFQUFFLENBQUM7SUFDWixrQ0FBcUIsR0FBRyxFQUFFLEVBQUUsQ0FBQztJQUM3QixnQ0FBbUIsR0FBRyxFQUFFLEVBQUUsQ0FBQztJQThENUMsbUJBQUM7S0FBQTtlQWpFb0IsWUFBWSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBPV2ViQXBwIGZyb20gJy4uL09XZWJBcHAnO1xyXG5pbXBvcnQgT1dlYkV2ZW50IGZyb20gJy4uL09XZWJFdmVudCc7XHJcbmltcG9ydCB7IGlkIH0gZnJvbSAnLi4vdXRpbHMnO1xyXG5pbXBvcnQgeyBJTmV0UmVzcG9uc2UgfSBmcm9tICcuLi9PV2ViTmV0JztcclxuaW1wb3J0IHsgSU9ab25lQXBpSlNPTiwgb3pOZXQgfSBmcm9tICcuLi9vem9uZSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPV2ViUGFzc3dvcmQgZXh0ZW5kcyBPV2ViRXZlbnQge1xyXG5cdHN0YXRpYyByZWFkb25seSBTRUxGID0gaWQoKTtcclxuXHRzdGF0aWMgcmVhZG9ubHkgRVZUX1BBU1NfRURJVF9TVUNDRVNTID0gaWQoKTtcclxuXHRzdGF0aWMgcmVhZG9ubHkgRVZUX1BBU1NfRURJVF9FUlJPUiA9IGlkKCk7XHJcblxyXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgYXBwQ29udGV4dDogT1dlYkFwcCkge1xyXG5cdFx0c3VwZXIoKTtcclxuXHR9XHJcblxyXG5cdGVkaXRQYXNzKGRhdGE6IHsgY3Bhc3M6IHN0cmluZzsgcGFzczogc3RyaW5nOyB2cGFzczogc3RyaW5nIH0pIHtcclxuXHRcdHJldHVybiB0aGlzLl9zZW5kRm9ybSh7XHJcblx0XHRcdGFjdGlvbjogJ2VkaXQnLFxyXG5cdFx0XHRjcGFzczogZGF0YS5jcGFzcyxcclxuXHRcdFx0dnBhc3M6IGRhdGEudnBhc3MsXHJcblx0XHRcdHBhc3M6IGRhdGEucGFzcyxcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0ZWRpdFBhc3NBZG1pbihkYXRhOiB7IHVpZDogc3RyaW5nOyBwYXNzOiBzdHJpbmc7IHZwYXNzOiBzdHJpbmcgfSkge1xyXG5cdFx0cmV0dXJuIHRoaXMuX3NlbmRGb3JtKHtcclxuXHRcdFx0YWN0aW9uOiAnZWRpdCcsXHJcblx0XHRcdHVpZDogZGF0YS51aWQsXHJcblx0XHRcdHBhc3M6IGRhdGEucGFzcyxcclxuXHRcdFx0dnBhc3M6IGRhdGEudnBhc3MsXHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgX3NlbmRGb3JtKGRhdGE6IEZvcm1EYXRhIHwgb2JqZWN0KSB7XHJcblx0XHRjb25zdCBtID0gdGhpcyxcclxuXHRcdFx0dXJsID0gbS5hcHBDb250ZXh0LnVybC5nZXQoJ09aX1NFUlZFUl9QQVNTV09SRF9TRVJWSUNFJyksXHJcblx0XHRcdG5ldCA9IG96TmV0PElPWm9uZUFwaUpTT048YW55Pj4odXJsLCB7XHJcblx0XHRcdFx0bWV0aG9kOiAnUE9TVCcsXHJcblx0XHRcdFx0Ym9keTogZGF0YSxcclxuXHRcdFx0XHRpc0dvb2ROZXdzKHJlc3BvbnNlKSB7XHJcblx0XHRcdFx0XHRyZXR1cm4gQm9vbGVhbihyZXNwb25zZS5qc29uICYmIHJlc3BvbnNlLmpzb24uZXJyb3IgPT09IDApO1xyXG5cdFx0XHRcdH0sXHJcblx0XHRcdH0pO1xyXG5cclxuXHRcdHJldHVybiBuZXRcclxuXHRcdFx0Lm9uR29vZE5ld3MoZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcblx0XHRcdFx0bS50cmlnZ2VyKE9XZWJQYXNzd29yZC5FVlRfUEFTU19FRElUX1NVQ0NFU1MsIFtyZXNwb25zZV0pO1xyXG5cdFx0XHR9KVxyXG5cdFx0XHQub25CYWROZXdzKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG5cdFx0XHRcdG0udHJpZ2dlcihPV2ViUGFzc3dvcmQuRVZUX1BBU1NfRURJVF9FUlJPUiwgW3Jlc3BvbnNlXSk7XHJcblx0XHRcdH0pXHJcblx0XHRcdC5zZW5kKCk7XHJcblx0fVxyXG5cclxuXHRvbkVycm9yKFxyXG5cdFx0aGFuZGxlcjogKFxyXG5cdFx0XHR0aGlzOiB0aGlzLFxyXG5cdFx0XHRyZXNwb25zZTogSU5ldFJlc3BvbnNlPElPWm9uZUFwaUpTT048YW55Pj4sXHJcblx0XHQpID0+IHZvaWQsXHJcblx0KTogdGhpcyB7XHJcblx0XHRyZXR1cm4gdGhpcy5vbihPV2ViUGFzc3dvcmQuRVZUX1BBU1NfRURJVF9FUlJPUiwgaGFuZGxlcik7XHJcblx0fVxyXG5cclxuXHRvblN1Y2Nlc3MoXHJcblx0XHRoYW5kbGVyOiAoXHJcblx0XHRcdHRoaXM6IHRoaXMsXHJcblx0XHRcdHJlc3BvbnNlOiBJTmV0UmVzcG9uc2U8SU9ab25lQXBpSlNPTjxhbnk+PixcclxuXHRcdCkgPT4gdm9pZCxcclxuXHQpOiB0aGlzIHtcclxuXHRcdHJldHVybiB0aGlzLm9uKE9XZWJQYXNzd29yZC5FVlRfUEFTU19FRElUX1NVQ0NFU1MsIGhhbmRsZXIpO1xyXG5cdH1cclxufVxyXG4iXX0=