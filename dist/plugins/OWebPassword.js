import OWebEvent from '../OWebEvent';
import { id } from '../utils/Utils';
let OWebPassword = /** @class */ (() => {
    class OWebPassword extends OWebEvent {
        constructor(appContext) {
            super();
            this.appContext = appContext;
        }
        editPass(data) {
            return this._sendForm({
                action: 'edit',
                cpass: data.cpass,
                vpass: data.vpass,
                pass: data.pass,
            });
        }
        editPassAdmin(data) {
            return this._sendForm({
                action: 'edit',
                uid: data.uid,
                pass: data.pass,
                vpass: data.vpass,
            });
        }
        _sendForm(data) {
            const m = this, url = m.appContext.url.get('OZ_SERVER_PASSWORD_SERVICE'), net = m.appContext.net(url, {
                method: 'POST',
                body: data,
                isGoodNews(response) {
                    return Boolean(response.json && response.json.error === 0);
                },
            });
            return net
                .onGoodNews(function (response) {
                m.trigger(OWebPassword.EVT_PASS_EDIT_SUCCESS, [response]);
            })
                .onBadNews(function (response) {
                m.trigger(OWebPassword.EVT_PASS_EDIT_ERROR, [response]);
            })
                .send();
        }
        onError(handler) {
            return this.on(OWebPassword.EVT_PASS_EDIT_ERROR, handler);
        }
        onSuccess(handler) {
            return this.on(OWebPassword.EVT_PASS_EDIT_SUCCESS, handler);
        }
    }
    OWebPassword.SELF = id();
    OWebPassword.EVT_PASS_EDIT_SUCCESS = id();
    OWebPassword.EVT_PASS_EDIT_ERROR = id();
    return OWebPassword;
})();
export default OWebPassword;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYlBhc3N3b3JkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3BsdWdpbnMvT1dlYlBhc3N3b3JkLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sU0FBUyxNQUFNLGNBQWMsQ0FBQztBQUNyQyxPQUFPLEVBQUUsRUFBRSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFJcEM7SUFBQSxNQUFxQixZQUFhLFNBQVEsU0FBUztRQUtsRCxZQUE2QixVQUFtQjtZQUMvQyxLQUFLLEVBQUUsQ0FBQztZQURvQixlQUFVLEdBQVYsVUFBVSxDQUFTO1FBRWhELENBQUM7UUFFRCxRQUFRLENBQUMsSUFBb0Q7WUFDNUQsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO2dCQUNyQixNQUFNLEVBQUUsTUFBTTtnQkFDZCxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUs7Z0JBQ2pCLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSztnQkFDakIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO2FBQ2YsQ0FBQyxDQUFDO1FBQ0osQ0FBQztRQUVELGFBQWEsQ0FBQyxJQUFrRDtZQUMvRCxPQUFPLElBQUksQ0FBQyxTQUFTLENBQUM7Z0JBQ3JCLE1BQU0sRUFBRSxNQUFNO2dCQUNkLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRztnQkFDYixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7Z0JBQ2YsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLO2FBQ2pCLENBQUMsQ0FBQztRQUNKLENBQUM7UUFFTyxTQUFTLENBQUMsSUFBdUI7WUFDeEMsTUFBTSxDQUFDLEdBQUcsSUFBSSxFQUNiLEdBQUcsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsNEJBQTRCLENBQUMsRUFDeEQsR0FBRyxHQUFHLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFxQixHQUFHLEVBQUU7Z0JBQy9DLE1BQU0sRUFBRSxNQUFNO2dCQUNkLElBQUksRUFBRSxJQUFJO2dCQUNWLFVBQVUsQ0FBQyxRQUFRO29CQUNsQixPQUFPLE9BQU8sQ0FBQyxRQUFRLENBQUMsSUFBSSxJQUFJLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUM1RCxDQUFDO2FBQ0QsQ0FBQyxDQUFDO1lBRUosT0FBTyxHQUFHO2lCQUNSLFVBQVUsQ0FBQyxVQUFVLFFBQVE7Z0JBQzdCLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLHFCQUFxQixFQUFFLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztZQUMzRCxDQUFDLENBQUM7aUJBQ0QsU0FBUyxDQUFDLFVBQVUsUUFBUTtnQkFDNUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ3pELENBQUMsQ0FBQztpQkFDRCxJQUFJLEVBQUUsQ0FBQztRQUNWLENBQUM7UUFFRCxPQUFPLENBQ04sT0FHUztZQUVULE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsbUJBQW1CLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDM0QsQ0FBQztRQUVELFNBQVMsQ0FDUixPQUdTO1lBRVQsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxxQkFBcUIsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUM3RCxDQUFDOztJQS9EZSxpQkFBSSxHQUFHLEVBQUUsRUFBRSxDQUFDO0lBQ1osa0NBQXFCLEdBQUcsRUFBRSxFQUFFLENBQUM7SUFDN0IsZ0NBQW1CLEdBQUcsRUFBRSxFQUFFLENBQUM7SUE4RDVDLG1CQUFDO0tBQUE7ZUFqRW9CLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgT1dlYkFwcCBmcm9tICcuLi9PV2ViQXBwJztcclxuaW1wb3J0IE9XZWJFdmVudCBmcm9tICcuLi9PV2ViRXZlbnQnO1xyXG5pbXBvcnQgeyBpZCB9IGZyb20gJy4uL3V0aWxzL1V0aWxzJztcclxuaW1wb3J0IHsgSU5ldFJlc3BvbnNlIH0gZnJvbSAnLi4vT1dlYk5ldCc7XHJcbmltcG9ydCB7IElPWm9uZUFwaUpTT04gfSBmcm9tICcuLi9vem9uZSc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBPV2ViUGFzc3dvcmQgZXh0ZW5kcyBPV2ViRXZlbnQge1xyXG5cdHN0YXRpYyByZWFkb25seSBTRUxGID0gaWQoKTtcclxuXHRzdGF0aWMgcmVhZG9ubHkgRVZUX1BBU1NfRURJVF9TVUNDRVNTID0gaWQoKTtcclxuXHRzdGF0aWMgcmVhZG9ubHkgRVZUX1BBU1NfRURJVF9FUlJPUiA9IGlkKCk7XHJcblxyXG5cdGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgYXBwQ29udGV4dDogT1dlYkFwcCkge1xyXG5cdFx0c3VwZXIoKTtcclxuXHR9XHJcblxyXG5cdGVkaXRQYXNzKGRhdGE6IHsgY3Bhc3M6IHN0cmluZzsgcGFzczogc3RyaW5nOyB2cGFzczogc3RyaW5nIH0pIHtcclxuXHRcdHJldHVybiB0aGlzLl9zZW5kRm9ybSh7XHJcblx0XHRcdGFjdGlvbjogJ2VkaXQnLFxyXG5cdFx0XHRjcGFzczogZGF0YS5jcGFzcyxcclxuXHRcdFx0dnBhc3M6IGRhdGEudnBhc3MsXHJcblx0XHRcdHBhc3M6IGRhdGEucGFzcyxcclxuXHRcdH0pO1xyXG5cdH1cclxuXHJcblx0ZWRpdFBhc3NBZG1pbihkYXRhOiB7IHVpZDogc3RyaW5nOyBwYXNzOiBzdHJpbmc7IHZwYXNzOiBzdHJpbmcgfSkge1xyXG5cdFx0cmV0dXJuIHRoaXMuX3NlbmRGb3JtKHtcclxuXHRcdFx0YWN0aW9uOiAnZWRpdCcsXHJcblx0XHRcdHVpZDogZGF0YS51aWQsXHJcblx0XHRcdHBhc3M6IGRhdGEucGFzcyxcclxuXHRcdFx0dnBhc3M6IGRhdGEudnBhc3MsXHJcblx0XHR9KTtcclxuXHR9XHJcblxyXG5cdHByaXZhdGUgX3NlbmRGb3JtKGRhdGE6IEZvcm1EYXRhIHwgb2JqZWN0KSB7XHJcblx0XHRjb25zdCBtID0gdGhpcyxcclxuXHRcdFx0dXJsID0gbS5hcHBDb250ZXh0LnVybC5nZXQoJ09aX1NFUlZFUl9QQVNTV09SRF9TRVJWSUNFJyksXHJcblx0XHRcdG5ldCA9IG0uYXBwQ29udGV4dC5uZXQ8SU9ab25lQXBpSlNPTjxhbnk+Pih1cmwsIHtcclxuXHRcdFx0XHRtZXRob2Q6ICdQT1NUJyxcclxuXHRcdFx0XHRib2R5OiBkYXRhLFxyXG5cdFx0XHRcdGlzR29vZE5ld3MocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRcdHJldHVybiBCb29sZWFuKHJlc3BvbnNlLmpzb24gJiYgcmVzcG9uc2UuanNvbi5lcnJvciA9PT0gMCk7XHJcblx0XHRcdFx0fSxcclxuXHRcdFx0fSk7XHJcblxyXG5cdFx0cmV0dXJuIG5ldFxyXG5cdFx0XHQub25Hb29kTmV3cyhmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuXHRcdFx0XHRtLnRyaWdnZXIoT1dlYlBhc3N3b3JkLkVWVF9QQVNTX0VESVRfU1VDQ0VTUywgW3Jlc3BvbnNlXSk7XHJcblx0XHRcdH0pXHJcblx0XHRcdC5vbkJhZE5ld3MoZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcblx0XHRcdFx0bS50cmlnZ2VyKE9XZWJQYXNzd29yZC5FVlRfUEFTU19FRElUX0VSUk9SLCBbcmVzcG9uc2VdKTtcclxuXHRcdFx0fSlcclxuXHRcdFx0LnNlbmQoKTtcclxuXHR9XHJcblxyXG5cdG9uRXJyb3IoXHJcblx0XHRoYW5kbGVyOiAoXHJcblx0XHRcdHRoaXM6IHRoaXMsXHJcblx0XHRcdHJlc3BvbnNlOiBJTmV0UmVzcG9uc2U8SU9ab25lQXBpSlNPTjxhbnk+PixcclxuXHRcdCkgPT4gdm9pZCxcclxuXHQpOiB0aGlzIHtcclxuXHRcdHJldHVybiB0aGlzLm9uKE9XZWJQYXNzd29yZC5FVlRfUEFTU19FRElUX0VSUk9SLCBoYW5kbGVyKTtcclxuXHR9XHJcblxyXG5cdG9uU3VjY2VzcyhcclxuXHRcdGhhbmRsZXI6IChcclxuXHRcdFx0dGhpczogdGhpcyxcclxuXHRcdFx0cmVzcG9uc2U6IElOZXRSZXNwb25zZTxJT1pvbmVBcGlKU09OPGFueT4+LFxyXG5cdFx0KSA9PiB2b2lkLFxyXG5cdCk6IHRoaXMge1xyXG5cdFx0cmV0dXJuIHRoaXMub24oT1dlYlBhc3N3b3JkLkVWVF9QQVNTX0VESVRfU1VDQ0VTUywgaGFuZGxlcik7XHJcblx0fVxyXG59XHJcbiJdfQ==