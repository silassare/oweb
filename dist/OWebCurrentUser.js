"use strict";
import OWebEvent from "./OWebEvent";
import OWebKeyStorage from "./OWebKeyStorage";
export default class OWebCurrentUser extends OWebEvent {
    constructor(app_context) {
        super();
        this.app_context = app_context;
        this._key_store = new OWebKeyStorage(app_context, OWebCurrentUser.SELF);
        console.log("[OWebCurrentUser] ready!");
    }
    getCurrentUser() {
        let user = this._key_store.getItem("user_data");
        if (user) {
            if ("id" in user) {
                return user;
            }
            else {
                console.error("[OWebCurrentUser] invalid user data!");
            }
        }
        return undefined;
    }
    setCurrentUser(user) {
        console.log("[OWebCurrentUser] setting new user ->", user);
        this._key_store.setItem("user_data", user);
        return this._notifyChange();
    }
    setSessionExpire(expire) {
        this._key_store.setItem("session_expire", expire);
        return this;
    }
    getSessionExpire() {
        let expire = this._key_store.getItem("session_expire");
        return isNaN(expire) ? 0 : expire;
    }
    clear() {
        this._key_store.clear();
        return this._notifyChange();
    }
    _notifyChange() {
        this.trigger(OWebCurrentUser.EVT_USER_INFO_UPDATE, [this]);
        return this;
    }
}
OWebCurrentUser.SELF = "OWebCurrentUser";
OWebCurrentUser.EVT_USER_INFO_UPDATE = "OWebCurrentUser:update";
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYkN1cnJlbnRVc2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL09XZWJDdXJyZW50VXNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFFYixPQUFPLFNBQVMsTUFBTSxhQUFhLENBQUM7QUFFcEMsT0FBTyxjQUFjLE1BQU0sa0JBQWtCLENBQUM7QUFFOUMsTUFBTSxDQUFDLE9BQU8sc0JBQXVCLFNBQVEsU0FBUztJQU1yRCxZQUE2QixXQUFvQjtRQUNoRCxLQUFLLEVBQUUsQ0FBQztRQURvQixnQkFBVyxHQUFYLFdBQVcsQ0FBUztRQUdoRCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksY0FBYyxDQUFDLFdBQVcsRUFBRSxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDeEUsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxjQUFjO1FBQ2IsSUFBSSxJQUFJLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7UUFFaEQsSUFBSSxJQUFJLEVBQUU7WUFDVCxJQUFJLElBQUksSUFBSSxJQUFJLEVBQUU7Z0JBQ2pCLE9BQU8sSUFBSSxDQUFDO2FBQ1o7aUJBQU07Z0JBQ04sT0FBTyxDQUFDLEtBQUssQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO2FBQ3REO1NBQ0Q7UUFFRCxPQUFPLFNBQVMsQ0FBQztJQUNsQixDQUFDO0lBRUQsY0FBYyxDQUFDLElBQVM7UUFDdkIsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1Q0FBdUMsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMzRCxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFM0MsT0FBTyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVELGdCQUFnQixDQUFDLE1BQWM7UUFDOUIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDbEQsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBRUQsZ0JBQWdCO1FBQ2YsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztRQUN2RCxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7SUFDbkMsQ0FBQztJQUVELEtBQUs7UUFDSixJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQzdCLENBQUM7SUFFTyxhQUFhO1FBQ3BCLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLG9CQUFvQixFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUMzRCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7O0FBbkRlLG9CQUFJLEdBQW1CLGlCQUFpQixDQUFDO0FBQ3pDLG9DQUFvQixHQUFHLHdCQUF3QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5pbXBvcnQgT1dlYkV2ZW50IGZyb20gXCIuL09XZWJFdmVudFwiO1xyXG5pbXBvcnQgT1dlYkFwcCBmcm9tIFwiLi9PV2ViQXBwXCI7XHJcbmltcG9ydCBPV2ViS2V5U3RvcmFnZSBmcm9tIFwiLi9PV2ViS2V5U3RvcmFnZVwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT1dlYkN1cnJlbnRVc2VyIGV4dGVuZHMgT1dlYkV2ZW50IHtcclxuXHRzdGF0aWMgcmVhZG9ubHkgU0VMRiAgICAgICAgICAgICAgICAgPSBcIk9XZWJDdXJyZW50VXNlclwiO1xyXG5cdHN0YXRpYyByZWFkb25seSBFVlRfVVNFUl9JTkZPX1VQREFURSA9IFwiT1dlYkN1cnJlbnRVc2VyOnVwZGF0ZVwiO1xyXG5cclxuXHRwcml2YXRlIF9rZXlfc3RvcmU6IE9XZWJLZXlTdG9yYWdlO1xyXG5cclxuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGFwcF9jb250ZXh0OiBPV2ViQXBwKSB7XHJcblx0XHRzdXBlcigpO1xyXG5cclxuXHRcdHRoaXMuX2tleV9zdG9yZSA9IG5ldyBPV2ViS2V5U3RvcmFnZShhcHBfY29udGV4dCwgT1dlYkN1cnJlbnRVc2VyLlNFTEYpO1xyXG5cdFx0Y29uc29sZS5sb2coXCJbT1dlYkN1cnJlbnRVc2VyXSByZWFkeSFcIik7XHJcblx0fVxyXG5cclxuXHRnZXRDdXJyZW50VXNlcigpOiBhbnkge1xyXG5cdFx0bGV0IHVzZXIgPSB0aGlzLl9rZXlfc3RvcmUuZ2V0SXRlbShcInVzZXJfZGF0YVwiKTtcclxuXHJcblx0XHRpZiAodXNlcikge1xyXG5cdFx0XHRpZiAoXCJpZFwiIGluIHVzZXIpIHtcclxuXHRcdFx0XHRyZXR1cm4gdXNlcjtcclxuXHRcdFx0fSBlbHNlIHtcclxuXHRcdFx0XHRjb25zb2xlLmVycm9yKFwiW09XZWJDdXJyZW50VXNlcl0gaW52YWxpZCB1c2VyIGRhdGEhXCIpO1xyXG5cdFx0XHR9XHJcblx0XHR9XHJcblxyXG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcclxuXHR9XHJcblxyXG5cdHNldEN1cnJlbnRVc2VyKHVzZXI6IGFueSk6IHRoaXMge1xyXG5cdFx0Y29uc29sZS5sb2coXCJbT1dlYkN1cnJlbnRVc2VyXSBzZXR0aW5nIG5ldyB1c2VyIC0+XCIsIHVzZXIpO1xyXG5cdFx0dGhpcy5fa2V5X3N0b3JlLnNldEl0ZW0oXCJ1c2VyX2RhdGFcIiwgdXNlcik7XHJcblxyXG5cdFx0cmV0dXJuIHRoaXMuX25vdGlmeUNoYW5nZSgpO1xyXG5cdH1cclxuXHJcblx0c2V0U2Vzc2lvbkV4cGlyZShleHBpcmU6IG51bWJlcik6IHRoaXMge1xyXG5cdFx0dGhpcy5fa2V5X3N0b3JlLnNldEl0ZW0oXCJzZXNzaW9uX2V4cGlyZVwiLCBleHBpcmUpO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG5cclxuXHRnZXRTZXNzaW9uRXhwaXJlKCk6IG51bWJlciB7XHJcblx0XHRsZXQgZXhwaXJlID0gdGhpcy5fa2V5X3N0b3JlLmdldEl0ZW0oXCJzZXNzaW9uX2V4cGlyZVwiKTtcclxuXHRcdHJldHVybiBpc05hTihleHBpcmUpID8gMCA6IGV4cGlyZTtcclxuXHR9XHJcblxyXG5cdGNsZWFyKCk6IHRoaXMge1xyXG5cdFx0dGhpcy5fa2V5X3N0b3JlLmNsZWFyKCk7XHJcblx0XHRyZXR1cm4gdGhpcy5fbm90aWZ5Q2hhbmdlKCk7XHJcblx0fVxyXG5cclxuXHRwcml2YXRlIF9ub3RpZnlDaGFuZ2UoKTogdGhpcyB7XHJcblx0XHR0aGlzLnRyaWdnZXIoT1dlYkN1cnJlbnRVc2VyLkVWVF9VU0VSX0lORk9fVVBEQVRFLCBbdGhpc10pO1xyXG5cdFx0cmV0dXJuIHRoaXM7XHJcblx0fVxyXG59Il19