import { escapeRegExp, isArray, isPlainObject, isString } from './utils';
const tokenTypesRegMap = {
    'num': /\d+/.source,
    'alpha': /[a-zA-Z]+/.source,
    'alpha-fullUrl': /[a-z]+/.source,
    'alpha-l': /[A-Z]+/.source,
    'alpha-num': /[a-zA-Z0-9]+/.source,
    'alpha-num-l': /[a-z0-9]+/.source,
    'alpha-num-fullUrl': /[A-Z0-9]+/.source,
    'any': /[^/]+/.source,
}, tokenReg = /:([a-z][a-z0-9_]*)/i, stringReg = (str) => new RegExp(escapeRegExp(str)), wrapReg = (str, capture = false) => capture ? '(' + str + ')' : '(?:' + str + ')';
export default class OWebRoute {
    path;
    reg;
    tokens;
    action;
    constructor(path, options, action) {
        if (path instanceof RegExp) {
            this.path = path.toString();
            this.reg = path;
            this.tokens = isArray(options) ? options : [];
        }
        else if (isString(path) && path.length) {
            options = (isPlainObject(options) ? options : {});
            const p = OWebRoute.parseDynamicPath(path, options);
            this.path = path;
            this.reg = p.reg;
            this.tokens = p.tokens;
        }
        else {
            throw new TypeError('[OWebRoute] invalid route path, string or RegExp required.');
        }
        if ('function' !== typeof action) {
            throw new TypeError(`[OWebRoute] invalid action type, got "${typeof action}" instead of "function".`);
        }
        this.action = action;
    }
    isDynamic() {
        return this.reg != null;
    }
    getAction() {
        return this.action;
    }
    is(pathname) {
        return this.reg ? this.reg.test(pathname) : this.path === pathname;
    }
    parse(pathname) {
        if (this.isDynamic()) {
            const founds = String(pathname).match(this.reg);
            if (founds) {
                return this.tokens.reduce((acc, key, index) => {
                    acc[key] = founds[index + 1];
                    return acc;
                }, {});
            }
        }
        return {};
    }
    static parseDynamicPath(path, options) {
        const tokens = [];
        let reg = '', _path = path, match;
        while ((match = tokenReg.exec(_path)) != null) {
            const found = match[0], token = match[1], rule = options[token] || 'any', head = _path.slice(0, match.index);
            if (head.length) {
                reg += wrapReg(stringReg(head).source);
            }
            if (typeof rule === 'string' && rule in tokenTypesRegMap) {
                reg += wrapReg(tokenTypesRegMap[rule], true);
            }
            else if (rule instanceof RegExp) {
                reg += wrapReg(rule.source, true);
            }
            else {
                throw new Error(`Invalid rule for token ':${token}' in path '${path}'`);
            }
            tokens.push(token);
            _path = _path.slice(match.index + found.length);
        }
        if (!reg.length) {
            return {
                reg: null,
                tokens,
            };
        }
        if (_path.length) {
            reg += wrapReg(stringReg(_path).source);
        }
        return {
            reg: new RegExp('^' + reg + '$'),
            tokens,
        };
    }
}
//# sourceMappingURL=data:application/json;base64,