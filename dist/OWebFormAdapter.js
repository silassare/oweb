import { extractFieldLabelText, forEach, isArray, isPlainObject, toArray, } from './utils';
import OWebForm from './OWebForm';
export class OWebFormAdapter {
    validators = Object.create({});
    getFieldValidators(fieldName) {
        return this.validators[fieldName] || [];
    }
    pushFieldValidator(fieldName, validator) {
        if (typeof validator === 'string') {
            const fn = OWebForm.getDeclaredValidator(validator);
            if (!fn) {
                throw new Error(`[OWebFormValidator][OWebFormAdapter] validator "${validator}" is not defined can't set for field "${fieldName}".`);
            }
            validator = fn;
        }
        if (!this.validators[fieldName]) {
            this.validators[fieldName] = [];
        }
        this.validators[fieldName].push(validator);
        return this;
    }
}
export class OFormDOMFormAdapter extends OWebFormAdapter {
    form;
    labels = Object.create({});
    formData;
    constructor(form) {
        super();
        this.form = form;
        if (!form || form.nodeName !== 'FORM') {
            throw new Error('[OWebFormValidator][DOMFormAdapter] a valid form element is required.');
        }
        this.form = form;
        this.formData = new FormData(this.form);
        const fo = this.form.querySelectorAll('[data-oweb-form-v]');
        (isArray(fo) ? fo : toArray(fo)).forEach((field) => {
            const name = field.getAttribute('name'), validator = field.getAttribute('data-oweb-form-v');
            if (name && validator) {
                this.pushFieldValidator(name, validator);
            }
        });
    }
    toFormData(fields = []) {
        const fd = new FormData();
        this.formData.forEach(function (value, name) {
            if (!fields.length || fields.indexOf(name) >= 0) {
                fd.append(name, value);
            }
        });
        return fd;
    }
    getFieldValue(name) {
        return this.formData.get(name);
    }
    setFieldValue(name, value) {
        this.formData.set(name, value);
        return this;
    }
    getFieldsNames() {
        const fieldNames = [];
        toArray(this.form.elements).forEach(function formElementsIterator(el) {
            const entry = el;
            if (entry.name !== undefined && fieldNames.indexOf(entry.name) < 0) {
                fieldNames.push(entry.name);
            }
        });
        return fieldNames;
    }
    getFieldLabel(name) {
        if (!this.labels[name]) {
            this.labels[name] = extractFieldLabelText(this.form, name);
        }
        return this.labels[name];
    }
}
export class OFormObjectAdapter extends OWebFormAdapter {
    labels = Object.create({});
    formObj = Object.create({});
    constructor(form) {
        super();
        if (!isPlainObject(form)) {
            throw new Error('[OWebFormValidator][ObjectFormAdapter] a valid form plain object is required.');
        }
        forEach(form, (field, fieldName) => {
            this.formObj[fieldName] = field.value;
            if (field.validator) {
                this.pushFieldValidator(fieldName, field.validator);
            }
            if (field.label) {
                this.labels[fieldName] = field.label;
            }
        });
    }
    toFormData(fields = []) {
        const fd = new FormData();
        forEach(this.formObj, function (value, name) {
            if (!fields.length || fields.indexOf(name) >= 0) {
                if (isArray(value) || value instanceof FileList) {
                    forEach(value, function (val) {
                        fd.append(name, val);
                    });
                }
                else {
                    fd.append(name, value);
                }
            }
        });
        return fd;
    }
    getFieldValue(name) {
        return this.formObj[name];
    }
    setFieldValue(name, value) {
        this.formObj[name] = value;
        return this;
    }
    getFieldsNames() {
        return Object.keys(this.formObj);
    }
    getFieldLabel(name) {
        if (this.labels[name]) {
            return this.labels[name];
        }
        return name;
    }
}
//# sourceMappingURL=data:application/json;base64,