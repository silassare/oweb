import OWebEvent from './OWebEvent';
import { id, _debug, _info } from './utils/Utils';
const wDoc = window.document;
let routeId = 0;
const _isParentOf = (parent, route) => {
    let p;
    // tslint:disable-next-line: no-conditional-assignment
    while ((p = route.parent)) {
        if (p === parent) {
            return true;
        }
        route = p;
    }
    return false;
};
let OWebPager = /** @class */ (() => {
    class OWebPager extends OWebEvent {
        /**
         * @param appContext The app context.
         */
        constructor(appContext) {
            super();
            this.appContext = appContext;
            this._pages = {};
            this._routesCache = [];
            this._routesFlattened = [];
            _info('[OWebPager] ready!');
        }
        /**
         * Returns registered pages routes.
         */
        getRoutes() {
            return [...this._routesCache];
        }
        /**
         * Returns the page with the given name.
         * @param name
         */
        getPage(name) {
            const page = this._pages[name];
            if (undefined === page) {
                throw new Error(`[OWebPager] the page "${name}" is not defined.`);
            }
            return page;
        }
        /**
         * Returns the active page.
         */
        getActivePage() {
            if (!this._activePage) {
                throw new Error('[OWebPager] no active page.');
            }
            return this._activePage;
        }
        /**
         * Returns the active page route.
         */
        getActivePageRoute() {
            if (!this._activeRoute) {
                throw new Error('[OWebPager] no active route.');
            }
            return this._activeRoute;
        }
        /**
         * Returns all pages list.
         */
        getPageList() {
            return { ...this._pages };
        }
        /**
         * Register a given page.
         *
         * @param page
         */
        registerPage(page) {
            const name = page.getName();
            if (name in this._pages) {
                throw new Error(`[OWebPager] page "${name}" already registered.`);
            }
            this._pages[name] = page.install(this);
            const routes = page.getRoutes();
            this._routesCache.push(...routes);
            return this._registerPageRoutes(page, routes);
        }
        /**
         * Helpers to register page routes.
         *
         * @param page The page.
         * @param routes The page routes list.
         * @param parent The page routes parent.
         * @private
         */
        _registerPageRoutes(page, routes, parent) {
            const router = this.appContext.router;
            for (let i = 0; i < routes.length; i++) {
                const route = routes[i];
                route.id = ++routeId;
                route.parent = parent;
                route.href = router.pathToURL(typeof route.path === 'string' ? route.path : '/').href;
                route.active = false;
                route.activeChild = false;
                route.show =
                    route.show ||
                        function () {
                            return true;
                        };
                this._routesFlattened.push(route);
                this._addRoute(route, page);
                if (route.sub && route.sub.length) {
                    this._registerPageRoutes(page, route.sub, route);
                }
            }
            return this;
        }
        /**
         * Helper to add route.
         *
         * @param route The route object.
         * @param page The page to which that route belongs to.
         * @private
         */
        _addRoute(route, page) {
            const ctx = this;
            this.appContext.router.on(route.path, route.pathOptions, (routeContext) => {
                _debug('[OWebPager] page route match', route, page, routeContext);
                if (page.requireLogin(routeContext, route) &&
                    !ctx.appContext.userVerified()) {
                    return (routeContext.stop() &&
                        ctx.appContext.showLoginPage({
                            next: routeContext.getPath(),
                        }));
                }
                const ar = ctx._activeRoute, ap = ctx._activePage;
                ap && ar && ap.onClose(ar, route);
                page.onOpen(routeContext, route);
                !routeContext.stopped() && ctx._setActive(page, route);
            });
            return this;
        }
        /**
         * Helper to set the active route.
         *
         * @param page
         * @param route
         * @private
         */
        _setActive(page, route) {
            const oldPage = this._activePage, oldRoute = this._activeRoute, app = this.appContext;
            for (let i = 0; i < this._routesFlattened.length; i++) {
                const c = this._routesFlattened[i];
                c.active = route.id === c.id;
                c.activeChild = !c.active && _isParentOf(c, route);
            }
            this._activePage = page;
            this._activeRoute = route;
            wDoc.title = app.i18n.toHuman(route.title ? route.title : app.getAppName());
            const info = {
                page,
                oldPage,
                route,
                oldRoute,
                samePage: oldPage === page,
            };
            _debug('[OWebPager] location info', info);
            this.trigger(OWebPager.EVT_PAGE_LOCATION_CHANGE, [route, page]);
            return this;
        }
        onLocationChange(handler) {
            return this.on(OWebPager.EVT_PAGE_LOCATION_CHANGE, handler);
        }
    }
    OWebPager.SELF = id();
    OWebPager.EVT_PAGE_LOCATION_CHANGE = id();
    return OWebPager;
})();
export default OWebPager;
//# sourceMappingURL=data:application/json;base64,