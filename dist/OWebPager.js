import OWebEvent from './OWebEvent';
import Utils from './utils/Utils';
const wDoc = window.document;
let routeId = 0, _isParentOf = (parent, route) => {
    let p;
    while ((p = route.parent)) {
        if (p === parent) {
            return true;
        }
        route = p;
    }
    return false;
};
export default class OWebPager extends OWebEvent {
    /**
     * @param app_context The app context.
     */
    constructor(app_context) {
        super();
        this.app_context = app_context;
        this._pages = {};
        this._routes_cache = [];
        this._routes_flattened = [];
        console.log('[OWebPager] ready!');
    }
    /**
     * Returns registered pages routes.
     */
    getRoutes() {
        return [...this._routes_cache];
    }
    /**
     * Returns the page with the given name.
     * @param name
     */
    getPage(name) {
        let page = this._pages[name];
        if (undefined === page) {
            throw new Error(`[OWebPager] the page "${name}" is not defined.`);
        }
        return page;
    }
    /**
     * Returns the active page.
     */
    getActivePage() {
        if (!this._active_page) {
            throw new Error('[OWebPager] no active page.');
        }
        return this._active_page;
    }
    /**
     * Returns the active page route.
     */
    getActivePageRoute() {
        if (!this._active_route) {
            throw new Error('[OWebPager] no active route.');
        }
        return this._active_route;
    }
    /**
     * Returns all pages list.
     */
    getPageList() {
        return { ...this._pages };
    }
    /**
     * Register a given page.
     *
     * @param page
     */
    registerPage(page) {
        let name = page.getName();
        if (name in this._pages) {
            throw new Error(`[OWebPager] page "${name}" already registered.`);
        }
        this._pages[name] = page.install(this);
        let routes = page.getRoutes();
        this._routes_cache.push(...routes);
        return this._registerPageRoutes(page, routes);
    }
    /**
     * Helpers to register page routes.
     *
     * @param page The page.
     * @param routes The page routes list.
     * @param parent The page routes parent.
     * @private
     */
    _registerPageRoutes(page, routes, parent) {
        let router = this.app_context.router;
        for (let i = 0; i < routes.length; i++) {
            let route = routes[i];
            route.id = ++routeId;
            route.parent = parent;
            route.href = router.pathToURL(typeof route.path === 'string' ? route.path : '/').href;
            route.active = false;
            route.activeChild = false;
            route.show =
                route.show ||
                    function () {
                        return true;
                    };
            this._routes_flattened.push(route);
            this._addRoute(route, page);
            if (route.sub && route.sub.length) {
                this._registerPageRoutes(page, route.sub, route);
            }
        }
        return this;
    }
    /**
     * Helper to add route.
     *
     * @param route The route object.
     * @param page The page to which that route belongs to.
     * @private
     */
    _addRoute(route, page) {
        let ctx = this;
        this.app_context.router.on(route.path, route.pathOptions, (routeContext) => {
            console.log('[OWebPager] page route match ->', route, page, routeContext);
            if (page.requireLogin(routeContext, route) &&
                !ctx.app_context.userVerified()) {
                return (routeContext.stop() &&
                    ctx.app_context.showLoginPage({
                        next: routeContext.getPath(),
                    }));
            }
            let ar = ctx._active_route, ap = ctx._active_page;
            ap && ar && ap.onClose(ar, route);
            page.onOpen(routeContext, route);
            !routeContext.stopped() && ctx._setActive(page, route);
        });
        return this;
    }
    /**
     * Helper to set the active route.
     *
     * @param page
     * @param route
     * @private
     */
    _setActive(page, route) {
        let oldPage = this._active_page, oldRoute = this._active_route, app = this.app_context;
        for (let i = 0; i < this._routes_flattened.length; i++) {
            let c = this._routes_flattened[i];
            c.active = route.id === c.id;
            c.activeChild = !c.active && _isParentOf(c, route);
        }
        this._active_page = page;
        this._active_route = route;
        wDoc.title = app.i18n.toHuman(route.title.length ? route.title : app.getAppName());
        let info = {
            page,
            oldPage,
            route,
            oldRoute,
            samePage: oldPage === page,
        };
        console.log('[OWebPager] info', info);
        this.trigger(OWebPager.EVT_PAGE_LOCATION_CHANGE, [route, page]);
        return this;
    }
    onLocationChange(handler) {
        return this.on(OWebPager.EVT_PAGE_LOCATION_CHANGE, handler);
    }
}
OWebPager.SELF = Utils.id();
OWebPager.EVT_PAGE_LOCATION_CHANGE = Utils.id();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYlBhZ2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL09XZWJQYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLFNBQVMsTUFBTSxhQUFhLENBQUM7QUFNcEMsT0FBTyxLQUFLLE1BQU0sZUFBZSxDQUFDO0FBNEVsQyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDO0FBQzdCLElBQUksT0FBTyxHQUFHLENBQUMsRUFDZCxXQUFXLEdBQUcsQ0FBQyxNQUFzQixFQUFFLEtBQXFCLEVBQVcsRUFBRTtJQUN4RSxJQUFJLENBQUMsQ0FBQztJQUNOLE9BQU8sQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU8sQ0FBQyxFQUFFO1FBQzNCLElBQUksQ0FBQyxLQUFLLE1BQU0sRUFBRTtZQUNqQixPQUFPLElBQUksQ0FBQztTQUNaO1FBRUQsS0FBSyxHQUFHLENBQUMsQ0FBQztLQUNWO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDZCxDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsT0FBTyxPQUFPLFNBQXFCLFNBQVEsU0FBUztJQVUxRDs7T0FFRztJQUNILFlBQTZCLFdBQW9CO1FBQ2hELEtBQUssRUFBRSxDQUFDO1FBRG9CLGdCQUFXLEdBQVgsV0FBVyxDQUFTO1FBVGhDLFdBQU0sR0FBd0MsRUFBRSxDQUFDO1FBQzFELGtCQUFhLEdBQWlCLEVBQUUsQ0FBQztRQUNqQyxzQkFBaUIsR0FBcUIsRUFBRSxDQUFDO1FBU2hELE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBRUQ7O09BRUc7SUFDSCxTQUFTO1FBQ1IsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFRDs7O09BR0c7SUFDSCxPQUFPLENBQUMsSUFBWTtRQUNuQixJQUFJLElBQUksR0FBcUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztR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RUQsZ0JBQWdCLENBQ2YsT0FBZ0U7UUFFaEUsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUM3RCxDQUFDOztBQTFOZSxjQUFJLEdBQUcsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUFDO0FBQ2xCLGtDQUF3QixHQUFHLEtBQUssQ0FBQyxFQUFFLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBPV2ViQXBwIGZyb20gJy4vT1dlYkFwcCc7XG5pbXBvcnQgT1dlYkV2ZW50IGZyb20gJy4vT1dlYkV2ZW50JztcbmltcG9ydCBPV2ViUm91dGVyLCB7XG5cdE9XZWJSb3V0ZUNvbnRleHQsXG5cdHRSb3V0ZVBhdGgsXG5cdHRSb3V0ZVBhdGhPcHRpb25zLFxufSBmcm9tICcuL09XZWJSb3V0ZXInO1xuaW1wb3J0IFV0aWxzIGZyb20gJy4vdXRpbHMvVXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIGlQYWdlUm91dGUge1xuXHRzbHVnPzogc3RyaW5nO1xuXHR0aXRsZTogc3RyaW5nO1xuXHRkZXNjcmlwdGlvbj86IHN0cmluZztcblx0cGF0aDogdFJvdXRlUGF0aDtcblx0cGF0aE9wdGlvbnM/OiB0Um91dGVQYXRoT3B0aW9ucztcblx0c3ViPzogaVBhZ2VSb3V0ZVtdO1xuXHRzaG93PygpOiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIGlQYWdlUm91dGVGdWxsIHtcblx0c2x1Zz86IHN0cmluZztcblx0dGl0bGU6IHN0cmluZztcblx0ZGVzY3JpcHRpb24/OiBzdHJpbmc7XG5cdHBhdGg6IHRSb3V0ZVBhdGg7XG5cdHBhdGhPcHRpb25zPzogdFJvdXRlUGF0aE9wdGlvbnM7XG5cdHN1Yj86IGlQYWdlUm91dGVbXTtcblx0c2hvdygpOiBib29sZWFuO1xuXG5cdHJlYWRvbmx5IGlkOiBudW1iZXI7XG5cdHJlYWRvbmx5IGhyZWY6IHN0cmluZztcblx0cmVhZG9ubHkgcGFyZW50PzogaVBhZ2VSb3V0ZUZ1bGw7XG5cdGFjdGl2ZTogYm9vbGVhbjtcblx0YWN0aXZlQ2hpbGQ6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgaVBhZ2U8Q29tcG9uZW50PiB7XG5cdC8qKlxuXHQgKiBUaGUgcGFnZSBuYW1lIGdldHRlci5cblx0ICovXG5cdGdldE5hbWUoKTogc3RyaW5nO1xuXG5cdC8qKlxuXHQgKiBUaGUgcGFnZSByb3V0ZXMgZ2V0dGVyLlxuXHQgKi9cblx0Z2V0Um91dGVzKCk6IGlQYWdlUm91dGVbXTtcblxuXHQvKipcblx0ICogVGhlIHBhZ2UgY29tcG9uZW50IGdldHRlci5cblx0ICovXG5cdGdldENvbXBvbmVudCgpOiBDb21wb25lbnQ7XG5cblx0LyoqXG5cdCAqIENhbGxlZCBvbmNlIHdoZW4gcmVnaXN0ZXJpbmcgdGhlIHBhZ2UuXG5cdCAqXG5cdCAqIEBwYXJhbSBwYWdlclxuXHQgKi9cblx0aW5zdGFsbChwYWdlcjogT1dlYlBhZ2VyPENvbXBvbmVudD4pOiB0aGlzO1xuXG5cdC8qKlxuXHQgKiBEb2VzIHRoaXMgcGFnZSByZXF1aXJlIGEgdmVyaWZpZWQgdXNlciBmb3IgdGhlIHJlcXVlc3RlZCBwYWdlIHJvdXRlLlxuXHQgKlxuXHQgKiBAcGFyYW0gY29udGV4dCBUaGUgYXBwIGNvbnRleHQuXG5cdCAqIEBwYXJhbSByb3V0ZSBUaGUgcmVxdWVzdCBwYWdlIHJvdXRlLlxuXHQgKi9cblx0cmVxdWlyZUxvZ2luKGNvbnRleHQ6IE9XZWJSb3V0ZUNvbnRleHQsIHJvdXRlOiBpUGFnZVJvdXRlRnVsbCk6IGJvb2xlYW47XG5cblx0LyoqXG5cdCAqIENhbGxlZCBiZWZvcmUgcGFnZSBvcGVuLlxuXHQgKlxuXHQgKiBAcGFyYW0gY29udGV4dFxuXHQgKiBAcGFyYW0gcm91dGVcblx0ICovXG5cdG9uT3Blbihjb250ZXh0OiBPV2ViUm91dGVDb250ZXh0LCByb3V0ZTogaVBhZ2VSb3V0ZUZ1bGwpOiB2b2lkO1xuXG5cdC8qKlxuXHQgKiBDYWxsZWQgYmVmb3JlIHBhZ2UgY2xvc2UuXG5cdCAqXG5cdCAqIEBwYXJhbSBvbGRSb3V0ZVxuXHQgKiBAcGFyYW0gbmV3Um91dGVcblx0ICovXG5cdG9uQ2xvc2Uob2xkUm91dGU6IGlQYWdlUm91dGVGdWxsLCBuZXdSb3V0ZTogaVBhZ2VSb3V0ZUZ1bGwpOiB2b2lkO1xufVxuXG5jb25zdCB3RG9jID0gd2luZG93LmRvY3VtZW50O1xubGV0IHJvdXRlSWQgPSAwLFxuXHRfaXNQYXJlbnRPZiA9IChwYXJlbnQ6IGlQYWdlUm91dGVGdWxsLCByb3V0ZTogaVBhZ2VSb3V0ZUZ1bGwpOiBib29sZWFuID0+IHtcblx0XHRsZXQgcDtcblx0XHR3aGlsZSAoKHAgPSByb3V0ZS5wYXJlbnQhKSkge1xuXHRcdFx0aWYgKHAgPT09IHBhcmVudCkge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblxuXHRcdFx0cm91dGUgPSBwO1xuXHRcdH1cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9XZWJQYWdlcjxDb21wb25lbnQ+IGV4dGVuZHMgT1dlYkV2ZW50IHtcblx0c3RhdGljIHJlYWRvbmx5IFNFTEYgPSBVdGlscy5pZCgpO1xuXHRzdGF0aWMgcmVhZG9ubHkgRVZUX1BBR0VfTE9DQVRJT05fQ0hBTkdFID0gVXRpbHMuaWQoKTtcblxuXHRwcml2YXRlIHJlYWRvbmx5IF9wYWdlczogeyBba2V5OiBzdHJpbmddOiBpUGFnZTxDb21wb25lbnQ+IH0gPSB7fTtcblx0cHJpdmF0ZSBfcm91dGVzX2NhY2hlOiBpUGFnZVJvdXRlW10gPSBbXTtcblx0cHJpdmF0ZSBfcm91dGVzX2ZsYXR0ZW5lZDogaVBhZ2VSb3V0ZUZ1bGxbXSA9IFtdO1xuXHRwcml2YXRlIF9hY3RpdmVfcGFnZTogaVBhZ2U8Q29tcG9uZW50PiB8IHVuZGVmaW5lZDtcblx0cHJpdmF0ZSBfYWN0aXZlX3JvdXRlPzogaVBhZ2VSb3V0ZUZ1bGw7XG5cblx0LyoqXG5cdCAqIEBwYXJhbSBhcHBfY29udGV4dCBUaGUgYXBwIGNvbnRleHQuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGFwcF9jb250ZXh0OiBPV2ViQXBwKSB7XG5cdFx0c3VwZXIoKTtcblx0XHRjb25zb2xlLmxvZygnW09XZWJQYWdlcl0gcmVhZHkhJyk7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyByZWdpc3RlcmVkIHBhZ2VzIHJvdXRlcy5cblx0ICovXG5cdGdldFJvdXRlcygpOiBpUGFnZVJvdXRlW10ge1xuXHRcdHJldHVybiBbLi4udGhpcy5fcm91dGVzX2NhY2hlXTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBwYWdlIHdpdGggdGhlIGdpdmVuIG5hbWUuXG5cdCAqIEBwYXJhbSBuYW1lXG5cdCAqL1xuXHRnZXRQYWdlKG5hbWU6IHN0cmluZyk6IGlQYWdlPENvbXBvbmVudD4ge1xuXHRcdGxldCBwYWdlOiBpUGFnZTxDb21wb25lbnQ+ID0gdGhpcy5fcGFnZXNbbmFtZV07XG5cdFx0aWYgKHVuZGVmaW5lZCA9PT0gcGFnZSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBbT1dlYlBhZ2VyXSB0aGUgcGFnZSBcIiR7bmFtZX1cIiBpcyBub3QgZGVmaW5lZC5gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gcGFnZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBhY3RpdmUgcGFnZS5cblx0ICovXG5cdGdldEFjdGl2ZVBhZ2UoKTogaVBhZ2U8Q29tcG9uZW50PiB7XG5cdFx0aWYgKCF0aGlzLl9hY3RpdmVfcGFnZSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdbT1dlYlBhZ2VyXSBubyBhY3RpdmUgcGFnZS4nKTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuX2FjdGl2ZV9wYWdlO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGFjdGl2ZSBwYWdlIHJvdXRlLlxuXHQgKi9cblx0Z2V0QWN0aXZlUGFnZVJvdXRlKCk6IGlQYWdlUm91dGVGdWxsIHtcblx0XHRpZiAoIXRoaXMuX2FjdGl2ZV9yb3V0ZSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdbT1dlYlBhZ2VyXSBubyBhY3RpdmUgcm91dGUuJyk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzLl9hY3RpdmVfcm91dGU7XG5cdH1cblxuXHQvKipcblx0ICogUmV0dXJucyBhbGwgcGFnZXMgbGlzdC5cblx0ICovXG5cdGdldFBhZ2VMaXN0KCkge1xuXHRcdHJldHVybiB7IC4uLnRoaXMuX3BhZ2VzIH07XG5cdH1cblxuXHQvKipcblx0ICogUmVnaXN0ZXIgYSBnaXZlbiBwYWdlLlxuXHQgKlxuXHQgKiBAcGFyYW0gcGFnZVxuXHQgKi9cblx0cmVnaXN0ZXJQYWdlKHBhZ2U6IGlQYWdlPENvbXBvbmVudD4pOiB0aGlzIHtcblx0XHRsZXQgbmFtZSA9IHBhZ2UuZ2V0TmFtZSgpO1xuXG5cdFx0aWYgKG5hbWUgaW4gdGhpcy5fcGFnZXMpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgW09XZWJQYWdlcl0gcGFnZSBcIiR7bmFtZX1cIiBhbHJlYWR5IHJlZ2lzdGVyZWQuYCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fcGFnZXNbbmFtZV0gPSBwYWdlLmluc3RhbGwodGhpcyk7XG5cdFx0bGV0IHJvdXRlcyA9IHBhZ2UuZ2V0Um91dGVzKCk7XG5cblx0XHR0aGlzLl9yb3V0ZXNfY2FjaGUucHVzaCguLi5yb3V0ZXMpO1xuXG5cdFx0cmV0dXJuIHRoaXMuX3JlZ2lzdGVyUGFnZVJvdXRlcyhwYWdlLCByb3V0ZXMpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEhlbHBlcnMgdG8gcmVnaXN0ZXIgcGFnZSByb3V0ZXMuXG5cdCAqXG5cdCAqIEBwYXJhbSBwYWdlIFRoZSBwYWdlLlxuXHQgKiBAcGFyYW0gcm91dGVzIFRoZSBwYWdlIHJvdXRlcyBsaXN0LlxuXHQgKiBAcGFyYW0gcGFyZW50IFRoZSBwYWdlIHJvdXRlcyBwYXJlbnQuXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRwcml2YXRlIF9yZWdpc3RlclBhZ2VSb3V0ZXMoXG5cdFx0cGFnZTogaVBhZ2U8Q29tcG9uZW50Pixcblx0XHRyb3V0ZXM6IGlQYWdlUm91dGVbXSxcblx0XHRwYXJlbnQ/OiBpUGFnZVJvdXRlRnVsbFxuXHQpOiB0aGlzIHtcblx0XHRsZXQgcm91dGVyOiBPV2ViUm91dGVyID0gdGhpcy5hcHBfY29udGV4dC5yb3V0ZXI7XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHJvdXRlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0bGV0IHJvdXRlOiBhbnkgPSByb3V0ZXNbaV07XG5cblx0XHRcdHJvdXRlLmlkID0gKytyb3V0ZUlkO1xuXHRcdFx0cm91dGUucGFyZW50ID0gcGFyZW50O1xuXHRcdFx0cm91dGUuaHJlZiA9IHJvdXRlci5wYXRoVG9VUkwoXG5cdFx0XHRcdHR5cGVvZiByb3V0ZS5wYXRoID09PSAnc3RyaW5nJyA/IHJvdXRlLnBhdGggOiAnLydcblx0XHRcdCkuaHJlZjtcblx0XHRcdHJvdXRlLmFjdGl2ZSA9IGZhbHNlO1xuXHRcdFx0cm91dGUuYWN0aXZlQ2hpbGQgPSBmYWxzZTtcblxuXHRcdFx0cm91dGUuc2hvdyA9XG5cdFx0XHRcdHJvdXRlLnNob3cgfHxcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH07XG5cblx0XHRcdHRoaXMuX3JvdXRlc19mbGF0dGVuZWQucHVzaChyb3V0ZSk7XG5cblx0XHRcdHRoaXMuX2FkZFJvdXRlKHJvdXRlLCBwYWdlKTtcblxuXHRcdFx0aWYgKHJvdXRlLnN1YiAmJiByb3V0ZS5zdWIubGVuZ3RoKSB7XG5cdFx0XHRcdHRoaXMuX3JlZ2lzdGVyUGFnZVJvdXRlcyhwYWdlLCByb3V0ZS5zdWIsIHJvdXRlKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBIZWxwZXIgdG8gYWRkIHJvdXRlLlxuXHQgKlxuXHQgKiBAcGFyYW0gcm91dGUgVGhlIHJvdXRlIG9iamVjdC5cblx0ICogQHBhcmFtIHBhZ2UgVGhlIHBhZ2UgdG8gd2hpY2ggdGhhdCByb3V0ZSBiZWxvbmdzIHRvLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cHJpdmF0ZSBfYWRkUm91dGUocm91dGU6IGlQYWdlUm91dGVGdWxsLCBwYWdlOiBpUGFnZTxDb21wb25lbnQ+KTogdGhpcyB7XG5cdFx0bGV0IGN0eCA9IHRoaXM7XG5cdFx0dGhpcy5hcHBfY29udGV4dC5yb3V0ZXIub24oXG5cdFx0XHRyb3V0ZS5wYXRoLFxuXHRcdFx0cm91dGUucGF0aE9wdGlvbnMsXG5cdFx0XHQocm91dGVDb250ZXh0OiBPV2ViUm91dGVDb250ZXh0KSA9PiB7XG5cdFx0XHRcdGNvbnNvbGUubG9nKFxuXHRcdFx0XHRcdCdbT1dlYlBhZ2VyXSBwYWdlIHJvdXRlIG1hdGNoIC0+Jyxcblx0XHRcdFx0XHRyb3V0ZSxcblx0XHRcdFx0XHRwYWdlLFxuXHRcdFx0XHRcdHJvdXRlQ29udGV4dFxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRwYWdlLnJlcXVpcmVMb2dpbihyb3V0ZUNvbnRleHQsIHJvdXRlKSAmJlxuXHRcdFx0XHRcdCFjdHguYXBwX2NvbnRleHQudXNlclZlcmlmaWVkKClcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0cmV0dXJuIChcblx0XHRcdFx0XHRcdHJvdXRlQ29udGV4dC5zdG9wKCkgJiZcblx0XHRcdFx0XHRcdGN0eC5hcHBfY29udGV4dC5zaG93TG9naW5QYWdlKHtcblx0XHRcdFx0XHRcdFx0bmV4dDogcm91dGVDb250ZXh0LmdldFBhdGgoKSxcblx0XHRcdFx0XHRcdH0pXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGxldCBhciA9IGN0eC5fYWN0aXZlX3JvdXRlLFxuXHRcdFx0XHRcdGFwID0gY3R4Ll9hY3RpdmVfcGFnZTtcblxuXHRcdFx0XHRhcCAmJiBhciAmJiBhcC5vbkNsb3NlKGFyLCByb3V0ZSk7XG5cblx0XHRcdFx0cGFnZS5vbk9wZW4ocm91dGVDb250ZXh0LCByb3V0ZSk7XG5cblx0XHRcdFx0IXJvdXRlQ29udGV4dC5zdG9wcGVkKCkgJiYgY3R4Ll9zZXRBY3RpdmUocGFnZSwgcm91dGUpO1xuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBIZWxwZXIgdG8gc2V0IHRoZSBhY3RpdmUgcm91dGUuXG5cdCAqXG5cdCAqIEBwYXJhbSBwYWdlXG5cdCAqIEBwYXJhbSByb3V0ZVxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cHJpdmF0ZSBfc2V0QWN0aXZlKHBhZ2U6IGlQYWdlPENvbXBvbmVudD4sIHJvdXRlOiBpUGFnZVJvdXRlRnVsbCk6IHRoaXMge1xuXHRcdGxldCBvbGRQYWdlID0gdGhpcy5fYWN0aXZlX3BhZ2UsXG5cdFx0XHRvbGRSb3V0ZSA9IHRoaXMuX2FjdGl2ZV9yb3V0ZSxcblx0XHRcdGFwcCA9IHRoaXMuYXBwX2NvbnRleHQ7XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuX3JvdXRlc19mbGF0dGVuZWQubGVuZ3RoOyBpKyspIHtcblx0XHRcdGxldCBjID0gdGhpcy5fcm91dGVzX2ZsYXR0ZW5lZFtpXTtcblxuXHRcdFx0Yy5hY3RpdmUgPSByb3V0ZS5pZCA9PT0gYy5pZDtcblx0XHRcdGMuYWN0aXZlQ2hpbGQgPSAhYy5hY3RpdmUgJiYgX2lzUGFyZW50T2YoYywgcm91dGUpO1xuXHRcdH1cblxuXHRcdHRoaXMuX2FjdGl2ZV9wYWdlID0gcGFnZTtcblx0XHR0aGlzLl9hY3RpdmVfcm91dGUgPSByb3V0ZTtcblx0XHR3RG9jLnRpdGxlID0gYXBwLmkxOG4udG9IdW1hbihcblx0XHRcdHJvdXRlLnRpdGxlLmxlbmd0aCA/IHJvdXRlLnRpdGxlIDogYXBwLmdldEFwcE5hbWUoKVxuXHRcdCk7XG5cblx0XHRsZXQgaW5mbzogYW55ID0ge1xuXHRcdFx0cGFnZSxcblx0XHRcdG9sZFBhZ2UsXG5cdFx0XHRyb3V0ZSxcblx0XHRcdG9sZFJvdXRlLFxuXHRcdFx0c2FtZVBhZ2U6IG9sZFBhZ2UgPT09IHBhZ2UsXG5cdFx0fTtcblxuXHRcdGNvbnNvbGUubG9nKCdbT1dlYlBhZ2VyXSBpbmZvJywgaW5mbyk7XG5cblx0XHR0aGlzLnRyaWdnZXIoT1dlYlBhZ2VyLkVWVF9QQUdFX0xPQ0FUSU9OX0NIQU5HRSwgW3JvdXRlLCBwYWdlXSk7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdG9uTG9jYXRpb25DaGFuZ2UoXG5cdFx0aGFuZGxlcjogKHJvdXRlOiBpUGFnZVJvdXRlRnVsbCwgcGFnZTogaVBhZ2U8Q29tcG9uZW50PikgPT4gdm9pZFxuXHQpIHtcblx0XHRyZXR1cm4gdGhpcy5vbihPV2ViUGFnZXIuRVZUX1BBR0VfTE9DQVRJT05fQ0hBTkdFLCBoYW5kbGVyKTtcblx0fVxufVxuIl19