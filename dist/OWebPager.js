import OWebEvent from './OWebEvent';
import { id, logger } from './utils';
import OWebRoute from './OWebRoute';
const wDoc = window.document;
let routeId = 0;
const _isParentOf = (parent, route) => {
    let p;
    while ((p = route.parent)) {
        if (p === parent) {
            return true;
        }
        route = p;
    }
    return false;
};
export default class OWebPager extends OWebEvent {
    _appContext;
    static SELF = id();
    static EVT_PAGE_LOCATION_CHANGE = id();
    _pages = {};
    _routesCache = [];
    _routesFlattened = [];
    _activePage;
    _activeRoute;
    constructor(_appContext) {
        super();
        this._appContext = _appContext;
        logger.info('[OWebPager] ready!');
    }
    getRoutes() {
        return [...this._routesCache];
    }
    getPage(name) {
        const page = this._pages[name];
        if (undefined === page) {
            throw new Error(`[OWebPager] the page "${name}" is not defined.`);
        }
        return page;
    }
    getActivePage() {
        if (!this._activePage) {
            throw new Error('[OWebPager] no active page.');
        }
        return this._activePage;
    }
    getActivePageRoute() {
        if (!this._activeRoute) {
            throw new Error('[OWebPager] no active route.');
        }
        return this._activeRoute;
    }
    getPageList() {
        return { ...this._pages };
    }
    registerPage(page) {
        const name = page.name;
        if (name in this._pages) {
            throw new Error(`[OWebPager] page "${name}" already registered.`);
        }
        page.install && page.install(this);
        this._pages[name] = page;
        const routes = page.routes;
        this._routesCache.push(...routes);
        return this._registerPageRoutes(page, routes);
    }
    _registerPageRoutes(page, routes, parent) {
        const router = this._appContext.router;
        for (let i = 0; i < routes.length; i++) {
            const route = routes[i];
            route.id = ++routeId;
            route.parent = parent;
            route.pathOptions = route.pathOptions || {};
            route.children = route.children || [];
            route.active = false;
            route.activeChild = false;
            const webRoute = (route.webRoute = this._addRoute(route, page));
            if (!webRoute.isDynamic()) {
                route.href = router.pathToURL(route.path).href;
            }
            if (!('show' in route)) {
                route.show = true;
            }
            if (!('showChildren' in route)) {
                route.showChildren = true;
            }
            if (!('disabled' in route)) {
                route.disabled = false;
            }
            this._routesFlattened.push(route);
            if (route.children.length) {
                this._registerPageRoutes(page, route.children, route);
            }
        }
        return this;
    }
    _addRoute(route, page) {
        const webRoute = new OWebRoute(route.path, route.pathOptions, (routeContext) => {
            logger.debug('[OWebPager] page route match', route, page, routeContext);
            if (page.requireLogin &&
                page.requireLogin(routeContext, route) &&
                !this._appContext.user.userVerified()) {
                return (routeContext.stop() &&
                    this._appContext.showLoginPage({
                        next: routeContext.getPath(),
                    }));
            }
            if (route.disabled) {
                return routeContext.stop() && this._appContext.showHomePage();
            }
            const ar = this._activeRoute, ap = this._activePage;
            ap && ar && ap.onClose && ap.onClose(ar, route);
            page.onOpen && page.onOpen(routeContext, route);
            !routeContext.stopped() && this._setActive(page, route);
        });
        this._appContext.router.addRoute(webRoute);
        return webRoute;
    }
    _setActive(page, route) {
        const oldPage = this._activePage, oldRoute = this._activeRoute, app = this._appContext;
        for (let i = 0; i < this._routesFlattened.length; i++) {
            const c = this._routesFlattened[i];
            c.active = route.id === c.id;
            c.activeChild = !c.active && _isParentOf(c, route);
        }
        this._activePage = page;
        this._activeRoute = route;
        wDoc.title = app.i18n.toHuman(route.title ? route.title : app.getAppName());
        const info = {
            page,
            oldPage,
            route,
            oldRoute,
            samePage: oldPage === page,
        };
        logger.debug('[OWebPager] location info', info);
        this.trigger(OWebPager.EVT_PAGE_LOCATION_CHANGE, [route, page]);
        return this;
    }
    onLocationChange(handler) {
        return this.on(OWebPager.EVT_PAGE_LOCATION_CHANGE, handler);
    }
}
//# sourceMappingURL=data:application/json;base64,