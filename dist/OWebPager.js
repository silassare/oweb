import OWebEvent from "./OWebEvent";
import OWebLang from "./OWebLang";
const wDoc = window.document;
let routeId = 0, _isParentOf = (parent, route) => {
    let p;
    while (p = route.parent) {
        if (p === parent) {
            return true;
        }
        route = p;
    }
    return false;
};
export default class OWebPager extends OWebEvent {
    constructor(app_context) {
        super();
        this.app_context = app_context;
        this._pages = {};
        this._routes_cache = [];
        this._routes_flattened = [];
        console.log("[OWebPager] ready!");
    }
    getRoutes() {
        return this._routes_cache;
    }
    getPage(name) {
        let page = this._pages[name];
        if (undefined === page) {
            throw new Error(`[OWebPager] the page "${name}" is not defined.`);
        }
        return page;
    }
    getActivePage() {
        if (!this._active_page) {
            throw new Error("[OWebPager] no active page.");
        }
        return this._active_page;
    }
    getActivePageRoute() {
        if (!this._active_route) {
            throw new Error("[OWebPager] no active route.");
        }
        return this._active_route;
    }
    getPageList() {
        return Object.create(this._pages);
    }
    registerPage(page) {
        let name = page.getName();
        if (name in this._pages) {
            throw new Error(`[OWebPager] page "${name}" already registered.`);
        }
        this._pages[name] = page.install(this);
        let routes = page.getRoutes();
        this._routes_cache.push(...routes);
        return this._registerPageRoutes(page, routes);
    }
    _registerPageRoutes(page, routes, parent) {
        let router = this.app_context.router;
        for (let i = 0; i < routes.length; i++) {
            let route = routes[i];
            route.id = ++routeId;
            route.parent = parent;
            route.href = router.pathToURL(typeof route.path === "string" ? route.path : "/").href;
            route.active = false;
            route.active_child = false;
            route.show = route.show || function () {
                return true;
            };
            this._routes_flattened.push(route);
            this._addRoute(route, page);
            if (route.sub && route.sub.length) {
                this._registerPageRoutes(page, route.sub, route);
            }
        }
        return this;
    }
    _addRoute(route, page) {
        let ctx = this;
        this.app_context.router.on(route.path, route.pathOptions, (routeContext) => {
            console.log("[OWebPager] page route match ->", route, page, routeContext);
            if (page.requireLogin(routeContext, route) && !ctx.app_context.userVerified()) {
                return routeContext.stop() && ctx.app_context.showLoginPage();
            }
            let ar = ctx._active_route, ap = ctx._active_page;
            ap && ar && ap.onClose(ar, route);
            page.onOpen(routeContext, route);
            !routeContext.stopped() && ctx._setActivePage(page)._setActiveRoute(route);
        });
        return this;
    }
    _setActiveRoute(route) {
        let list = this._routes_flattened;
        for (let i = 0; i < list.length; i++) {
            let c = list[i];
            c.active = route.id === c.id;
            c.active_child = !c.active && _isParentOf(c, route);
        }
        wDoc.title = OWebLang.toHuman(route.title.length ? route.title : this.app_context.getAppName());
        this._active_route = route;
        console.log(`[OWebPager] active route ->`, this._active_route);
        return this;
    }
    _setActivePage(newPage) {
        let oldPage = this._active_page;
        if (oldPage !== newPage) {
            console.log(`[OWebPager] page changing ->`, newPage, oldPage);
            this._active_page = newPage;
            this.trigger(OWebPager.EVT_PAGE_CHANGE, [oldPage, newPage]);
        }
        else {
            console.log(`[OWebPager] same page ->`, oldPage, newPage);
        }
        return this;
    }
}
OWebPager.SELF = "OWebPager";
OWebPager.EVT_PAGE_CHANGE = "OWebPager:page_change";
//# sourceMappingURL=data:application/json;base64,