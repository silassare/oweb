import OWebEvent from "./OWebEvent";
import Utils from "./utils/Utils";
const wDoc = window.document;
let routeId = 0, _isParentOf = (parent, route) => {
    let p;
    while ((p = route.parent)) {
        if (p === parent) {
            return true;
        }
        route = p;
    }
    return false;
};
export default class OWebPager extends OWebEvent {
    /**
     * @param app_context The app context.
     */
    constructor(app_context) {
        super();
        this.app_context = app_context;
        this._pages = {};
        this._routes_cache = [];
        this._routes_flattened = [];
        console.log("[OWebPager] ready!");
    }
    /**
     * Returns registered pages routes.
     */
    getRoutes() {
        return this._routes_cache;
    }
    /**
     * Returns the page with the given name.
     * @param name
     */
    getPage(name) {
        let page = this._pages[name];
        if (undefined === page) {
            throw new Error(`[OWebPager] the page "${name}" is not defined.`);
        }
        return page;
    }
    /**
     * Returns the active page.
     */
    getActivePage() {
        if (!this._active_page) {
            throw new Error("[OWebPager] no active page.");
        }
        return this._active_page;
    }
    /**
     * Returns the active page route.
     */
    getActivePageRoute() {
        if (!this._active_route) {
            throw new Error("[OWebPager] no active route.");
        }
        return this._active_route;
    }
    /**
     * Returns all pages list.
     */
    getPageList() {
        return Object.create(this._pages);
    }
    /**
     * Register a given page.
     *
     * @param page
     */
    registerPage(page) {
        let name = page.getName();
        if (name in this._pages) {
            throw new Error(`[OWebPager] page "${name}" already registered.`);
        }
        this._pages[name] = page.install(this);
        let routes = page.getRoutes();
        this._routes_cache.push(...routes);
        return this._registerPageRoutes(page, routes);
    }
    /**
     * Helpers to register page routes.
     *
     * @param page The page.
     * @param routes The page routes list.
     * @param parent The page routes parent.
     * @private
     */
    _registerPageRoutes(page, routes, parent) {
        let router = this.app_context.router;
        for (let i = 0; i < routes.length; i++) {
            let route = routes[i];
            route.id = ++routeId;
            route.parent = parent;
            route.href = router.pathToURL(typeof route.path === "string" ? route.path : "/").href;
            route.active = false;
            route.activeChild = false;
            route.show = route.show || function () {
                return true;
            };
            this._routes_flattened.push(route);
            this._addRoute(route, page);
            if (route.sub && route.sub.length) {
                this._registerPageRoutes(page, route.sub, route);
            }
        }
        return this;
    }
    /**
     * Helper to add route.
     *
     * @param route The route object.
     * @param page The page to which that route belongs to.
     * @private
     */
    _addRoute(route, page) {
        let ctx = this;
        this.app_context.router.on(route.path, route.pathOptions, (routeContext) => {
            console.log("[OWebPager] page route match ->", route, page, routeContext);
            if (page.requireLogin(routeContext, route) && !ctx.app_context.userVerified()) {
                return routeContext.stop() && ctx.app_context.showLoginPage();
            }
            let ar = ctx._active_route, ap = ctx._active_page;
            ap && ar && ap.onClose(ar, route);
            page.onOpen(routeContext, route);
            !routeContext.stopped() && ctx._setActive(page, route);
        });
        return this;
    }
    /**
     * Helper to set the active route.
     *
     * @param page
     * @param route
     * @private
     */
    _setActive(page, route) {
        let oldPage = this._active_page, oldRoute = this._active_route, app = this.app_context;
        for (let i = 0; i < this._routes_flattened.length; i++) {
            let c = this._routes_flattened[i];
            c.active = route.id === c.id;
            c.activeChild = !c.active && _isParentOf(c, route);
        }
        this._active_page = page;
        this._active_route = route;
        wDoc.title = app.i18n.toHuman(route.title.length ? route.title : app.getAppName());
        let info = {
            page,
            oldPage,
            route,
            oldRoute,
            samePage: oldPage === page
        };
        console.log('[OWebPager] info', info);
        return this.trigger(OWebPager.EVT_PAGE_LOCATION_CHANGE, [route, page]);
    }
    onLocationChange(handler) {
        return this.on(OWebPager.EVT_PAGE_LOCATION_CHANGE, handler);
    }
}
OWebPager.SELF = Utils.id();
OWebPager.EVT_PAGE_LOCATION_CHANGE = Utils.id();
//# sourceMappingURL=data:application/json;base64,