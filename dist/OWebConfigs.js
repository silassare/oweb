import OWebEvent from './OWebEvent';
import { clone, forEach, id, logger } from './utils';
export default class OWebConfigs extends OWebEvent {
    _appContext;
    static SELF = id();
    static EVT_CONFIG_CHANGE = id();
    _tagName = 'user_configs';
    _defaultUserConfigs = {};
    _appConfigs = {};
    _usersConfigs = {};
    constructor(_appContext, appConfigs, userConfigs) {
        super();
        this._appContext = _appContext;
        this._defaultUserConfigs = clone(userConfigs);
        this._appConfigs = clone(appConfigs);
        this._loadSavedConfigs();
        logger.info('[OWebConfigs] ready!');
    }
    resetToDefault(config) {
        if (config in this._defaultUserConfigs) {
            delete this._usersConfigs[config];
            this._appContext.ls.set(this._tagName, this._usersConfigs);
        }
        return this;
    }
    resetAllToDefault(confirmFirst = true) {
        if (!confirmFirst ||
            confirm(this._appContext.i18n.toHuman('OZ_CONFIRM_RESET_USER_CONFIGS'))) {
            this._usersConfigs = {};
            this._appContext.ls.set(this._tagName, this._usersConfigs);
        }
        return this;
    }
    get(config) {
        this._assertDefined(config);
        let val;
        if (config in this._usersConfigs) {
            val = this._usersConfigs[config];
        }
        else if (config in this._defaultUserConfigs) {
            val = this._defaultUserConfigs[config];
        }
        else if (config in this._appConfigs) {
            val = this._appConfigs[config];
        }
        return clone(val);
    }
    set(config, value) {
        this._assertDefined(config);
        if (this._isAppConfig(config)) {
            throw new Error(`[OWebConfigs] can't overwrite app config "${config}".`);
        }
        if (value === undefined) {
            delete this._usersConfigs[config];
        }
        else {
            this._usersConfigs[config] = clone(value);
        }
        this._appContext.ls.set(this._tagName, this._usersConfigs);
        this.trigger(OWebConfigs.EVT_CONFIG_CHANGE, [
            config,
            this.get(config),
            this,
        ]);
        return this;
    }
    _loadSavedConfigs() {
        const m = this, savedConfig = this._appContext.ls.get(this._tagName) || {};
        forEach(m._defaultUserConfigs, (_val, key) => {
            if (savedConfig[key] !== undefined) {
                m._usersConfigs[key] = savedConfig[key];
            }
        });
        this._appContext.ls.set(this._tagName, m._usersConfigs);
    }
    _isAppConfig(config) {
        return config in this._appConfigs;
    }
    _assertDefined(config) {
        if (!(config in this._defaultUserConfigs || config in this._appConfigs)) {
            throw new Error(`[OWebConfigs] config "${config}" is not defined.`);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,