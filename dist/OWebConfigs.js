import { OWebEvent, OWebDataStore, OWebLang, Utils } from "./oweb";
export default class OWebConfigs extends OWebEvent {
    constructor(app_context, configs) {
        super();
        this.app_context = app_context;
        this._default_configs = {};
        this._user_configs = {};
        this._private_configs_map = {};
        this._tag_name = app_context.getAppName() + ":user_configs";
        this.loadConfigs(configs);
        this._loadSavedConfigs();
        console.log("[OWebConfigs] ready!");
    }
    loadConfigs(configs) {
        let s = this;
        Utils.forEach(configs, (value, cfg) => {
            cfg = s._realConfigName(cfg);
            s._user_configs[cfg] = s._default_configs[cfg] = value;
        });
        return s;
    }
    resetToDefault(config) {
        if (config in this._default_configs) {
            this.set(config, this._default_configs[config]);
        }
        return this;
    }
    resetAllToDefault() {
        if (confirm(OWebLang.toHuman("OZ_CONFIRM_RESET_CONFIGS"))) {
            OWebDataStore.save(this._tag_name, this._default_configs);
            this.app_context.reloadApp();
        }
    }
    get(config) {
        this._warnUndefined(config);
        return this._user_configs[config];
    }
    set(config, value) {
        let m = this;
        if (Utils.isPlainObject(config)) {
            Utils.forEach(config, (value, key) => {
                m._set(key, value);
            });
        }
        else {
            m._set(config, value);
        }
        OWebDataStore.save(this._tag_name, this._user_configs);
        return this;
    }
    _loadSavedConfigs() {
        let m = this, saved_cfg = OWebDataStore.load(this._tag_name) || {};
        Utils.forEach(m._default_configs, (value, key) => {
            if (this._isPublic(key) && saved_cfg[key] !== undefined) {
                m._user_configs[key] = saved_cfg[key];
            }
        });
        OWebDataStore.save(this._tag_name, m._user_configs);
    }
    _set(config, value) {
        this._warnUndefined(config);
        if (!this._isPublic(config)) {
            throw new Error(`[OWebConfigs] can't overwrite config "${config}" permission denied.`);
        }
        if (config in this._user_configs) {
            this._user_configs[config] = value;
            this.trigger(OWebConfigs.EVT_CONFIG_CHANGE, [config, value, this]);
        }
    }
    _realConfigName(config) {
        if (config[0] === "!") {
            config = config.substr(1);
            this._private_configs_map[config] = 1;
        }
        return config;
    }
    _isPublic(config) {
        return undefined === this._private_configs_map[config];
    }
    _warnUndefined(config) {
        if (!(config in this._user_configs)) {
            console.warn(`[OWebConfigs] config "${config}" is not defined.`);
        }
    }
}
OWebConfigs.SELF = "OWebConfigs";
OWebConfigs.EVT_CONFIG_CHANGE = "OWebConfigs:change";
//# sourceMappingURL=data:application/json;base64,