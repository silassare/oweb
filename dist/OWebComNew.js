import OWebEvent from './OWebEvent';
import Utils from './utils/Utils';
const ajaxTransport = {
    // FOR GOBL JSON HELPER: WE DO NOT TRUST JQUERY JSON.parse
    converters: {
        'text json': function (a) {
            return JSON.parse(a);
        },
    },
};
const replace_methods = ['PATCH', 'PUT', 'DELETE'];
export default class OWebCom extends OWebEvent {
    constructor(app_context, options) {
        super();
        this.app_context = app_context;
        this._busy = false;
        if (options && !Utils.isPlainObject(options)) {
            throw new TypeError(`[OWebCom] require an 'object' as options not:  ${typeof options}.`);
        }
        this._options = {
            method: 'GET',
            dataType: 'json',
            data: {},
            crossDomain: true,
            badNewsShow: false,
            // increase request timeout for mobile device
            timeout: app_context.isMobileApp() ? 10000 : undefined,
            ...(options || {}),
        };
    }
    /**
     * Prepare the request before sending.
     *
     * @private
     */
    _prepare() {
        let m = this, real_method = m._options.method, api_key_header = this.app_context.configs.get('OZ_API_KEY_HEADER_NAME'), real_method_header = this.app_context.configs.get('OZ_API_REAL_METHOD_HEADER_NAME');
        let headers = (this._options.headers =
            this._options.headers || {});
        headers[api_key_header] = this.app_context.configs.get('OZ_API_KEY');
        // we update request method
        if (~replace_methods.indexOf(real_method)) {
            headers[real_method_header] = real_method;
            this._options.method = 'POST';
        }
        if (this._options.data instanceof FormData) {
            this._options.processData = false;
            this._options.contentType = false;
        }
        // workaround because jqXHR does not expose upload property
        this._options.xhr = function () {
            let xhr = $.ajaxSetup(ajaxTransport).xhr();
            // allow CORS
            xhr.withCredentials = true;
            if (xhr.upload) {
                xhr.upload.addEventListener('progress', (e) => {
                    let percent = 0;
                    let position = e.loaded || e.position; // e.position
                    let total = e.total;
                    if (e.lengthComputable) {
                        percent = Math.floor((position / total) * 100);
                    }
                    m.trigger(OWebCom.EVT_COM_UPLOAD_PROGRESS, [
                        e,
                        position,
                        total,
                        percent,
                    ]);
                }, false);
            }
            return xhr;
        };
    }
    /**
     * Handle server response.
     *
     * > Called only when the connection to the server was successfully established.
     *
     * @param response The server response.
     * @private
     */
    _handleResponse(response) {
        let m = this;
        if (response.stime) {
            m.app_context.user.setSessionExpire(response.stime);
        }
        if (response.error === 0) {
            m.trigger(OWebCom.EVT_COM_REQUEST_SUCCESS, [response, m]);
            m.trigger(OWebCom.EVT_COM_FINISH, [response, m]);
        }
        else {
            if (response.msg === 'OZ_ERROR_YOU_MUST_LOGIN') {
                m.trigger(OWebCom.EVT_COM_REQUEST_ERROR, [response, m]);
                m.app_context.forceLogin();
            }
            else {
                if (m._options.badNewsShow) {
                    m.app_context.view.dialog({
                        type: 'error',
                        text: response.msg,
                        data: response.data,
                    });
                }
                m.trigger(OWebCom.EVT_COM_REQUEST_ERROR, [response, m]);
                m.trigger(OWebCom.EVT_COM_FINISH, [response, m]);
            }
        }
    }
    /**
     * Send request.
     */
    send() {
        let m = this;
        this._prepare();
        if (this._busy) {
            console.warn('[OWebCom] instance is busy ->', m);
            return;
        }
        if (this._options) {
            this._busy = true;
            this._request = $.ajax(m._options)
                .done((response) => {
                m._handleResponse(response);
            })
                .fail((request) => {
                let network_error = !Utils.isPlainObject(request['responseJSON']);
                if (network_error) {
                    console.error('[OWebCom] request network error ->', request);
                    m.trigger(OWebCom.EVT_COM_NETWORK_ERROR, [request, m]);
                }
                else {
                    console.error('[OWebCom] request server error ->', request);
                    m._handleResponse(request['responseJSON']);
                }
            });
        }
    }
    /**
     * Try to abort the current request.
     */
    abort() {
        this._busy = false;
        if (this._request) {
            this._request.abort();
        }
    }
}
OWebCom.SELF = Utils.id();
OWebCom.EVT_COM_REQUEST_SUCCESS = Utils.id();
OWebCom.EVT_COM_REQUEST_ERROR = Utils.id();
OWebCom.EVT_COM_NETWORK_ERROR = Utils.id();
OWebCom.EVT_COM_UPLOAD_PROGRESS = Utils.id();
OWebCom.EVT_COM_FINISH = Utils.id();
//# sourceMappingURL=data:application/json;base64,