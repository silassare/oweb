export default function (app) {
    return {
        oz_file_link: function (file, quality = 0, def) {
            let parts = file.split("_"), url = app.url.get("OZ_SERVER_GET_FILE_URI"), o = "0", file_id = o, file_key = o;
            if (parts.length === 2) {
                file_id = parts[0];
                file_key = parts[1];
            }
            if (def && (file_id === o || file_key === o)) {
                return def;
            }
            let data = {
                "{oz_file_id}": file_id,
                "{oz_file_key}": file_key,
                "{oz_file_quality}": quality
            };
            Object.keys(data).forEach(function (key) {
                url = url.replace(key, data[key]);
            });
            return url;
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ouanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbWl4aW5zL296LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE1BQU0sQ0FBQyxPQUFPLFdBQVcsR0FBWTtJQUNwQyxPQUFPO1FBQ04sWUFBWSxFQUFFLFVBQVUsSUFBWSxFQUFFLFVBQXdCLENBQUMsRUFBRSxHQUFZO1lBQzVFLElBQUksS0FBSyxHQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQzdCLEdBQUcsR0FBUSxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQyxFQUNoRCxDQUFDLEdBQVUsR0FBRyxFQUNkLE9BQU8sR0FBSSxDQUFDLEVBQ1osUUFBUSxHQUFHLENBQUMsQ0FBQztZQUVkLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQ3ZCLE9BQU8sR0FBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BCLFFBQVEsR0FBRyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDcEI7WUFFRCxJQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sS0FBSyxDQUFDLElBQUksUUFBUSxLQUFLLENBQUMsQ0FBQyxFQUFFO2dCQUM3QyxPQUFPLEdBQUcsQ0FBQzthQUNYO1lBRUQsSUFBSSxJQUFJLEdBQVE7Z0JBQ2YsY0FBYyxFQUFPLE9BQU87Z0JBQzVCLGVBQWUsRUFBTSxRQUFRO2dCQUM3QixtQkFBbUIsRUFBRSxPQUFPO2FBQzVCLENBQUM7WUFFRixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEdBQUc7Z0JBQ3RDLEdBQUcsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNuQyxDQUFDLENBQUMsQ0FBQztZQUVILE9BQU8sR0FBRyxDQUFDO1FBQ1osQ0FBQztLQUNELENBQUE7QUFDRixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE9XZWJBcHAgZnJvbSBcIi4uL09XZWJBcHBcIjtcbmltcG9ydCB7dEZpbGVRdWFsaXR5fSBmcm9tIFwiLi4vT1dlYkZTXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChhcHA6IE9XZWJBcHApIHtcblx0cmV0dXJuIHtcblx0XHRvel9maWxlX2xpbms6IGZ1bmN0aW9uIChmaWxlOiBzdHJpbmcsIHF1YWxpdHk6IHRGaWxlUXVhbGl0eSA9IDAsIGRlZj86IHN0cmluZykge1xuXHRcdFx0bGV0IHBhcnRzICAgID0gZmlsZS5zcGxpdChcIl9cIiksXG5cdFx0XHRcdHVybCAgICAgID0gYXBwLnVybC5nZXQoXCJPWl9TRVJWRVJfR0VUX0ZJTEVfVVJJXCIpLFxuXHRcdFx0XHRvICAgICAgICA9IFwiMFwiLFxuXHRcdFx0XHRmaWxlX2lkICA9IG8sXG5cdFx0XHRcdGZpbGVfa2V5ID0gbztcblxuXHRcdFx0aWYgKHBhcnRzLmxlbmd0aCA9PT0gMikge1xuXHRcdFx0XHRmaWxlX2lkICA9IHBhcnRzWzBdO1xuXHRcdFx0XHRmaWxlX2tleSA9IHBhcnRzWzFdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoZGVmICYmIChmaWxlX2lkID09PSBvIHx8IGZpbGVfa2V5ID09PSBvKSkge1xuXHRcdFx0XHRyZXR1cm4gZGVmO1xuXHRcdFx0fVxuXG5cdFx0XHRsZXQgZGF0YTogYW55ID0ge1xuXHRcdFx0XHRcIntvel9maWxlX2lkfVwiICAgICA6IGZpbGVfaWQsXG5cdFx0XHRcdFwie296X2ZpbGVfa2V5fVwiICAgIDogZmlsZV9rZXksXG5cdFx0XHRcdFwie296X2ZpbGVfcXVhbGl0eX1cIjogcXVhbGl0eVxuXHRcdFx0fTtcblxuXHRcdFx0T2JqZWN0LmtleXMoZGF0YSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG5cdFx0XHRcdHVybCA9IHVybC5yZXBsYWNlKGtleSwgZGF0YVtrZXldKTtcblx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm4gdXJsO1xuXHRcdH1cblx0fVxufSJdfQ==