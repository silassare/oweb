import { isFunction, isString } from './utils';
export default class OWebEvent {
    _events = {};
    on(event, handler) {
        if (!this._events[event]) {
            this._events[event] = [];
        }
        if (!isFunction(handler)) {
            throw new TypeError('[OWebEvent] handler should be function.');
        }
        this._events[event].push(handler);
        return this;
    }
    off(event, handler) {
        if (arguments.length === 1) {
            if (isString(event)) {
                delete this._events[event];
            }
            else if (isFunction(event)) {
                handler = event;
                for (const ev in this._events) {
                    if (Object.prototype.hasOwnProperty.call(this._events, ev)) {
                        const handlers = this._events[ev];
                        let i = handlers.length;
                        while (i--) {
                            if (handlers[i] === handler) {
                                handlers.splice(i, 1);
                            }
                        }
                    }
                }
            }
        }
        else if (isString(event) && isFunction(handler)) {
            const handlers = this._events[event] || [];
            let i = handlers.length;
            while (i--) {
                if (handlers[i] === handler) {
                    handlers.splice(i, 1);
                }
            }
        }
        return this;
    }
    trigger(event, data = [], cancelable = false, context = this) {
        const handlers = this._events[event] || [];
        let i = -1, canceled = false;
        while (++i < handlers.length) {
            if (handlers[i].apply(context, data) === false && cancelable) {
                canceled = true;
                break;
            }
        }
        return !canceled;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYkV2ZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL09XZWJFdmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUkvQyxNQUFNLENBQUMsT0FBTyxPQUFPLFNBQVM7SUFDckIsT0FBTyxHQUF1QyxFQUFFLENBQUM7SUFRekQsRUFBRSxDQUNELEtBQWEsRUFDYixPQUFrRTtRQUVsRSxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN6QixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQztTQUN6QjtRQUVELElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDekIsTUFBTSxJQUFJLFNBQVMsQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDO1NBQy9EO1FBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFbEMsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBUUQsR0FBRyxDQUFDLEtBQWEsRUFBRSxPQUFtQjtRQUNyQyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQzNCLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNwQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDM0I7aUJBQU0sSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDLEVBQUU7Z0JBQzdCLE9BQU8sR0FBRyxLQUFLLENBQUM7Z0JBQ2hCLEtBQUssTUFBTSxFQUFFLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtvQkFDOUIsSUFBSSxNQUFNLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsRUFBRTt3QkFDM0QsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQzt3QkFDbEMsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQzt3QkFDeEIsT0FBTyxDQUFDLEVBQUUsRUFBRTs0QkFDWCxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsS0FBSyxPQUFPLEVBQUU7Z0NBQzVCLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDOzZCQUN0Qjt5QkFDRDtxQkFDRDtpQkFDRDthQUNEO1NBQ0Q7YUFBTSxJQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxVQUFVLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDbEQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDM0MsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztZQUN4QixPQUFPLENBQUMsRUFBRSxFQUFFO2dCQUNYLElBQUksUUFBUSxDQUFDLENBQUMsQ0FBQyxLQUFLLE9BQU8sRUFBRTtvQkFDNUIsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7aUJBQ3RCO2FBQ0Q7U0FDRDtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQVVTLE9BQU8sQ0FDaEIsS0FBYSxFQUNiLE9BQWMsRUFBRSxFQUNoQixVQUFVLEdBQUcsS0FBSyxFQUNsQixVQUFlLElBQUk7UUFFbkIsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDM0MsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQ1QsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUVsQixPQUFPLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUU7WUFDN0IsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxLQUFLLElBQUksVUFBVSxFQUFFO2dCQUM3RCxRQUFRLEdBQUcsSUFBSSxDQUFDO2dCQUNoQixNQUFNO2FBQ047U0FDRDtRQUVELE9BQU8sQ0FBQyxRQUFRLENBQUM7SUFDbEIsQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNGdW5jdGlvbiwgaXNTdHJpbmcgfSBmcm9tICcuL3V0aWxzJztcblxuZXhwb3J0IHR5cGUgT0V2ZW50SGFuZGxlciA9ICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZCB8IGJvb2xlYW47XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9XZWJFdmVudCB7XG5cdHByaXZhdGUgX2V2ZW50czogeyBba2V5OiBzdHJpbmddOiBPRXZlbnRIYW5kbGVyW10gfSA9IHt9O1xuXG5cdC8qKlxuXHQgKiBSZWdpc3RlciBldmVudCBoYW5kbGVyLlxuXHQgKlxuXHQgKiBAcGFyYW0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG5cdCAqIEBwYXJhbSBoYW5kbGVyIFRoZSBldmVudCBoYW5kbGVyIGZ1bmN0aW9uLlxuXHQgKi9cblx0b24oXG5cdFx0ZXZlbnQ6IHN0cmluZyxcblx0XHRoYW5kbGVyOiAodGhpczogdGhpcywgLi4uYXJnczogYW55W10pID0+IFJldHVyblR5cGU8T0V2ZW50SGFuZGxlcj5cblx0KTogdGhpcyB7XG5cdFx0aWYgKCF0aGlzLl9ldmVudHNbZXZlbnRdKSB7XG5cdFx0XHR0aGlzLl9ldmVudHNbZXZlbnRdID0gW107XG5cdFx0fVxuXG5cdFx0aWYgKCFpc0Z1bmN0aW9uKGhhbmRsZXIpKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdbT1dlYkV2ZW50XSBoYW5kbGVyIHNob3VsZCBiZSBmdW5jdGlvbi4nKTtcblx0XHR9XG5cblx0XHR0aGlzLl9ldmVudHNbZXZlbnRdLnB1c2goaGFuZGxlcik7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBSZW1vdmVzIGV2ZW50IGhhbmRsZXIuXG5cdCAqXG5cdCAqIEBwYXJhbSBldmVudCBUaGUgZXZlbnQgbmFtZS5cblx0ICogQHBhcmFtIGhhbmRsZXIgVGhlIGV2ZW50IGhhbmRsZXIgZnVuY3Rpb24uXG5cdCAqL1xuXHRvZmYoZXZlbnQ6IHN0cmluZywgaGFuZGxlcjogKCkgPT4gdm9pZCk6IHRoaXMge1xuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRpZiAoaXNTdHJpbmcoZXZlbnQpKSB7XG5cdFx0XHRcdGRlbGV0ZSB0aGlzLl9ldmVudHNbZXZlbnRdO1xuXHRcdFx0fSBlbHNlIGlmIChpc0Z1bmN0aW9uKGV2ZW50KSkge1xuXHRcdFx0XHRoYW5kbGVyID0gZXZlbnQ7XG5cdFx0XHRcdGZvciAoY29uc3QgZXYgaW4gdGhpcy5fZXZlbnRzKSB7XG5cdFx0XHRcdFx0aWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh0aGlzLl9ldmVudHMsIGV2KSkge1xuXHRcdFx0XHRcdFx0Y29uc3QgaGFuZGxlcnMgPSB0aGlzLl9ldmVudHNbZXZdO1xuXHRcdFx0XHRcdFx0bGV0IGkgPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHRcdFx0XHR3aGlsZSAoaS0tKSB7XG5cdFx0XHRcdFx0XHRcdGlmIChoYW5kbGVyc1tpXSA9PT0gaGFuZGxlcikge1xuXHRcdFx0XHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZShpLCAxKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAoaXNTdHJpbmcoZXZlbnQpICYmIGlzRnVuY3Rpb24oaGFuZGxlcikpIHtcblx0XHRcdGNvbnN0IGhhbmRsZXJzID0gdGhpcy5fZXZlbnRzW2V2ZW50XSB8fCBbXTtcblx0XHRcdGxldCBpID0gaGFuZGxlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKGktLSkge1xuXHRcdFx0XHRpZiAoaGFuZGxlcnNbaV0gPT09IGhhbmRsZXIpIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoaSwgMSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBUcmlnZ2VyIGFuIGV2ZW50LlxuXHQgKlxuXHQgKiBAcGFyYW0gZXZlbnQgVGhlIGV2ZW50IG5hbWUuXG5cdCAqIEBwYXJhbSBkYXRhIFRoZSBkYXRhIHRvIGJlIHBhc3NlZCBhcyBhcmd1bWVudHMgdG8gdGhlIGV2ZW50IGhhbmRsZXJzLlxuXHQgKiBAcGFyYW0gY2FuY2VsYWJsZSBXaGVuIHRydWUgdGhlIGV2ZW50IHdpbGwgc3RvcCB3aGVuIGEgaGFuZGxlciByZXR1cm5zIGZhbHNlLlxuXHQgKiBAcGFyYW0gY29udGV4dCBUaGUgY29udGV4dCBpbiB3aGljaCBlYWNoIGhhbmRsZXIgd2lsbCBiZSBjYWxsZWQuIERlZmF1bHQ6IHRoaXMuXG5cdCAqL1xuXHRwcm90ZWN0ZWQgdHJpZ2dlcihcblx0XHRldmVudDogc3RyaW5nLFxuXHRcdGRhdGE6IGFueVtdID0gW10sXG5cdFx0Y2FuY2VsYWJsZSA9IGZhbHNlLFxuXHRcdGNvbnRleHQ6IGFueSA9IHRoaXNcblx0KTogYm9vbGVhbiB7XG5cdFx0Y29uc3QgaGFuZGxlcnMgPSB0aGlzLl9ldmVudHNbZXZlbnRdIHx8IFtdO1xuXHRcdGxldCBpID0gLTEsXG5cdFx0XHRjYW5jZWxlZCA9IGZhbHNlO1xuXG5cdFx0d2hpbGUgKCsraSA8IGhhbmRsZXJzLmxlbmd0aCkge1xuXHRcdFx0aWYgKGhhbmRsZXJzW2ldLmFwcGx5KGNvbnRleHQsIGRhdGEpID09PSBmYWxzZSAmJiBjYW5jZWxhYmxlKSB7XG5cdFx0XHRcdGNhbmNlbGVkID0gdHJ1ZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuICFjYW5jZWxlZDtcblx0fVxufVxuIl19