import { Utils } from "./oweb";
export default class OWebEvent {
    constructor() {
        this._app_events = {};
    }
    on(event, handler) {
        if (!this._app_events[event]) {
            this._app_events[event] = [];
        }
        if (!Utils.isFunction(handler)) {
            throw new TypeError("[OWebEvent] handler should be function.");
        }
        this._app_events[event].push(handler);
        return this;
    }
    off(event, handler) {
        if (arguments.length === 1) {
            if (Utils.isString(event)) {
                delete this._app_events[event];
            }
            else if (Utils.isFunction(event)) {
                handler = event;
                for (let ev in this._app_events) {
                    let handlers = this._app_events[ev];
                    let i = handlers.length;
                    while (i--) {
                        if (handlers[i] === handler) {
                            handlers.splice(i, 1);
                            break;
                        }
                    }
                }
            }
        }
        else if (Utils.isString(event) && Utils.isFunction(handler)) {
            let handlers = this._app_events[event] || [];
            let i = handlers.length;
            while (i--) {
                if (handlers[i] === handler) {
                    handlers.splice(i, 1);
                    break;
                }
            }
        }
        return this;
    }
    trigger(event, data = [], cancelable = false, callback) {
        let handlers = this._app_events[event] || [], i = -1, canceled = false;
        while (++i < handlers.length) {
            if (handlers[i].apply(this, data) === false &&
                cancelable) {
                canceled = true;
                break;
            }
        }
        callback && Utils.callback(callback, [canceled]);
        return this;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYkV2ZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL09XZWJFdmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBRTdCLE1BQU0sQ0FBQyxPQUFPO0lBR2I7UUFGUSxnQkFBVyxHQUF1QyxFQUFFLENBQUM7SUFHN0QsQ0FBQztJQUVELEVBQUUsQ0FBQyxLQUFhLEVBQUUsT0FBaUI7UUFDbEMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDN0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLENBQUM7U0FDN0I7UUFFRCxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUMvQixNQUFNLElBQUksU0FBUyxDQUFDLHlDQUF5QyxDQUFDLENBQUM7U0FDL0Q7UUFFRCxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUV0QyxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFRCxHQUFHLENBQUMsS0FBYSxFQUFFLE9BQWlCO1FBRW5DLElBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDM0IsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUMxQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDL0I7aUJBQU0sSUFBSSxLQUFLLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNuQyxPQUFPLEdBQUcsS0FBSyxDQUFDO2dCQUNoQixLQUFLLElBQUksRUFBRSxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7b0JBQ2hDLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsRUFBRSxDQUFDLENBQUM7b0JBQ3BDLElBQUksQ0FBQyxHQUFVLFFBQVEsQ0FBQyxNQUFNLENBQUM7b0JBQy9CLE9BQU8sQ0FBQyxFQUFFLEVBQUU7d0JBQ1gsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssT0FBTyxFQUFFOzRCQUM1QixRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzs0QkFDdEIsTUFBTTt5QkFDTjtxQkFDRDtpQkFDRDthQUNEO1NBQ0Q7YUFBTSxJQUFJLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUM5RCxJQUFJLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUM3QyxJQUFJLENBQUMsR0FBVSxRQUFRLENBQUMsTUFBTSxDQUFDO1lBQy9CLE9BQU8sQ0FBQyxFQUFFLEVBQUU7Z0JBQ1gsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLEtBQUssT0FBTyxFQUFFO29CQUM1QixRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztvQkFDdEIsTUFBTTtpQkFDTjthQUNEO1NBQ0Q7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFUyxPQUFPLENBQUMsS0FBYSxFQUFFLE9BQW1CLEVBQUUsRUFBRSxhQUFzQixLQUFLLEVBQUUsUUFBbUI7UUFDdkcsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEVBQzNDLENBQUMsR0FBVSxDQUFDLENBQUMsRUFDYixRQUFRLEdBQUcsS0FBSyxDQUFDO1FBRWxCLE9BQU8sRUFBRSxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sRUFBRTtZQUM3QixJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLEtBQUs7Z0JBQzFDLFVBQVUsRUFBRTtnQkFDWixRQUFRLEdBQUcsSUFBSSxDQUFDO2dCQUNoQixNQUFNO2FBQ047U0FDRDtRQUVELFFBQVEsSUFBSSxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFFakQsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0NBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1V0aWxzfSBmcm9tIFwiLi9vd2ViXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE9XZWJFdmVudCB7XG5cdHByaXZhdGUgX2FwcF9ldmVudHM6IHsgW2tleTogc3RyaW5nXTogQXJyYXk8RnVuY3Rpb24+IH0gPSB7fTtcblxuXHRwcm90ZWN0ZWQgY29uc3RydWN0b3IoKSB7XG5cdH1cblxuXHRvbihldmVudDogc3RyaW5nLCBoYW5kbGVyOiBGdW5jdGlvbikge1xuXHRcdGlmICghdGhpcy5fYXBwX2V2ZW50c1tldmVudF0pIHtcblx0XHRcdHRoaXMuX2FwcF9ldmVudHNbZXZlbnRdID0gW107XG5cdFx0fVxuXG5cdFx0aWYgKCFVdGlscy5pc0Z1bmN0aW9uKGhhbmRsZXIpKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKFwiW09XZWJFdmVudF0gaGFuZGxlciBzaG91bGQgYmUgZnVuY3Rpb24uXCIpO1xuXHRcdH1cblxuXHRcdHRoaXMuX2FwcF9ldmVudHNbZXZlbnRdLnB1c2goaGFuZGxlcik7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdG9mZihldmVudDogc3RyaW5nLCBoYW5kbGVyOiBGdW5jdGlvbikge1xuXG5cdFx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcblx0XHRcdGlmIChVdGlscy5pc1N0cmluZyhldmVudCkpIHtcblx0XHRcdFx0ZGVsZXRlIHRoaXMuX2FwcF9ldmVudHNbZXZlbnRdO1xuXHRcdFx0fSBlbHNlIGlmIChVdGlscy5pc0Z1bmN0aW9uKGV2ZW50KSkge1xuXHRcdFx0XHRoYW5kbGVyID0gZXZlbnQ7XG5cdFx0XHRcdGZvciAobGV0IGV2IGluIHRoaXMuX2FwcF9ldmVudHMpIHtcblx0XHRcdFx0XHRsZXQgaGFuZGxlcnMgPSB0aGlzLl9hcHBfZXZlbnRzW2V2XTtcblx0XHRcdFx0XHRsZXQgaSAgICAgICAgPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKGktLSkge1xuXHRcdFx0XHRcdFx0aWYgKGhhbmRsZXJzW2ldID09PSBoYW5kbGVyKSB7XG5cdFx0XHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZShpLCAxKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChVdGlscy5pc1N0cmluZyhldmVudCkgJiYgVXRpbHMuaXNGdW5jdGlvbihoYW5kbGVyKSkge1xuXHRcdFx0bGV0IGhhbmRsZXJzID0gdGhpcy5fYXBwX2V2ZW50c1tldmVudF0gfHwgW107XG5cdFx0XHRsZXQgaSAgICAgICAgPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoaS0tKSB7XG5cdFx0XHRcdGlmIChoYW5kbGVyc1tpXSA9PT0gaGFuZGxlcikge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZShpLCAxKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0cHJvdGVjdGVkIHRyaWdnZXIoZXZlbnQ6IHN0cmluZywgZGF0YTogQXJyYXk8YW55PiA9IFtdLCBjYW5jZWxhYmxlOiBib29sZWFuID0gZmFsc2UsIGNhbGxiYWNrPzogRnVuY3Rpb24pIHtcblx0XHRsZXQgaGFuZGxlcnMgPSB0aGlzLl9hcHBfZXZlbnRzW2V2ZW50XSB8fCBbXSxcblx0XHRcdGkgICAgICAgID0gLTEsXG5cdFx0XHRjYW5jZWxlZCA9IGZhbHNlO1xuXG5cdFx0d2hpbGUgKCsraSA8IGhhbmRsZXJzLmxlbmd0aCkge1xuXHRcdFx0aWYgKGhhbmRsZXJzW2ldLmFwcGx5KHRoaXMsIGRhdGEpID09PSBmYWxzZSAmJlxuXHRcdFx0XHRjYW5jZWxhYmxlKSB7XG5cdFx0XHRcdGNhbmNlbGVkID0gdHJ1ZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Y2FsbGJhY2sgJiYgVXRpbHMuY2FsbGJhY2soY2FsbGJhY2ssIFtjYW5jZWxlZF0pO1xuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0iXX0=