import { stringPlaceholderReplace } from '../utils';
const SERVICE_URL_FORMAT = ':host/:service', SERVICE_ENTITY_FORMAT = ':host/:service/:id', SERVICE_ENTITY_RELATION_FORMAT = ':host/:service/:id/:relation';
const apiCache = {};
export const getApiForHost = function getApiForHost(url) {
    for (const apiHost in apiCache) {
        if (url.startsWith(apiHost)) {
            return apiCache[apiHost];
        }
    }
    return undefined;
};
export default class OZone {
    _appContext;
    apiHost;
    constructor(_appContext) {
        this._appContext = _appContext;
        this.apiHost = _appContext.configs
            .get('OZ_API_BASE_URL')
            .replace(/\/$/g, '');
    }
    static instantiate(_appContext) {
        const apiHost = _appContext.configs.get('OZ_API_BASE_URL');
        if (!(apiHost in apiCache)) {
            apiCache[apiHost] = new OZone(_appContext);
        }
        return apiCache[apiHost];
    }
    request(url, options = {}) {
        const _this = this, api = getApiForHost(url);
        if (api) {
            if (!options.headers) {
                options.headers = {};
            }
            if (this._appContext.configs.get('OZ_API_ALLOW_REAL_METHOD_HEADER')) {
                const realMethod = (options.method || 'get').toUpperCase(), replaceMethods = ['PATCH', 'PUT', 'DELETE'], realMethodHeader = this._appContext.configs.get('OZ_API_REAL_METHOD_HEADER_NAME');
                if (~replaceMethods.indexOf(realMethod)) {
                    options.headers[realMethodHeader] = realMethod;
                    options.method = 'POST';
                }
            }
            const headerName = this._appContext.configs.get('OZ_API_KEY_HEADER_NAME');
            if (!options.headers[headerName]) {
                options.headers[headerName] =
                    this._appContext.configs.get('OZ_API_KEY');
            }
            if (!options.isGoodNews) {
                options.isGoodNews = (json) => {
                    return Boolean(json && json.error === 0);
                };
            }
            if (!options.errorResponseToDialog) {
                options.errorResponseToDialog = (response) => {
                    const json = response.json;
                    return json
                        ? { text: json.msg, data: json.data }
                        : { text: 'OZ_ERROR_NETWORK' };
                };
            }
        }
        const o = this._appContext.request(url, options);
        o.onResponse(function responseHandler(response) {
            const { json } = response;
            if (json && json.stime) {
                _this._appContext.user.setSessionExpire(json.stime);
            }
            if (json && json.stoken) {
                _this._appContext.user.setSessionToken(json.stoken);
            }
        });
        return o;
    }
    getServiceURI(service) {
        return stringPlaceholderReplace(SERVICE_URL_FORMAT, {
            host: this.apiHost,
            service,
        });
    }
    getItemURI(service, id) {
        return stringPlaceholderReplace(SERVICE_ENTITY_FORMAT, {
            host: this.apiHost,
            service,
            id,
        });
    }
    getItemRelationURI(service, id, relation) {
        return stringPlaceholderReplace(SERVICE_ENTITY_RELATION_FORMAT, {
            host: this.apiHost,
            service,
            id,
            relation,
        });
    }
}
//# sourceMappingURL=data:application/json;base64,