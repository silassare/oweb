import { logger } from '../utils';
import OWebXHR from '../OWebXHR';
/**
 * Create net instance.
 *
 * @param url The request url.
 * @param options The request options.
 */
export const ozNet = function (url, options) {
    const event = function (type) {
        return function () {
            logger.debug('[OZone][NET] intercepted', type, ...arguments);
        };
    };
    return new OWebXHR(url, {
        isGoodNews(response) {
            return Boolean(response.json && response.json.error);
        },
        ...options,
    })
        .onGoodNews(event('onGoodNews'))
        .onBadNews(event('onBadNews'))
        .onFinished(event('onFinished'))
        .onError(event('onError'))
        .onDownloadProgress(event('onDownloadProgress'))
        .onUploadProgress(event('onUploadProgress'))
        .onHttpError(event('onHttpError'))
        .onHttpSuccess(event('onHttpSuccess'))
        .onResponse(event('onResponse'));
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvb3pvbmUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNsQyxPQUFPLE9BQU8sTUFBTSxZQUFZLENBQUM7QUErR2pDOzs7OztHQUtHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sS0FBSyxHQUFHLFVBQ3BCLEdBQVcsRUFDWCxPQUF1QztJQUV2QyxNQUFNLEtBQUssR0FBRyxVQUFVLElBQVk7UUFDbkMsT0FBTztZQUNOLE1BQU0sQ0FBQyxLQUFLLENBQUMsMEJBQTBCLEVBQUUsSUFBSSxFQUFFLEdBQUcsU0FBUyxDQUFDLENBQUM7UUFDOUQsQ0FBQyxDQUFDO0lBQ0gsQ0FBQyxDQUFDO0lBRUYsT0FBTyxJQUFJLE9BQU8sQ0FBSSxHQUFHLEVBQUU7UUFDMUIsVUFBVSxDQUFDLFFBQVE7WUFDbEIsT0FBTyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3RELENBQUM7UUFDRCxHQUFHLE9BQU87S0FDVixDQUFDO1NBQ0EsVUFBVSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUMvQixTQUFTLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQzdCLFVBQVUsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7U0FDL0IsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUN6QixrQkFBa0IsQ0FBQyxLQUFLLENBQUMsb0JBQW9CLENBQUMsQ0FBQztTQUMvQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQztTQUMzQyxXQUFXLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ2pDLGFBQWEsQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUM7U0FDckMsVUFBVSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO0FBQ25DLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElOZXRSZXF1ZXN0T3B0aW9ucyB9IGZyb20gJy4uL09XZWJOZXQnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IE9XZWJYSFIgZnJvbSAnLi4vT1dlYlhIUic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU9ab25lQXBpSlNPTjxSPiB7XG5cdGVycm9yOiBudW1iZXI7XG5cdG1zZzogc3RyaW5nO1xuXHRkYXRhOiBSO1xuXHR1dGltZTogbnVtYmVyOyAvLyByZXNwb25zZSB0aW1lXG5cdHN0aW1lPzogbnVtYmVyOyAvLyBzZXNzaW9uIGV4cGlyZSB0aW1lXG5cdHN0b2tlbj86IHN0cmluZzsgLy8gc2Vzc2lvbiB0b2tlblxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElPWm9uZUFwaUFkZFJlc3BvbnNlPFQ+XG5cdGV4dGVuZHMgSU9ab25lQXBpSlNPTjx7XG5cdFx0aXRlbTogVDtcblx0fT4ge31cblxuZXhwb3J0IGludGVyZmFjZSBJT1pvbmVBcGlHZXRSZXNwb25zZTxUPlxuXHRleHRlbmRzIElPWm9uZUFwaUpTT048e1xuXHRcdGl0ZW06IFQ7XG5cdFx0cmVsYXRpb25zPzoge1xuXHRcdFx0W2tleTogc3RyaW5nXTogYW55O1xuXHRcdH07XG5cdH0+IHt9XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU9ab25lQXBpR2V0QWxsUmVzcG9uc2U8VD5cblx0ZXh0ZW5kcyBJT1pvbmVBcGlKU09OPHtcblx0XHRpdGVtczogVFtdO1xuXHRcdG1heD86IG51bWJlcjtcblx0XHRwYWdlPzogbnVtYmVyO1xuXHRcdHRvdGFsPzogbnVtYmVyO1xuXHRcdHJlbGF0aW9ucz86IHtcblx0XHRcdFtrZXk6IHN0cmluZ106IGFueTtcblx0XHR9O1xuXHR9PiB7fVxuXG5leHBvcnQgaW50ZXJmYWNlIElPWm9uZUFwaVVwZGF0ZVJlc3BvbnNlPFQ+XG5cdGV4dGVuZHMgSU9ab25lQXBpSlNPTjx7XG5cdFx0aXRlbTogVDtcblx0fT4ge31cblxuZXhwb3J0IGludGVyZmFjZSBJT1pvbmVBcGlVcGRhdGVBbGxSZXNwb25zZVxuXHRleHRlbmRzIElPWm9uZUFwaUpTT048e1xuXHRcdGFmZmVjdGVkOiBudW1iZXI7XG5cdH0+IHt9XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU9ab25lQXBpRGVsZXRlUmVzcG9uc2U8VD5cblx0ZXh0ZW5kcyBJT1pvbmVBcGlKU09OPHtcblx0XHRpdGVtOiBUO1xuXHR9PiB7fVxuXG5leHBvcnQgaW50ZXJmYWNlIElPWm9uZUFwaURlbGV0ZUFsbFJlc3BvbnNlXG5cdGV4dGVuZHMgSU9ab25lQXBpSlNPTjx7XG5cdFx0YWZmZWN0ZWQ6IG51bWJlcjtcblx0fT4ge31cblxuZXhwb3J0IGludGVyZmFjZSBJT1pvbmVBcGlHZXRSZWxhdGlvbkl0ZW1zUmVzcG9uc2U8VD5cblx0ZXh0ZW5kcyBJT1pvbmVBcGlKU09OPHtcblx0XHRpdGVtczogVFtdO1xuXHRcdG1heD86IG51bWJlcjtcblx0XHRwYWdlPzogbnVtYmVyO1xuXHRcdHRvdGFsPzogbnVtYmVyO1xuXHRcdHJlbGF0aW9uczoge1xuXHRcdFx0W2tleTogc3RyaW5nXTogYW55O1xuXHRcdH07XG5cdH0+IHt9XG5cbmV4cG9ydCBpbnRlcmZhY2UgSU9ab25lQXBpR2V0UmVsYXRpb25JdGVtUmVzcG9uc2U8VD5cblx0ZXh0ZW5kcyBJT1pvbmVBcGlKU09OPHtcblx0XHRpdGVtOiBUO1xuXHRcdHJlbGF0aW9ucz86IHtcblx0XHRcdFtrZXk6IHN0cmluZ106IGFueTtcblx0XHR9O1xuXHR9PiB7fVxuXG5leHBvcnQgdHlwZSB0T1pvbmVBcGlGaWx0ZXJDb25kaXRpb24gPVxuXHR8ICdlcSdcblx0fCAnbmVxJ1xuXHR8ICdsdCdcblx0fCAnbHRlJ1xuXHR8ICdndCdcblx0fCAnZ3RlJ1xuXHR8ICdpbidcblx0fCAnbm90X2luJ1xuXHR8ICdpc19udWxsJ1xuXHR8ICdpc19ub3RfbnVsbCdcblx0fCAnbGlrZSdcblx0fCAnbm90X2xpa2UnO1xuXG5leHBvcnQgdHlwZSB0T1pvbmVBcGlGaWx0ZXIgPVxuXHR8IHtcblx0XHRcdDA6IHRPWm9uZUFwaUZpbHRlckNvbmRpdGlvbjtcblx0XHRcdDE6IHN0cmluZyB8IHN0cmluZ1tdIHwgbnVtYmVyO1xuXHRcdFx0Mj86ICdvcicgfCAnYW5kJztcblx0ICB9XG5cdHwge1xuXHRcdFx0MDogJ2lzX251bGwnIHwgJ2lzX25vdF9udWxsJztcblx0XHRcdDE/OiAnb3InIHwgJ2FuZCc7XG5cdCAgfTtcblxuZXhwb3J0IHR5cGUgdE9ab25lQXBpRmlsdGVyc01hcCA9IHsgW2tleTogc3RyaW5nXTogdE9ab25lQXBpRmlsdGVyW10gfTtcblxuZXhwb3J0IGludGVyZmFjZSBJT1pvbmVBcGlSZXF1ZXN0T3B0aW9ucyB7XG5cdGRhdGE/OiBhbnk7XG5cdGZpbHRlcnM/OiB0T1pvbmVBcGlGaWx0ZXJzTWFwO1xuXHRyZWxhdGlvbnM/OiBzdHJpbmcgfCBzdHJpbmdbXTtcblx0Y29sbGVjdGlvbj86IHN0cmluZztcblx0b3JkZXJfYnk/OiBzdHJpbmc7XG5cdG1heD86IG51bWJlcjtcblx0cGFnZT86IG51bWJlcjtcbn1cblxuLyoqXG4gKiBDcmVhdGUgbmV0IGluc3RhbmNlLlxuICpcbiAqIEBwYXJhbSB1cmwgVGhlIHJlcXVlc3QgdXJsLlxuICogQHBhcmFtIG9wdGlvbnMgVGhlIHJlcXVlc3Qgb3B0aW9ucy5cbiAqL1xuZXhwb3J0IGNvbnN0IG96TmV0ID0gZnVuY3Rpb24gPFIgZXh0ZW5kcyBJT1pvbmVBcGlKU09OPGFueT4+KFxuXHR1cmw6IHN0cmluZyxcblx0b3B0aW9uczogUGFydGlhbDxJTmV0UmVxdWVzdE9wdGlvbnM8Uj4+LFxuKSB7XG5cdGNvbnN0IGV2ZW50ID0gZnVuY3Rpb24gKHR5cGU6IHN0cmluZykge1xuXHRcdHJldHVybiBmdW5jdGlvbiAoKSB7XG5cdFx0XHRsb2dnZXIuZGVidWcoJ1tPWm9uZV1bTkVUXSBpbnRlcmNlcHRlZCcsIHR5cGUsIC4uLmFyZ3VtZW50cyk7XG5cdFx0fTtcblx0fTtcblxuXHRyZXR1cm4gbmV3IE9XZWJYSFI8Uj4odXJsLCB7XG5cdFx0aXNHb29kTmV3cyhyZXNwb25zZSkge1xuXHRcdFx0cmV0dXJuIEJvb2xlYW4ocmVzcG9uc2UuanNvbiAmJiByZXNwb25zZS5qc29uLmVycm9yKTtcblx0XHR9LFxuXHRcdC4uLm9wdGlvbnMsXG5cdH0pXG5cdFx0Lm9uR29vZE5ld3MoZXZlbnQoJ29uR29vZE5ld3MnKSlcblx0XHQub25CYWROZXdzKGV2ZW50KCdvbkJhZE5ld3MnKSlcblx0XHQub25GaW5pc2hlZChldmVudCgnb25GaW5pc2hlZCcpKVxuXHRcdC5vbkVycm9yKGV2ZW50KCdvbkVycm9yJykpXG5cdFx0Lm9uRG93bmxvYWRQcm9ncmVzcyhldmVudCgnb25Eb3dubG9hZFByb2dyZXNzJykpXG5cdFx0Lm9uVXBsb2FkUHJvZ3Jlc3MoZXZlbnQoJ29uVXBsb2FkUHJvZ3Jlc3MnKSlcblx0XHQub25IdHRwRXJyb3IoZXZlbnQoJ29uSHR0cEVycm9yJykpXG5cdFx0Lm9uSHR0cFN1Y2Nlc3MoZXZlbnQoJ29uSHR0cFN1Y2Nlc3MnKSlcblx0XHQub25SZXNwb25zZShldmVudCgnb25SZXNwb25zZScpKTtcbn07XG4iXX0=