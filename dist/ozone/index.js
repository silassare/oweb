import OZone from './OZone';
import { isEmpty, isPlainObject } from '../utils';
export function cleanRequestOptions(options) {
    const _options = {};
    if (typeof options.max === 'number') {
        _options.max = options.max;
    }
    if (typeof options.page === 'number') {
        _options.page = options.page;
    }
    if (typeof options.relations === 'string') {
        _options.relations = options.relations;
    }
    if (typeof options.collection === 'string') {
        _options.collection = options.collection;
    }
    if (typeof options.order_by === 'string') {
        _options['order_by'] = options.order_by;
    }
    if (isPlainObject(options.filters) && !isEmpty(options.filters)) {
        _options.filters = options.filters;
    }
    return _options;
}
export default OZone;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvb3pvbmUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLE1BQU0sU0FBUyxDQUFDO0FBQzVCLE9BQU8sRUFBQyxPQUFPLEVBQUUsYUFBYSxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBc0doRCxNQUFNLFVBQVUsbUJBQW1CLENBQUMsT0FBMkI7SUFDOUQsTUFBTSxRQUFRLEdBQXVCLEVBQUUsQ0FBQztJQUN4QyxJQUFJLE9BQU8sT0FBTyxDQUFDLEdBQUcsS0FBSyxRQUFRLEVBQUU7UUFDcEMsUUFBUSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDO0tBQzNCO0lBQ0QsSUFBSSxPQUFPLE9BQU8sQ0FBQyxJQUFJLEtBQUssUUFBUSxFQUFFO1FBQ3JDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztLQUM3QjtJQUVELElBQUksT0FBTyxPQUFPLENBQUMsU0FBUyxLQUFLLFFBQVEsRUFBRTtRQUMxQyxRQUFRLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7S0FDdkM7SUFDRCxJQUFJLE9BQU8sT0FBTyxDQUFDLFVBQVUsS0FBSyxRQUFRLEVBQUU7UUFDM0MsUUFBUSxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDO0tBQ3pDO0lBRUQsSUFBSSxPQUFPLE9BQU8sQ0FBQyxRQUFRLEtBQUssUUFBUSxFQUFFO1FBQ3pDLFFBQVEsQ0FBQyxVQUFVLENBQUMsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDO0tBQ3hDO0lBRUQsSUFBSSxhQUFhLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtRQUNoRSxRQUFRLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUM7S0FDbkM7SUFFRCxPQUFPLFFBQVEsQ0FBQztBQUNqQixDQUFDO0FBRUQsZUFBZSxLQUFLLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgT1pvbmUgZnJvbSAnLi9PWm9uZSc7XG5pbXBvcnQge2lzRW1wdHksIGlzUGxhaW5PYmplY3R9IGZyb20gJy4uL3V0aWxzJztcblxuZXhwb3J0IGludGVyZmFjZSBPQXBpSlNPTjxSPiB7XG5cdGVycm9yOiBudW1iZXI7XG5cdG1zZzogc3RyaW5nO1xuXHRkYXRhOiBSO1xuXHR1dGltZTogbnVtYmVyOyAvLyByZXNwb25zZSB0aW1lXG5cdHN0aW1lPzogbnVtYmVyOyAvLyBzZXNzaW9uIGV4cGlyZSB0aW1lXG5cdHN0b2tlbj86IHN0cmluZzsgLy8gc2Vzc2lvbiB0b2tlblxufVxuXG5leHBvcnQgdHlwZSBPQXBpQWRkSlNPTjxUPiA9IE9BcGlKU09OPHtcblx0XHRpdGVtOiBUO1xuXHR9PlxuXG5leHBvcnQgdHlwZSBPQXBpR2V0SlNPTjxUPiA9IE9BcGlKU09OPHtcblx0XHRpdGVtOiBUO1xuXHRcdHJlbGF0aW9ucz86IHtcblx0XHRcdFtrZXk6IHN0cmluZ106IGFueTtcblx0XHR9O1xuXHR9PlxuXG5leHBvcnQgdHlwZSBPQXBpR2V0QWxsSlNPTjxUPiA9IE9BcGlKU09OPHtcblx0XHRpdGVtczogVFtdO1xuXHRcdG1heD86IG51bWJlcjtcblx0XHRwYWdlPzogbnVtYmVyO1xuXHRcdHRvdGFsPzogbnVtYmVyO1xuXHRcdHJlbGF0aW9ucz86IHtcblx0XHRcdFtrZXk6IHN0cmluZ106IGFueTtcblx0XHR9O1xuXHR9PlxuXG5leHBvcnQgdHlwZSBPQXBpVXBkYXRlSlNPTjxUPiA9IE9BcGlKU09OPHtcblx0XHRpdGVtOiBUO1xuXHR9PlxuXG5leHBvcnQgdHlwZSBPQXBpVXBkYXRlQWxsSlNPTiA9IE9BcGlKU09OPHtcblx0XHRhZmZlY3RlZDogbnVtYmVyO1xuXHR9PlxuXG5leHBvcnQgdHlwZSBPQXBpRGVsZXRlSlNPTjxUPiA9IE9BcGlKU09OPHtcblx0XHRpdGVtOiBUO1xuXHR9PlxuXG5leHBvcnQgdHlwZSBPQXBpRGVsZXRlQWxsSlNPTiA9IE9BcGlKU09OPHtcblx0XHRhZmZlY3RlZDogbnVtYmVyO1xuXHR9PlxuXG5leHBvcnQgdHlwZSBPQXBpR2V0UmVsYXRpb25JdGVtc0pTT048VD4gPSBPQXBpSlNPTjx7XG5cdFx0aXRlbXM6IFRbXTtcblx0XHRtYXg/OiBudW1iZXI7XG5cdFx0cGFnZT86IG51bWJlcjtcblx0XHR0b3RhbD86IG51bWJlcjtcblx0XHRyZWxhdGlvbnM6IHtcblx0XHRcdFtrZXk6IHN0cmluZ106IGFueTtcblx0XHR9O1xuXHR9PlxuXG5leHBvcnQgdHlwZSBPQXBpR2V0UmVsYXRpb25JdGVtSlNPTjxUPiA9IE9BcGlKU09OPHtcblx0XHRpdGVtOiBUO1xuXHRcdHJlbGF0aW9ucz86IHtcblx0XHRcdFtrZXk6IHN0cmluZ106IGFueTtcblx0XHR9O1xuXHR9PlxuXG5leHBvcnQgdHlwZSBPQXBpRmlsdGVyQ29uZGl0aW9uID1cblx0fCAnZXEnXG5cdHwgJ25lcSdcblx0fCAnbHQnXG5cdHwgJ2x0ZSdcblx0fCAnZ3QnXG5cdHwgJ2d0ZSdcblx0fCAnaW4nXG5cdHwgJ25vdF9pbidcblx0fCAnaXNfbnVsbCdcblx0fCAnaXNfbm90X251bGwnXG5cdHwgJ2xpa2UnXG5cdHwgJ25vdF9saWtlJztcblxuZXhwb3J0IHR5cGUgT0FwaUZpbHRlciA9XG5cdHwge1xuXHQwOiBFeGNsdWRlPE9BcGlGaWx0ZXJDb25kaXRpb24sICdpc19udWxsJyB8ICdpc19ub3RfbnVsbCc+O1xuXHQxOiBzdHJpbmcgfCBudW1iZXIgfCAoc3RyaW5nIHwgbnVtYmVyKVtdO1xuXHQyPzogJ29yJyB8ICdhbmQnO1xufVxuXHR8IHtcblx0MDogJ2lzX251bGwnIHwgJ2lzX25vdF9udWxsJztcblx0MT86ICdvcicgfCAnYW5kJztcbn07XG5cbmV4cG9ydCB0eXBlIE9BcGlGaWx0ZXJzTWFwID0geyBba2V5OiBzdHJpbmddOiAgbnVtYmVyIHwgc3RyaW5nIHwgT0FwaUZpbHRlcltdIH07XG5cbmV4cG9ydCBpbnRlcmZhY2UgT0FwaVJlcXVlc3RPcHRpb25zIHtcblx0ZGF0YT86IGFueTtcblx0ZmlsdGVycz86IE9BcGlGaWx0ZXJzTWFwO1xuXHRyZWxhdGlvbnM/OiBzdHJpbmcgfCBzdHJpbmdbXTtcblx0Y29sbGVjdGlvbj86IHN0cmluZztcblx0b3JkZXJfYnk/OiBzdHJpbmc7XG5cdG1heD86IG51bWJlcjtcblx0cGFnZT86IG51bWJlcjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNsZWFuUmVxdWVzdE9wdGlvbnMob3B0aW9uczogT0FwaVJlcXVlc3RPcHRpb25zKTogT0FwaVJlcXVlc3RPcHRpb25zIHtcblx0Y29uc3QgX29wdGlvbnM6IE9BcGlSZXF1ZXN0T3B0aW9ucyA9IHt9O1xuXHRpZiAodHlwZW9mIG9wdGlvbnMubWF4ID09PSAnbnVtYmVyJykge1xuXHRcdF9vcHRpb25zLm1heCA9IG9wdGlvbnMubWF4O1xuXHR9XG5cdGlmICh0eXBlb2Ygb3B0aW9ucy5wYWdlID09PSAnbnVtYmVyJykge1xuXHRcdF9vcHRpb25zLnBhZ2UgPSBvcHRpb25zLnBhZ2U7XG5cdH1cblxuXHRpZiAodHlwZW9mIG9wdGlvbnMucmVsYXRpb25zID09PSAnc3RyaW5nJykge1xuXHRcdF9vcHRpb25zLnJlbGF0aW9ucyA9IG9wdGlvbnMucmVsYXRpb25zO1xuXHR9XG5cdGlmICh0eXBlb2Ygb3B0aW9ucy5jb2xsZWN0aW9uID09PSAnc3RyaW5nJykge1xuXHRcdF9vcHRpb25zLmNvbGxlY3Rpb24gPSBvcHRpb25zLmNvbGxlY3Rpb247XG5cdH1cblxuXHRpZiAodHlwZW9mIG9wdGlvbnMub3JkZXJfYnkgPT09ICdzdHJpbmcnKSB7XG5cdFx0X29wdGlvbnNbJ29yZGVyX2J5J10gPSBvcHRpb25zLm9yZGVyX2J5O1xuXHR9XG5cblx0aWYgKGlzUGxhaW5PYmplY3Qob3B0aW9ucy5maWx0ZXJzKSAmJiAhaXNFbXB0eShvcHRpb25zLmZpbHRlcnMpKSB7XG5cdFx0X29wdGlvbnMuZmlsdGVycyA9IG9wdGlvbnMuZmlsdGVycztcblx0fVxuXG5cdHJldHVybiBfb3B0aW9ucztcbn1cblxuZXhwb3J0IGRlZmF1bHQgT1pvbmU7Il19