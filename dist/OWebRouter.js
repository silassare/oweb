import { Utils } from "./oweb";
const token_type_reg_map = {
    "num": (/(\d+)/).source,
    "alpha": (/([a-zA-Z]+)/).source,
    "alpha-u": (/([a-z]+)/).source,
    "alpha-l": (/([A-Z]+)/).source,
    "alpha-num": (/([a-zA-Z0-9]+)/).source,
    "alpha-num-l": (/([a-z0-9]+)/).source,
    "alpha-num-u": (/([A-Z0-9]+)/).source,
    "any": /([^/]+)/.source
}, token_reg = /:([a-z][a-z0-9_]*)/i, wLoc = window.location, wDoc = window.document, wHistory = window.history;
let escapeString = function (str) {
    return str.replace(/([.+*?=^!:${}()[\]|\/])/g, "\\$1");
};
let stringReg = function (str) {
    return new RegExp(escapeString(str));
};
let fixPath = (path) => {
    if (!path.length || path == "/") {
        return "/";
    }
    path = path.replace(/^#/, "");
    if (path[0] != "/") {
        path = "/" + path;
    }
    return path;
};
/*
 t = "path/to/:id/file/:index/name.:format";
 p = {id:"num",index:"alpha",format:"alpha-num"};
 parseDynamicPath(t,p);
*/
let parseDynamicPath = function (path, options) {
    let tokens = [], reg = "", _path = path, match;
    while ((match = token_reg.exec(_path)) != null) {
        let found = match[0], token = match[1], rule = options[token] || "any", head = _path.slice(0, match.index);
        if (head.length) {
            reg += stringReg(head).source;
        }
        if (typeof rule === "string" && rule in token_type_reg_map) {
            reg += token_type_reg_map[rule];
        }
        else if (rule instanceof RegExp) {
            reg += rule.source;
        }
        else {
            throw new Error("Invalid rule for token ':" + token + "' in path '" + path + "'");
        }
        tokens.push(token);
        _path = _path.slice(match.index + found.length);
    }
    if (!reg.length) {
        return {
            reg: null,
            tokens: tokens
        };
    }
    if (_path.length) {
        reg += stringReg(_path).source;
    }
    return {
        reg: new RegExp("^" + reg + "$"),
        tokens: tokens
    };
};
export class OWebRoute {
    constructor(path, rules, action) {
        if (path instanceof RegExp) {
            this.path = path.toString();
            this.reg = path;
            this.tokens = Utils.isArray(rules) ? rules : [];
        }
        else if (Utils.isString(path) && path.length) {
            rules = (Utils.isPlainObject(rules) ? rules : {});
            let p = parseDynamicPath(path, rules);
            this.path = path;
            this.reg = p.reg;
            this.tokens = p.tokens;
        }
        else {
            throw new TypeError("[OWebRoute] invalid route path, string or RegExp required.");
        }
        if ("function" !== typeof action) {
            throw new TypeError(`[OWebRoute] invalid action type, got "${typeof action}" instead of "function".`);
        }
        this.action = action;
    }
    isDynamic() {
        return this.reg != null;
    }
    getPath() {
        return this.path;
    }
    getAction() {
        return this.action;
    }
    is(path) {
        return (this.reg) ? this.reg.test(path) : this.path === path;
    }
    parse(path) {
        if (this.isDynamic()) {
            let founds;
            if (founds = String(path).match(this.reg)) {
                return this.tokens.reduce((acc, key, index) => {
                    acc[key] = founds[index + 1];
                    return acc;
                }, {});
            }
        }
        return {};
    }
}
export class OWebRouteContext {
    constructor(router, path, state) {
        this._stopped = false;
        this._path = path;
        this._tokens = {};
        this._state = state || {};
        this._router = router;
    }
    getToken(token) {
        return this._tokens[token];
    }
    getTokens() {
        return Object.create(this._tokens);
    }
    getPath() {
        return this._path;
    }
    getStateItem(key) {
        return this._state[key];
    }
    setStateItem(key, value) {
        this._state[key] = value;
        return this;
    }
    stopped() {
        return this._stopped;
    }
    stop() {
        if (!this._stopped) {
            console.warn("[OWebDispatchContext] route context will stop.");
            this.save(); // save before stop
            this._stopped = true;
            console.warn("[OWebDispatchContext] route context was stopped!");
        }
        else {
            console.warn("[OWebDispatchContext] route context already stopped!");
        }
        return this;
    }
    save() {
        if (!this.stopped()) {
            console.log("[OWebDispatchContext] saving state!");
            this._router.replaceHistory(this._path, this._state);
        }
        else {
            console.error("[OWebDispatchContext] you shouldn't try to save when stopped.");
        }
        return this;
    }
    actionRunner(route) {
        this._tokens = route.parse(this._path);
        route.getAction()(this);
        return this;
    }
}
export default class OWebRouter {
    constructor(baseUrl, hashMode = true) {
        this._current_path = "";
        this._routes = [];
        this._initialized = false;
        this._listening = false;
        this._notFound = undefined;
        this._dispatch_id = 0;
        let r = this;
        this._baseUrl = baseUrl;
        this._hashMode = hashMode;
        this._popStateListener = (e) => {
            r.onPopState(e);
        };
        console.log("[OWebRouter] ready!");
    }
    start(firstRun = true, path = this.getLocationPath()) {
        if (!this._initialized) {
            this._initialized = true;
            this.register();
            console.log("[OWebRouter] start routing!");
            console.log("[OWebRouter] watching routes ->", this._routes);
            firstRun && this.browseTo(path, undefined, false);
        }
        else {
            console.warn("[OWebRouter] router already started!");
        }
        return this;
    }
    stopRouting() {
        if (this._initialized) {
            this._initialized = false;
            this.unregister();
            console.log("[OWebRouter] stop routing!");
        }
        else {
            console.warn("[OWebRouter] you should start routing first!");
        }
        return this;
    }
    getCurrentPath() {
        return this._current_path;
    }
    getLocationPath() {
        // TODO when using pathname make sure to remove base uri pathname for app in subdirectory
        return fixPath(wLoc[this._hashMode ? "hash" : "pathname"]);
    }
    pathToURL(path) {
        path = fixPath(path);
        return new URL(this._hashMode ? "#" + path : path, this._baseUrl);
    }
    register() {
        if (!this._listening) {
            this._listening = true;
            window.addEventListener("popstate", this._popStateListener, false);
        }
        return this;
    }
    unregister() {
        if (this._listening) {
            this._listening = false;
            window.removeEventListener("popstate", this._popStateListener, false);
        }
        return this;
    }
    onPopState(e) {
        console.log("[OWebRouter] popstate ->", arguments);
        if (e.state) {
            this.browseTo(e.state.path, e.state.data, false);
        }
        else {
            this.browseTo(this.getLocationPath(), undefined, false);
        }
    }
    on(path, rules = {}, action) {
        this._routes.push(new OWebRoute(path, rules, action));
        return this;
    }
    notFound(callback) {
        this._notFound = callback;
        return this;
    }
    goBack(distance = 1) {
        if (distance > 0) {
            console.log("[OWebRouter] going back -> ", distance);
            let hLen = wHistory.length;
            if (hLen > 1) {
                if (hLen >= distance) {
                    wHistory.go(-distance);
                }
                else {
                    wHistory.go(-hLen);
                }
            }
            else {
                console.warn("[OWebRouter] can't go back -> history.length === 1", distance);
            }
        }
        return this;
    }
    browseTo(path, state = {}, push = true, ignoreIfSamePath = false) {
        path = fixPath(path);
        console.log("[OWebRouter] browsing to -> ", path, state, push);
        if (ignoreIfSamePath && this._current_path === path) {
            console.log("[OWebRouter] ignore same path -> ", path);
            return this;
        }
        if (this._current_dispatcher && this._current_dispatcher.isActive()) {
            this._current_dispatcher.cancel();
        }
        this._current_path = path;
        push && this.addHistory(path, state);
        let cd = this._current_dispatcher = this.createDispatcher(path, state, ++this._dispatch_id);
        cd.dispatch();
        if (cd.id === this._dispatch_id && !cd.context.stopped()) {
            if (!cd.found.length) {
                console.warn("[OWebRouter] no route found for path ->", path);
                if (this._notFound) {
                    this._notFound(path);
                }
                else {
                    console.error("[OWebRouter] notFound action is not defined!");
                    this.stopRouting();
                }
            }
            else {
                cd.context.save();
                console.log("[OWebRouter] success ->", path);
            }
        }
        return this;
    }
    addHistory(path, data, title = "") {
        path = fixPath(path);
        title = title && title.length ? title : wDoc.title;
        let state = {
            "path": path,
            "data": data
        }, url = this.pathToURL(path);
        wHistory.pushState(state, title, url.href);
        console.warn("[OWebDispatchContext] history added", wHistory.state, url.href);
        return this;
    }
    replaceHistory(path, data, title = "") {
        path = fixPath(path);
        title = title && title.length ? title : wDoc.title;
        let state = {
            "path": path,
            "data": data
        }, url = this.pathToURL(path);
        wHistory.replaceState(state, title, url.href);
        console.warn("[OWebDispatchContext] history updated", wHistory.state);
        return this;
    }
    createDispatcher(path, state, id) {
        console.log(`[OWebRouter][dispatcher-${id}] creation.`);
        let ctx = this, found = [], len = this._routes.length, active = false, routeContext = new OWebRouteContext(this, path, state), o = {
            context: routeContext,
            id,
            found,
            isActive: () => active,
            cancel: function () {
                if (active) {
                    active = false;
                    console.warn(`[OWebRouter][dispatcher-${id}] cancel called!`);
                }
                else {
                    console.error(`[OWebRouter][dispatcher-${id}] cancel called when inactive.`);
                }
            },
            dispatch: function () {
                if (!active) {
                    console.log(`[OWebRouter][dispatcher-${id}] start ->`, o);
                    active = true;
                    let i = -1;
                    while (++i < len) {
                        if (!active) {
                            console.warn(`[OWebRouter][dispatcher-${id}] browseTo called while dispatching: ${path} -> ${ctx._current_path}`);
                            break;
                        }
                        let route = ctx._routes[i];
                        if (routeContext.stopped()) {
                            console.warn(`[OWebRouter][dispatcher-${id}] canceled for "${path}" by route action ->`, route.getAction());
                            o.cancel();
                            break;
                        }
                        if (route.is(path)) {
                            found.push(route);
                            routeContext.actionRunner(route);
                        }
                    }
                    active = false;
                }
                else {
                    console.warn(`[OWebRouter][dispatcher-${id}] is busy`);
                }
            }
        };
        return o;
    }
}
//# sourceMappingURL=data:application/json;base64,