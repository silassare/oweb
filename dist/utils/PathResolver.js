const PathResolver = {
    DS: '/',
    resolve(root, path) {
        root = this.normalize(root);
        path = this.normalize(path);
        if (this.isRelative(path)) {
            let fullPath;
            if (path[0] === '/' || /^[\w]+:/.test(path)) {
                fullPath = path;
            }
            else {
                fullPath = root + this.DS + path;
            }
            path = this.job(fullPath).replace(/^(https?):[/]([^/])/, '$1://$2');
        }
        return path;
    },
    job(path) {
        const _in = path.split(this.DS);
        const out = [];
        if (path[0] === this.DS) {
            out.push('');
        }
        for (let i = 0; i < _in.length; i++) {
            const part = _in[i];
            if (!part.length || part === '.')
                continue;
            if (part !== '..') {
                out.push(part);
            }
            else if (out.length > 0) {
                out.pop();
            }
            else {
                throw new Error('[PathResolver] climbing above root is dangerous: ' + path);
            }
        }
        if (!out.length) {
            return this.DS;
        }
        if (out.length === 1) {
            out.push(null);
        }
        return out.join(this.DS);
    },
    normalize(path) {
        return path.replace(/\\/g, '/');
    },
    isRelative(path) {
        return (/^\.{1,2}[/\\]?/.test(path) ||
            /[/\\]\.{1,2}[/\\]/.test(path) ||
            /[/\\]\.{1,2}$/.test(path) ||
            /^[a-zA-Z0-9_.][^:]*$/.test(path));
    },
};
export default PathResolver;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGF0aFJlc29sdmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL1BhdGhSZXNvbHZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLFlBQVksR0FBRztJQUlwQixFQUFFLEVBQUUsR0FBRztJQVFQLE9BQU8sQ0FBQyxJQUFZLEVBQUUsSUFBWTtRQUNqQyxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1QixJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUU1QixJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7WUFDMUIsSUFBSSxRQUFRLENBQUM7WUFFYixJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFLNUMsUUFBUSxHQUFHLElBQUksQ0FBQzthQUNoQjtpQkFBTTtnQkFDTixRQUFRLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDO2FBQ2pDO1lBRUQsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLHFCQUFxQixFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQ3BFO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBT0QsR0FBRyxDQUFDLElBQVk7UUFDZixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUNoQyxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFHZixJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsRUFBRSxFQUFFO1lBQ3hCLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7U0FDYjtRQUVELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO1lBQ3BDLE1BQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUVwQixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLEtBQUssR0FBRztnQkFBRSxTQUFTO1lBRTNDLElBQUksSUFBSSxLQUFLLElBQUksRUFBRTtnQkFFbEIsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNmO2lCQUFNLElBQUksR0FBRyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBRTFCLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQzthQUNWO2lCQUFNO2dCQUVOLE1BQU0sSUFBSSxLQUFLLENBQ2QsbURBQW1ELEdBQUcsSUFBSSxDQUMxRCxDQUFDO2FBQ0Y7U0FDRDtRQUVELElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFO1lBQ2hCLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQztTQUNmO1FBRUQsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNyQixHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ2Y7UUFFRCxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQzFCLENBQUM7SUFPRCxTQUFTLENBQUMsSUFBWTtRQUNyQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFNRCxVQUFVLENBQUMsSUFBWTtRQUN0QixPQUFPLENBQ04sZ0JBQWdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztZQUMzQixtQkFBbUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQzlCLGVBQWUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQzFCLHNCQUFzQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FDakMsQ0FBQztJQUNILENBQUM7Q0FDRCxDQUFDO0FBRUYsZUFBZSxZQUFZLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBQYXRoUmVzb2x2ZXIgPSB7XG5cdC8qKlxuXHQgKiBUaGUgZGlyZWN0b3J5IHNlcGFyYXRvci5cblx0ICovXG5cdERTOiAnLycsXG5cblx0LyoqXG5cdCAqIFJlc29sdmUgYSBnaXZlbiBwYXRoIHRvIHRoZSB0aGUgZ2l2ZW4gcm9vdC5cblx0ICpcblx0ICogQHBhcmFtIHJvb3Rcblx0ICogQHBhcmFtIHBhdGhcblx0ICovXG5cdHJlc29sdmUocm9vdDogc3RyaW5nLCBwYXRoOiBzdHJpbmcpOiBzdHJpbmcge1xuXHRcdHJvb3QgPSB0aGlzLm5vcm1hbGl6ZShyb290KTtcblx0XHRwYXRoID0gdGhpcy5ub3JtYWxpemUocGF0aCk7XG5cblx0XHRpZiAodGhpcy5pc1JlbGF0aXZlKHBhdGgpKSB7XG5cdFx0XHRsZXQgZnVsbFBhdGg7XG5cblx0XHRcdGlmIChwYXRoWzBdID09PSAnLycgfHwgL15bXFx3XSs6Ly50ZXN0KHBhdGgpKSB7XG5cdFx0XHRcdC8vIHBhdGggc3RhcnQgZm9ybSB0aGUgcm9vdFxuXHRcdFx0XHQvLyBsaW51eCAtIHVuaXhcdC0+IC9cblx0XHRcdFx0Ly8gd2luZG93c1x0XHQtPiBEOlxuXG5cdFx0XHRcdGZ1bGxQYXRoID0gcGF0aDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZ1bGxQYXRoID0gcm9vdCArIHRoaXMuRFMgKyBwYXRoO1xuXHRcdFx0fVxuXG5cdFx0XHRwYXRoID0gdGhpcy5qb2IoZnVsbFBhdGgpLnJlcGxhY2UoL14oaHR0cHM/KTpbL10oW14vXSkvLCAnJDE6Ly8kMicpO1xuXHRcdH1cblxuXHRcdHJldHVybiBwYXRoO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBEbyB0aGUgcGF0aCByZXNvbHZpbmcgam9iLlxuXHQgKlxuXHQgKiBAcGFyYW0gcGF0aFxuXHQgKi9cblx0am9iKHBhdGg6IHN0cmluZyk6IHN0cmluZyB7XG5cdFx0Y29uc3QgX2luID0gcGF0aC5zcGxpdCh0aGlzLkRTKTtcblx0XHRjb25zdCBvdXQgPSBbXTtcblxuXHRcdC8vIHByZXNlcnZlIGxpbnV4IHJvb3QgZmlyc3QgY2hhciAnLycgbGlrZSBpbjogL3Jvb3QvcGF0aC90by9cblx0XHRpZiAocGF0aFswXSA9PT0gdGhpcy5EUykge1xuXHRcdFx0b3V0LnB1c2goJycpO1xuXHRcdH1cblxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgX2luLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCBwYXJ0ID0gX2luW2ldO1xuXHRcdFx0Ly8gaWdub3JlIHBhcnQgdGhhdCBoYXZlIG5vIHZhbHVlXG5cdFx0XHRpZiAoIXBhcnQubGVuZ3RoIHx8IHBhcnQgPT09ICcuJykgY29udGludWU7XG5cblx0XHRcdGlmIChwYXJ0ICE9PSAnLi4nKSB7XG5cdFx0XHRcdC8vIGNvb2wgd2UgZm91bmQgYSBuZXcgcGFydFxuXHRcdFx0XHRvdXQucHVzaChwYXJ0KTtcblx0XHRcdH0gZWxzZSBpZiAob3V0Lmxlbmd0aCA+IDApIHtcblx0XHRcdFx0Ly8gZ29pbmcgYmFjayB1cD8gc3VyZVxuXHRcdFx0XHRvdXQucG9wKCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBub3cgaGVyZSB3ZSBkb24ndCBsaWtlXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihcblx0XHRcdFx0XHQnW1BhdGhSZXNvbHZlcl0gY2xpbWJpbmcgYWJvdmUgcm9vdCBpcyBkYW5nZXJvdXM6ICcgKyBwYXRoXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCFvdXQubGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5EUztcblx0XHR9XG5cblx0XHRpZiAob3V0Lmxlbmd0aCA9PT0gMSkge1xuXHRcdFx0b3V0LnB1c2gobnVsbCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG91dC5qb2luKHRoaXMuRFMpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBOb3JtYWxpemUgYSBnaXZlbiBwYXRoLlxuXHQgKlxuXHQgKiBAcGFyYW0gcGF0aFxuXHQgKi9cblx0bm9ybWFsaXplKHBhdGg6IHN0cmluZyk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIHBhdGgucmVwbGFjZSgvXFxcXC9nLCAnLycpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBDaGVja3MgaWYgYSBwYXRoIGlzIGEgcmVsYXRpdmUgcGF0aC5cblx0ICogQHBhcmFtIHBhdGhcblx0ICovXG5cdGlzUmVsYXRpdmUocGF0aDogc3RyaW5nKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIChcblx0XHRcdC9eXFwuezEsMn1bL1xcXFxdPy8udGVzdChwYXRoKSB8fFxuXHRcdFx0L1svXFxcXF1cXC57MSwyfVsvXFxcXF0vLnRlc3QocGF0aCkgfHxcblx0XHRcdC9bL1xcXFxdXFwuezEsMn0kLy50ZXN0KHBhdGgpIHx8XG5cdFx0XHQvXlthLXpBLVowLTlfLl1bXjpdKiQvLnRlc3QocGF0aClcblx0XHQpO1xuXHR9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgUGF0aFJlc29sdmVyO1xuIl19