export const id = (function () {
    let _naturalId = 0;
    return () => 'id-' + _naturalId++;
})();
export const noop = () => void 0;
// ==========TYPE CHECKERS====================================
export const isArray = Array.isArray;
export const isPlainObject = (a) => Object.prototype.toString.call(a) === '[object Object]';
export const isString = (a) => typeof a === 'string';
export const isFunction = (a) => typeof a === 'function';
export function isEmpty(a) {
    if (isArray(a)) {
        return !a.length;
    }
    if (isPlainObject(a)) {
        return !Object.keys(a).length;
    }
    if (typeof a === 'string') {
        return a.trim().length === 0;
    }
    if (typeof a === 'number') {
        return isNaN(a);
    }
    return !a;
}
export const isNotEmpty = (a) => !isEmpty(a);
export const toArray = (a) => [...a];
export const escapeRegExp = (str) => str.replace(/([.+*?=^!:${}()[\]|\\/])/g, '\\$1');
// ==========HELPERS====================================
export function callback(fn, args, ctx) {
    if (typeof fn === 'function') {
        return fn.apply(ctx, args);
    }
    return null;
}
export function forEach(obj, fn) {
    Object.keys(obj).forEach((key) => {
        const value = obj[key];
        fn(value, key);
    });
}
export const assign = Object.assign ||
    function _assign(...args) {
        const to = args[0];
        let from, symbols;
        for (let s = 1; s < args.length; s++) {
            from = Object(args[s]);
            for (const key in from) {
                if (Object.prototype.hasOwnProperty.call(from, key)) {
                    to[key] = from[key];
                }
            }
            if ('getOwnPropertySymbols' in Object) {
                symbols = Object.getOwnPropertySymbols(from);
                for (let i = 0; i < symbols.length; i++) {
                    if (Object.prototype.propertyIsEnumerable.call(from, symbols[i])) {
                        to[symbols[i]] = from[symbols[i]];
                    }
                }
            }
        }
        return to;
    };
export function clone(a) {
    return JSON.parse(JSON.stringify(a));
}
export function stringPlaceholderReplace(str, data) {
    if (isString(str) && str.length && isPlainObject(data)) {
        const keys = Object.keys(data).sort().reverse();
        let reg;
        if (keys.length) {
            const m = keys.join('|');
            reg = new RegExp(':(' + m + ')', 'g');
            return str.replace(reg, function (...args) {
                const replacement = data[args[1]];
                if (replacement === undefined) {
                    return args[0];
                }
                return replacement;
            });
        }
    }
    return str;
}
export function textToLineString(text) {
    const reg = /["'\\\n\r\t\u2028\u2029]/g, toEscapes = {
        '"': '"',
        '\'': '\'',
        '\\': '\\',
        '\n': 'n',
        '\r': 'r',
        '\t': 't',
        '\u2028': '2028',
        '\u2029': '2029',
    };
    return text.replace(reg, (match) => '\\' + toEscapes[match]);
}
// ==========MATH====================================
export function _setDigitsSep(x, sep) {
    const s = String(x), ans = [], j = s.indexOf('.'), start = j !== -1 ? j : s.length, end = j !== -1 ? s.slice(start + 1) : [];
    let count = 0, i = start;
    for (; i >= 0; i--) {
        if (count === 3) {
            count = 0;
            ans[i] = i !== 0 ? sep + s[i] : s[i];
        }
        else {
            ans[i] = s[i];
        }
        count++;
    }
    return ans.concat(end).join('');
}
export function numberFormat(x, dec = 2, decimalSep = '.', digitsSep = ' ') {
    if (!x) {
        return '';
    }
    let ans = parseFloat(String(x));
    if (dec >= 0) {
        const decimalPow = Math.pow(10, dec);
        ans = Math.floor(ans * decimalPow) / decimalPow;
    }
    const n = _setDigitsSep(ans, digitsSep);
    const a = n.split('');
    const decimalPos = a.lastIndexOf('.');
    if (decimalPos >= 0 && decimalSep !== '.') {
        a[decimalPos] = decimalSep;
    }
    return a.join('');
}
export function gt(x, y, eq = false) {
    return eq ? x >= y : x > y;
}
export function lt(x, y, eq = false) {
    return eq ? x <= y : x < y;
}
export function between(x, a, b, eq = false) {
    return eq ? x >= a && x <= b : x > a && x < b;
}
export function isRange(a, b) {
    return typeof a === 'number' && typeof b === 'number' && a < b;
}
export function isInDOM(element, inBody = false) {
    let _ = element, last;
    while (_) {
        last = _;
        if (inBody && last === document.body) {
            break;
        }
        _ = _.parentNode;
    }
    return inBody ? last === document.body : last === document;
}
export function shuffle(a) {
    let j, x, i;
    for (i = a.length - 1; i > 0; i--) {
        j = Math.floor(Math.random() * (i + 1));
        x = a[i];
        a[i] = a[j];
        a[j] = x;
    }
    return a;
}
export function parseQueryString(str) {
    if (str.charAt(0) === '?')
        str = str.substring(1);
    if (!str.length)
        return {};
    const pairs = str.split('&'), params = {};
    for (let i = 0, len = pairs.length; i < len; i++) {
        const pair = pairs[i].split('='), key = decodeURIComponent(pair[0]), value = pair.length === 2 ? decodeURIComponent(pair[1]) : null;
        if (params[key] != null) {
            if (!isArray(params[key])) {
                params[key] = [params[key]];
            }
            params[key].push(value);
        }
        else
            params[key] = value;
    }
    return params;
}
export function preventDefault(e) {
    if (!e) {
        if (window.event)
            e = window.event;
        else
            return;
    }
    if (e.preventDefault)
        e.preventDefault();
    if (e.cancelBubble != null)
        e.cancelBubble = true;
    if (e.stopPropagation)
        e.stopPropagation();
    if (window.event)
        e.returnValue = false;
    // if (e.cancel != null) e.cancel = true;
}
export function isValidAge(day, month, year, minAge, maxAge) {
    // depending on the year, calculate the number of days in the month
    const februaryDays = year % 4 === 0 ? 29 : 28, daysInMonth = [
        31,
        februaryDays,
        31,
        30,
        31,
        30,
        31,
        31,
        30,
        31,
        30,
        31,
    ];
    // first, check the incoming month and year are valid.
    if (!month || !day || !year) {
        return false;
    }
    if (1 > month || month > 12) {
        return false;
    }
    if (year < 0) {
        return false;
    }
    if (1 > day || day > daysInMonth[month - 1]) {
        return false;
    }
    // if required, verify the current date is LATER than the incoming date.
    if (minAge !== undefined || maxAge !== undefined) {
        // we get current year
        const currentYear = new Date().getFullYear(), age = currentYear - year;
        if (age < 0) {
            return false;
        }
        if (age < minAge) {
            return false;
        }
        if (age > maxAge) {
            return false;
        }
    }
    return true;
}
export function fileSizeFormat(size /* in bytes */, decimalPoint = '.', thousandsSep = ' ') {
    const units = ['byte', 'Kb', 'Mb', 'Gb', 'Tb'], iMax = units.length;
    let i = 0, result = 0;
    size = parseFloat(String(size));
    while (size >= 1 && i < iMax) {
        result = size;
        size /= 1000; // not 1024
        i++;
    }
    const parts = String(result).split('.'), head = parseInt(parts[0]) === result
        ? result
        : numberFormat(result, 2, decimalPoint, thousandsSep);
    return head + ' ' + units[i === 0 ? 0 : i - 1];
}
/**
 * Opens the provided url by injecting a hidden iframe that calls
 * window.open(), then removes the iframe from the DOM.
 *
 * Prevent reverse tabnabbing phishing attacks caused by _blank
 *
 * https://mathiasbynens.github.io/rel-noopener/
 *
 * https://github.com/danielstjules/blankshield/blob/6e208bf25a44bf50d1a5e85ae96fee0c015d05bc/blankshield.js#L166
 *
 * @param url
 * @param strWindowName
 * @param strWindowFeatures
 */
export function safeOpen(url = '', strWindowName = '', strWindowFeatures = '') {
    if (window.navigator.userAgent.indexOf('MSIE') !== -1) {
        // IE before 11
        const child = open.apply(window, [
            url,
            strWindowName,
            strWindowFeatures,
        ]);
        if (child) {
            child.opener = null;
        }
        return child;
    }
    const iframe = document.createElement('iframe');
    iframe.style.display = 'none';
    document.body.appendChild(iframe);
    const iframeDoc = (iframe.contentDocument ||
        iframe.contentWindow.document);
    let openArgs = '"' + url + '"';
    if (strWindowName) {
        openArgs += ', "' + strWindowName + '"';
    }
    if (strWindowFeatures) {
        openArgs += ', "' + strWindowFeatures + '"';
    }
    const script = iframeDoc.createElement('script');
    script.type = 'text/javascript';
    script.text =
        'window.parent = null; window.top = null;' +
            'window.frameElement = null; var child = window.open(' +
            openArgs +
            ');' +
            'if (child) { child.opener = null }';
    iframeDoc.body.appendChild(script);
    const newWin = iframe.contentWindow.child;
    document.body.removeChild(iframe);
    return newWin;
}
export const logger = (function _logger() {
    let _showLog = true;
    const _fn = function (type) {
        return _showLog ? console[type] : noop;
    };
    return {
        off() {
            _showLog = false;
        },
        on() {
            _showLog = true;
        },
        get memory() { return _fn('memory'); },
        get assert() { return _fn('assert'); },
        get clear() { return _fn('clear'); },
        get count() { return _fn('count'); },
        get countReset() { return _fn('countReset'); },
        get debug() { return _fn('debug'); },
        get dir() { return _fn('dir'); },
        get dirxml() { return _fn('dirxml'); },
        get error() { return _fn('error'); },
        get exception() { return _fn('exception'); },
        get group() { return _fn('group'); },
        get groupCollapsed() { return _fn('groupCollapsed'); },
        get groupEnd() { return _fn('groupEnd'); },
        get info() { return _fn('info'); },
        get log() { return _fn('log'); },
        get table() { return _fn('table'); },
        get time() { return _fn('time'); },
        get timeEnd() { return _fn('timeEnd'); },
        get timeLog() { return _fn('timeLog'); },
        get timeStamp() { return _fn('timeStamp'); },
        get trace() { return _fn('trace'); },
        get warn() { return _fn('warn'); },
    };
})();
export function encode(val) {
    return encodeURIComponent(val)
        .replace(/%24/g, '$')
        .replace(/%20/g, '+')
        .replace(/%3A/gi, ':')
        .replace(/%2C/gi, ',')
        .replace(/%5B/gi, '[')
        .replace(/%5D/gi, ']');
}
/**
 * Build query string from object. Recursively!
 * @param params
 * @param prefix
 */
export function buildQueryString(params, prefix) {
    if (params instanceof URLSearchParams) {
        return params.toString();
    }
    const duplicates = {}, str = [];
    for (const prop in params) {
        if (!Object.prototype.hasOwnProperty.call(params, prop)) {
            continue;
        }
        const key = prefix ? prefix + '[' + prop + ']' : prop, value = params[prop];
        let pair;
        if (value !== undefined) {
            if (value === null) {
                pair = encode(key);
            }
            else if (isPlainObject(value)) {
                pair = buildQueryString(value, key);
            }
            else if (isArray(value)) {
                pair = value
                    .reduce(function (acc, item, index) {
                    if (!duplicates[key]) {
                        duplicates[key] = {};
                    }
                    if (!duplicates[key][item]) {
                        duplicates[key][item] = true;
                        return acc.concat(buildQueryString({ [key + '[' + index + ']']: item }));
                    }
                    return acc;
                }, [])
                    .join('&');
            }
            else { // scalar type
                pair =
                    encode(key) + '=' + encode(value);
            }
            str.push(pair || key);
        }
    }
    return str.join('&');
}
/**
 * Build a URL with a given params
 *
 * @param url
 * @param params
 */
export function buildURL(url, params) {
    if (!params) {
        return url;
    }
    const serializedParams = buildQueryString(params);
    if (serializedParams) {
        const hashIndex = url.indexOf('#');
        if (hashIndex !== -1) {
            url = url.slice(0, hashIndex);
        }
        url += (url.indexOf('?') === -1 ? '?' : '&') + serializedParams;
    }
    return url;
}
export * from './scriptLoader';
export { default as PathResolver } from './PathResolver';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUM7SUFDbEIsSUFBSSxVQUFVLEdBQUcsQ0FBQyxDQUFDO0lBRW5CLE9BQU8sR0FBVyxFQUFFLENBQUMsS0FBSyxHQUFHLFVBQVUsRUFBRSxDQUFDO0FBQzNDLENBQUMsQ0FBQyxFQUFFLENBQUM7QUFFTCxNQUFNLENBQUMsTUFBTSxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7QUFFakMsOERBQThEO0FBQzlELE1BQU0sQ0FBQyxNQUFNLE9BQU8sR0FBUyxLQUFLLENBQUMsT0FBTyxDQUFDO0FBQzNDLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxDQUFDLENBQU0sRUFBVyxFQUFFLENBQ2hELE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxpQkFBaUIsQ0FBQztBQUN6RCxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQVEsQ0FBQyxDQUFNLEVBQWUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLFFBQVEsQ0FBQztBQUM1RSxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQU0sQ0FBQyxDQUFNLEVBQWdDLEVBQUUsQ0FDckUsT0FBTyxDQUFDLEtBQUssVUFBVSxDQUFDO0FBRXpCLE1BQU0sVUFBVSxPQUFPLENBQUMsQ0FBTTtJQUM3QixJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUNmLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0tBQ2pCO0lBQ0QsSUFBSSxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDckIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0tBQzlCO0lBRUQsSUFBSSxPQUFPLENBQUMsS0FBSyxR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QztBQUN0QixDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsUUFBUSxDQUFDLEdBQVcsRUFBRSxNQUFnQztJQUNyRSxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ1osT0FBTyxHQUFHLENBQUM7S0FDWDtJQUVELE1BQU0sZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFbEQsSUFBSSxnQkFBZ0IsRUFBRTtRQUNyQixNQUFNLFNBQVMsR0FBRyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ25DLElBQUksU0FBUyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ3JCLEdBQUcsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQztTQUM5QjtRQUVELEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsZ0JBQWdCLENBQUM7S0FDaEU7SUFFRCxPQUFPLEdBQUcsQ0FBQztBQUNaLENBQUM7QUFFRCxjQUFjLGdCQUFnQixDQUFDO0FBRS9CLE9BQU8sRUFBQyxPQUFPLElBQUksWUFBWSxFQUFDLE1BQU0sZ0JBQWdCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgaWQgPSAoZnVuY3Rpb24gKCkge1xuXHRsZXQgX25hdHVyYWxJZCA9IDA7XG5cblx0cmV0dXJuICgpOiBzdHJpbmcgPT4gJ2lkLScgKyBfbmF0dXJhbElkKys7XG59KSgpO1xuXG5leHBvcnQgY29uc3Qgbm9vcCA9ICgpID0+IHZvaWQgMDtcblxuLy8gPT09PT09PT09PVRZUEUgQ0hFQ0tFUlM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmV4cG9ydCBjb25zdCBpc0FycmF5ICAgICAgID0gQXJyYXkuaXNBcnJheTtcbmV4cG9ydCBjb25zdCBpc1BsYWluT2JqZWN0ID0gKGE6IGFueSk6IGEgaXMge30gPT5cblx0T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGEpID09PSAnW29iamVjdCBPYmplY3RdJztcbmV4cG9ydCBjb25zdCBpc1N0cmluZyAgICAgID0gKGE6IGFueSk6IGEgaXMgc3RyaW5nID0+IHR5cGVvZiBhID09PSAnc3RyaW5nJztcbmV4cG9ydCBjb25zdCBpc0Z1bmN0aW9uICAgID0gKGE6IGFueSk6IGEgaXMgKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnkgPT5cblx0dHlwZW9mIGEgPT09ICdmdW5jdGlvbic7XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0VtcHR5KGE6IGFueSk6IGJvb2xlYW4ge1xuXHRpZiAoaXNBcnJheShhKSkge1xuXHRcdHJldHVybiAhYS5sZW5ndGg7XG5cdH1cblx0aWYgKGlzUGxhaW5PYmplY3QoYSkpIHtcblx0XHRyZXR1cm4gIU9iamVjdC5rZXlzKGEpLmxlbmd0aDtcblx0fVxuXG5cdGlmICh0eXBlb2YgYSA9PT0gJ3N0cmluZycpIHtcblx0XHRyZXR1cm4gYS50cmltKCkubGVuZ3RoID09PSAwO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBhID09PSAnbnVtYmVyJykge1xuXHRcdHJldHVybiBpc05hTihhKTtcblx0fVxuXG5cdHJldHVybiAhYTtcbn1cblxuZXhwb3J0IGNvbnN0IGlzTm90RW1wdHkgICA9IChhOiBhbnkpOiBib29sZWFuID0+ICFpc0VtcHR5KGEpO1xuZXhwb3J0IGNvbnN0IHRvQXJyYXkgICAgICA9IChhOiBhbnkpOiBhbnlbXSA9PiBbLi4uYV07XG5leHBvcnQgY29uc3QgZXNjYXBlUmVnRXhwID0gKHN0cjogc3RyaW5nKSA9PlxuXHRzdHIucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXxcXFxcL10pL2csICdcXFxcJDEnKTtcblxuLy8gPT09PT09PT09PUhFTFBFUlM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmV4cG9ydCBmdW5jdGlvbiBjYWxsYmFjayhmbjogYW55LCBhcmdzPzogYW55W10sIGN0eD86IGFueSk6IGFueSB7XG5cdGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicpIHtcblx0XHRyZXR1cm4gZm4uYXBwbHkoY3R4LCBhcmdzKTtcblx0fVxuXG5cdHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZm9yRWFjaDxUPihcblx0b2JqOiB7IFtrZXk6IHN0cmluZ106IFQgfSB8IFRbXSxcblx0Zm46ICh2YWx1ZTogVCwga2V5OiBhbnkpID0+IHZvaWQsXG4pIHtcblx0T2JqZWN0LmtleXMob2JqKS5mb3JFYWNoKChrZXk6IHN0cmluZykgPT4ge1xuXHRcdGNvbnN0IHZhbHVlOiBUID0gKG9iaiBhcyBhbnkpW2tleV07XG5cdFx0Zm4odmFsdWUsIGtleSk7XG5cdH0pO1xufVxuXG5leHBvcnQgY29uc3QgYXNzaWduID1cblx0XHRcdFx0IChPYmplY3QgYXMgYW55KS5hc3NpZ24gfHxcblx0XHRcdFx0IGZ1bmN0aW9uIF9hc3NpZ24oLi4uYXJnczogb2JqZWN0W10pIHtcblx0XHRcdFx0XHQgY29uc3QgdG8gPSBhcmdzWzBdO1xuXHRcdFx0XHRcdCBsZXQgZnJvbSwgc3ltYm9scztcblxuXHRcdFx0XHRcdCBmb3IgKGxldCBzID0gMTsgcyA8IGFyZ3MubGVuZ3RoOyBzKyspIHtcblx0XHRcdFx0XHRcdCBmcm9tID0gT2JqZWN0KGFyZ3Nbc10pO1xuXG5cdFx0XHRcdFx0XHQgZm9yIChjb25zdCBrZXkgaW4gZnJvbSkge1xuXHRcdFx0XHRcdFx0XHQgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdFx0XHRcdFx0ICh0byBhcyBhbnkpW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHRcdFx0XHRcdCB9XG5cdFx0XHRcdFx0XHQgfVxuXG5cdFx0XHRcdFx0XHQgaWYgKCdnZXRPd25Qcm9wZXJ0eVN5bWJvbHMnIGluIE9iamVjdCkge1xuXHRcdFx0XHRcdFx0XHQgc3ltYm9scyA9IChPYmplY3QgYXMgYW55KS5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRcdFx0XHRcdCBmb3IgKGxldCBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRcdFx0XHQgaWYgKE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ICh0byBhcyBhbnkpW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0XHRcdFx0XHQgfVxuXHRcdFx0XHRcdFx0XHQgfVxuXHRcdFx0XHRcdFx0IH1cblx0XHRcdFx0XHQgfVxuXG5cdFx0XHRcdFx0IHJldHVybiB0bztcblx0XHRcdFx0IH07XG5cbmV4cG9ydCBmdW5jdGlvbiBjbG9uZTxUPihhOiBUKTogVCB7XG5cdHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGEpKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN0cmluZ1BsYWNlaG9sZGVyUmVwbGFjZShcblx0c3RyOiBzdHJpbmcsXG5cdGRhdGE6IG9iamVjdCxcbik6IHN0cmluZyB7XG5cdGlmIChpc1N0cmluZyhzdHIpICYmIHN0ci5sZW5ndGggJiYgaXNQbGFpbk9iamVjdChkYXRhKSkge1xuXHRcdGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhkYXRhKS5zb3J0KCkucmV2ZXJzZSgpO1xuXHRcdGxldCByZWc7XG5cblx0XHRpZiAoa2V5cy5sZW5ndGgpIHtcblx0XHRcdGNvbnN0IG0gPSBrZXlzLmpvaW4oJ3wnKTtcblx0XHRcdHJlZyAgICAgPSBuZXcgUmVnRXhwKCc6KCcgKyBtICsgJyknLCAnZycpO1xuXG5cdFx0XHRyZXR1cm4gc3RyLnJlcGxhY2UocmVnLCBmdW5jdGlvbiAoLi4uYXJncykge1xuXHRcdFx0XHRjb25zdCByZXBsYWNlbWVudCA9IChkYXRhIGFzIGFueSlbYXJnc1sxXV07XG5cblx0XHRcdFx0aWYgKHJlcGxhY2VtZW50ID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRyZXR1cm4gYXJnc1swXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiByZXBsYWNlbWVudDtcblx0XHRcdH0pO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBzdHI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0ZXh0VG9MaW5lU3RyaW5nKHRleHQ6IHN0cmluZyk6IHN0cmluZyB7XG5cdGNvbnN0IHJlZyAgICAgICAgICAgICAgID0gL1tcIidcXFxcXFxuXFxyXFx0XFx1MjAyOFxcdTIwMjldL2csXG5cdFx0ICB0b0VzY2FwZXM6IG9iamVjdCA9IHtcblx0XHRcdCAgJ1wiJyAgICAgOiAnXCInLFxuXHRcdFx0ICAnXFwnJyAgICA6ICdcXCcnLFxuXHRcdFx0ICAnXFxcXCcgICAgOiAnXFxcXCcsXG5cdFx0XHQgICdcXG4nICAgIDogJ24nLFxuXHRcdFx0ICAnXFxyJyAgICA6ICdyJyxcblx0XHRcdCAgJ1xcdCcgICAgOiAndCcsXG5cdFx0XHQgICdcXHUyMDI4JzogJzIwMjgnLFxuXHRcdFx0ICAnXFx1MjAyOSc6ICcyMDI5Jyxcblx0XHQgIH07XG5cblx0cmV0dXJuIHRleHQucmVwbGFjZShyZWcsIChtYXRjaCkgPT4gJ1xcXFwnICsgKHRvRXNjYXBlcyBhcyBhbnkpW21hdGNoXSk7XG59XG5cbi8vID09PT09PT09PT1NQVRIPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmV4cG9ydCBmdW5jdGlvbiBfc2V0RGlnaXRzU2VwKHg6IG51bWJlciwgc2VwOiBzdHJpbmcpOiBzdHJpbmcge1xuXHRjb25zdCBzICAgICA9IFN0cmluZyh4KSxcblx0XHQgIGFucyAgID0gW10sXG5cdFx0ICBqICAgICA9IHMuaW5kZXhPZignLicpLFxuXHRcdCAgc3RhcnQgPSBqICE9PSAtMSA/IGogOiBzLmxlbmd0aCxcblx0XHQgIGVuZCAgID0gaiAhPT0gLTEgPyBzLnNsaWNlKHN0YXJ0ICsgMSkgOiBbXTtcblx0bGV0IGNvdW50ICAgPSAwLFxuXHRcdGkgICAgICAgPSBzdGFydDtcblxuXHRmb3IgKDsgaSA+PSAwOyBpLS0pIHtcblx0XHRpZiAoY291bnQgPT09IDMpIHtcblx0XHRcdGNvdW50ICA9IDA7XG5cdFx0XHRhbnNbaV0gPSBpICE9PSAwID8gc2VwICsgc1tpXSA6IHNbaV07XG5cdFx0fSBlbHNlIHtcblx0XHRcdGFuc1tpXSA9IHNbaV07XG5cdFx0fVxuXHRcdGNvdW50Kys7XG5cdH1cblxuXHRyZXR1cm4gYW5zLmNvbmNhdChlbmQpLmpvaW4oJycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbnVtYmVyRm9ybWF0KFxuXHR4OiBudW1iZXIgfCBzdHJpbmcsXG5cdGRlYyAgICAgICAgPSAyLFxuXHRkZWNpbWFsU2VwID0gJy4nLFxuXHRkaWdpdHNTZXAgID0gJyAnLFxuKTogc3RyaW5nIHtcblx0aWYgKCF4KSB7XG5cdFx0cmV0dXJuICcnO1xuXHR9XG5cblx0bGV0IGFucyA9IHBhcnNlRmxvYXQoU3RyaW5nKHgpKTtcblxuXHRpZiAoZGVjID49IDApIHtcblx0XHRjb25zdCBkZWNpbWFsUG93ID0gTWF0aC5wb3coMTAsIGRlYyk7XG5cdFx0YW5zICAgICAgICAgICAgICA9IE1hdGguZmxvb3IoYW5zICogZGVjaW1hbFBvdykgLyBkZWNpbWFsUG93O1xuXHR9XG5cblx0Y29uc3QgbiA9IF9zZXREaWdpdHNTZXAoYW5zLCBkaWdpdHNTZXApO1xuXHRjb25zdCBhID0gbi5zcGxpdCgnJyk7XG5cblx0Y29uc3QgZGVjaW1hbFBvcyA9IGEubGFzdEluZGV4T2YoJy4nKTtcblx0aWYgKGRlY2ltYWxQb3MgPj0gMCAmJiBkZWNpbWFsU2VwICE9PSAnLicpIHtcblx0XHRhW2RlY2ltYWxQb3NdID0gZGVjaW1hbFNlcDtcblx0fVxuXG5cdHJldHVybiBhLmpvaW4oJycpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ3QoXG5cdHg6IG51bWJlcixcblx0eTogbnVtYmVyLFxuXHRlcSA9IGZhbHNlLFxuKTogYm9vbGVhbiB7XG5cdHJldHVybiBlcSA/IHggPj0geSA6IHggPiB5O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbHQoXG5cdHg6IG51bWJlcixcblx0eTogbnVtYmVyLFxuXHRlcSA9IGZhbHNlLFxuKTogYm9vbGVhbiB7XG5cdHJldHVybiBlcSA/IHggPD0geSA6IHggPCB5O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYmV0d2Vlbihcblx0eDogbnVtYmVyLFxuXHRhOiBudW1iZXIsXG5cdGI6IG51bWJlcixcblx0ZXEgPSBmYWxzZSxcbik6IGJvb2xlYW4ge1xuXHRyZXR1cm4gZXEgPyB4ID49IGEgJiYgeCA8PSBiIDogeCA+IGEgJiYgeCA8IGI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1JhbmdlKGE6IGFueSwgYjogYW55KTogYm9vbGVhbiB7XG5cdHJldHVybiB0eXBlb2YgYSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIGIgPT09ICdudW1iZXInICYmIGEgPCBiO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNJbkRPTShcblx0ZWxlbWVudDogYW55LFxuXHRpbkJvZHkgPSBmYWxzZSxcbik6IGJvb2xlYW4ge1xuXHRsZXQgXyA9IGVsZW1lbnQsXG5cdFx0bGFzdDtcblxuXHR3aGlsZSAoXykge1xuXHRcdGxhc3QgPSBfO1xuXHRcdGlmIChpbkJvZHkgJiYgbGFzdCA9PT0gZG9jdW1lbnQuYm9keSkge1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXHRcdF8gPSBfLnBhcmVudE5vZGU7XG5cdH1cblxuXHRyZXR1cm4gaW5Cb2R5ID8gbGFzdCA9PT0gZG9jdW1lbnQuYm9keSA6IGxhc3QgPT09IGRvY3VtZW50O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2h1ZmZsZShhOiBhbnlbXSk6IGFueVtdIHtcblx0bGV0IGosIHgsIGk7XG5cblx0Zm9yIChpID0gYS5sZW5ndGggLSAxOyBpID4gMDsgaS0tKSB7XG5cdFx0aiAgICA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChpICsgMSkpO1xuXHRcdHggICAgPSBhW2ldO1xuXHRcdGFbaV0gPSBhW2pdO1xuXHRcdGFbal0gPSB4O1xuXHR9XG5cblx0cmV0dXJuIGE7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVF1ZXJ5U3RyaW5nKHN0cjogc3RyaW5nKSB7XG5cdGlmIChzdHIuY2hhckF0KDApID09PSAnPycpIHN0ciA9IHN0ci5zdWJzdHJpbmcoMSk7XG5cdGlmICghc3RyLmxlbmd0aCkgcmV0dXJuIHt9O1xuXG5cdGNvbnN0IHBhaXJzICA9IHN0ci5zcGxpdCgnJicpLFxuXHRcdCAgcGFyYW1zID0ge307XG5cdGZvciAobGV0IGkgPSAwLCBsZW4gPSBwYWlycy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHRcdGNvbnN0IHBhaXIgID0gcGFpcnNbaV0uc3BsaXQoJz0nKSxcblx0XHRcdCAga2V5ICAgPSBkZWNvZGVVUklDb21wb25lbnQocGFpclswXSksXG5cdFx0XHQgIHZhbHVlID0gcGFpci5sZW5ndGggPT09IDIgPyBkZWNvZGVVUklDb21wb25lbnQocGFpclsxXSkgOiBudWxsO1xuXHRcdGlmICgocGFyYW1zIGFzIGFueSlba2V5XSAhPSBudWxsKSB7XG5cdFx0XHRpZiAoIWlzQXJyYXkoKHBhcmFtcyBhcyBhbnkpW2tleV0pKSB7XG5cdFx0XHRcdChwYXJhbXMgYXMgYW55KVtrZXldID0gWyhwYXJhbXMgYXMgYW55KVtrZXldXTtcblx0XHRcdH1cblx0XHRcdChwYXJhbXMgYXMgYW55KVtrZXldLnB1c2godmFsdWUpO1xuXHRcdH0gZWxzZSAocGFyYW1zIGFzIGFueSlba2V5XSA9IHZhbHVlO1xuXHR9XG5cdHJldHVybiBwYXJhbXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcmV2ZW50RGVmYXVsdChlOiBFdmVudCkge1xuXHRpZiAoIWUpIHtcblx0XHRpZiAod2luZG93LmV2ZW50KSBlID0gd2luZG93LmV2ZW50O1xuXHRcdGVsc2UgcmV0dXJuO1xuXHR9XG5cblx0aWYgKGUucHJldmVudERlZmF1bHQpIGUucHJldmVudERlZmF1bHQoKTtcblx0aWYgKGUuY2FuY2VsQnViYmxlICE9IG51bGwpIGUuY2FuY2VsQnViYmxlID0gdHJ1ZTtcblx0aWYgKGUuc3RvcFByb3BhZ2F0aW9uKSBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHRpZiAod2luZG93LmV2ZW50KSBlLnJldHVyblZhbHVlID0gZmFsc2U7XG5cdC8vIGlmIChlLmNhbmNlbCAhPSBudWxsKSBlLmNhbmNlbCA9IHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkQWdlKFxuXHRkYXk6IG51bWJlcixcblx0bW9udGg6IG51bWJlcixcblx0eWVhcjogbnVtYmVyLFxuXHRtaW5BZ2U6IG51bWJlcixcblx0bWF4QWdlOiBudW1iZXIsXG4pOiBib29sZWFuIHtcblx0Ly8gZGVwZW5kaW5nIG9uIHRoZSB5ZWFyLCBjYWxjdWxhdGUgdGhlIG51bWJlciBvZiBkYXlzIGluIHRoZSBtb250aFxuXHRjb25zdCBmZWJydWFyeURheXMgPSB5ZWFyICUgNCA9PT0gMCA/IDI5IDogMjgsXG5cdFx0ICBkYXlzSW5Nb250aCAgPSBbXG5cdFx0XHQgIDMxLFxuXHRcdFx0ICBmZWJydWFyeURheXMsXG5cdFx0XHQgIDMxLFxuXHRcdFx0ICAzMCxcblx0XHRcdCAgMzEsXG5cdFx0XHQgIDMwLFxuXHRcdFx0ICAzMSxcblx0XHRcdCAgMzEsXG5cdFx0XHQgIDMwLFxuXHRcdFx0ICAzMSxcblx0XHRcdCAgMzAsXG5cdFx0XHQgIDMxLFxuXHRcdCAgXTtcblxuXHQvLyBmaXJzdCwgY2hlY2sgdGhlIGluY29taW5nIG1vbnRoIGFuZCB5ZWFyIGFyZSB2YWxpZC5cblx0aWYgKCFtb250aCB8fCAhZGF5IHx8ICF5ZWFyKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdGlmICgxID4gbW9udGggfHwgbW9udGggPiAxMikge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRpZiAoeWVhciA8IDApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0aWYgKDEgPiBkYXkgfHwgZGF5ID4gZGF5c0luTW9udGhbbW9udGggLSAxXSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vIGlmIHJlcXVpcmVkLCB2ZXJpZnkgdGhlIGN1cnJlbnQgZGF0ZSBpcyBMQVRFUiB0aGFuIHRoZSBpbmNvbWluZyBkYXRlLlxuXHRpZiAobWluQWdlICE9PSB1bmRlZmluZWQgfHwgbWF4QWdlICE9PSB1bmRlZmluZWQpIHtcblx0XHQvLyB3ZSBnZXQgY3VycmVudCB5ZWFyXG5cdFx0Y29uc3QgY3VycmVudFllYXIgPSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCksXG5cdFx0XHQgIGFnZSAgICAgICAgID0gY3VycmVudFllYXIgLSB5ZWFyO1xuXG5cdFx0aWYgKGFnZSA8IDApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0aWYgKGFnZSA8IG1pbkFnZSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRpZiAoYWdlID4gbWF4QWdlKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaWxlU2l6ZUZvcm1hdChcblx0c2l6ZTogbnVtYmVyIC8qIGluIGJ5dGVzICovLFxuXHRkZWNpbWFsUG9pbnQgPSAnLicsXG5cdHRob3VzYW5kc1NlcCA9ICcgJyxcbikge1xuXHRjb25zdCB1bml0cyA9IFsnYnl0ZScsICdLYicsICdNYicsICdHYicsICdUYiddLFxuXHRcdCAgaU1heCAgPSB1bml0cy5sZW5ndGg7XG5cdGxldCBpICAgICAgID0gMCxcblx0XHRyZXN1bHQgID0gMDtcblxuXHRzaXplID0gcGFyc2VGbG9hdChTdHJpbmcoc2l6ZSkpO1xuXG5cdHdoaWxlIChzaXplID49IDEgJiYgaSA8IGlNYXgpIHtcblx0XHRyZXN1bHQgPSBzaXplO1xuXHRcdHNpemUgLz0gMTAwMDsgLy8gbm90IDEwMjRcblx0XHRpKys7XG5cdH1cblxuXHRjb25zdCBwYXJ0cyA9IFN0cmluZyhyZXN1bHQpLnNwbGl0KCcuJyksXG5cdFx0ICBoZWFkICA9XG5cdFx0XHQgIHBhcnNlSW50KHBhcnRzWzBdKSA9PT0gcmVzdWx0XG5cdFx0XHQgID8gcmVzdWx0XG5cdFx0XHQgIDogbnVtYmVyRm9ybWF0KHJlc3VsdCwgMiwgZGVjaW1hbFBvaW50LCB0aG91c2FuZHNTZXApO1xuXG5cdHJldHVybiBoZWFkICsgJyAnICsgdW5pdHNbaSA9PT0gMCA/IDAgOiBpIC0gMV07XG59XG5cbi8qKlxuICogT3BlbnMgdGhlIHByb3ZpZGVkIHVybCBieSBpbmplY3RpbmcgYSBoaWRkZW4gaWZyYW1lIHRoYXQgY2FsbHNcbiAqIHdpbmRvdy5vcGVuKCksIHRoZW4gcmVtb3ZlcyB0aGUgaWZyYW1lIGZyb20gdGhlIERPTS5cbiAqXG4gKiBQcmV2ZW50IHJldmVyc2UgdGFibmFiYmluZyBwaGlzaGluZyBhdHRhY2tzIGNhdXNlZCBieSBfYmxhbmtcbiAqXG4gKiBodHRwczovL21hdGhpYXNieW5lbnMuZ2l0aHViLmlvL3JlbC1ub29wZW5lci9cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vZGFuaWVsc3RqdWxlcy9ibGFua3NoaWVsZC9ibG9iLzZlMjA4YmYyNWE0NGJmNTBkMWE1ZTg1YWU5NmZlZTBjMDE1ZDA1YmMvYmxhbmtzaGllbGQuanMjTDE2NlxuICpcbiAqIEBwYXJhbSB1cmxcbiAqIEBwYXJhbSBzdHJXaW5kb3dOYW1lXG4gKiBAcGFyYW0gc3RyV2luZG93RmVhdHVyZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNhZmVPcGVuKFxuXHR1cmwgICAgICAgICAgICAgICA9ICcnLFxuXHRzdHJXaW5kb3dOYW1lICAgICA9ICcnLFxuXHRzdHJXaW5kb3dGZWF0dXJlcyA9ICcnLFxuKSB7XG5cdGlmICh3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdNU0lFJykgIT09IC0xKSB7XG5cdFx0Ly8gSUUgYmVmb3JlIDExXG5cdFx0Y29uc3QgY2hpbGQgPSBvcGVuLmFwcGx5KHdpbmRvdywgW1xuXHRcdFx0dXJsLFxuXHRcdFx0c3RyV2luZG93TmFtZSxcblx0XHRcdHN0cldpbmRvd0ZlYXR1cmVzLFxuXHRcdF0pO1xuXHRcdGlmIChjaGlsZCkge1xuXHRcdFx0Y2hpbGQub3BlbmVyID0gbnVsbDtcblx0XHR9XG5cdFx0cmV0dXJuIGNoaWxkO1xuXHR9XG5cblx0Y29uc3QgaWZyYW1lICAgICAgICAgICAgICAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpZnJhbWUnKSBhcyBIVE1MSUZyYW1lRWxlbWVudDtcblx0aWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcblx0Y29uc3QgaWZyYW1lRG9jID0gKGlmcmFtZS5jb250ZW50RG9jdW1lbnQgfHxcblx0XHRcdFx0IChpZnJhbWUuY29udGVudFdpbmRvdyBhcyBhbnkpLmRvY3VtZW50KSBhcyBEb2N1bWVudDtcblxuXHRsZXQgb3BlbkFyZ3MgPSAnXCInICsgdXJsICsgJ1wiJztcblx0aWYgKHN0cldpbmRvd05hbWUpIHtcblx0XHRvcGVuQXJncyArPSAnLCBcIicgKyBzdHJXaW5kb3dOYW1lICsgJ1wiJztcblx0fVxuXHRpZiAoc3RyV2luZG93RmVhdHVyZXMpIHtcblx0XHRvcGVuQXJncyArPSAnLCBcIicgKyBzdHJXaW5kb3dGZWF0dXJlcyArICdcIic7XG5cdH1cblxuXHRjb25zdCBzY3JpcHQgICAgICA9IGlmcmFtZURvYy5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblx0c2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0Jztcblx0c2NyaXB0LnRleHQgPVxuXHRcdCd3aW5kb3cucGFyZW50ID0gbnVsbDsgd2luZG93LnRvcCA9IG51bGw7JyArXG5cdFx0J3dpbmRvdy5mcmFtZUVsZW1lbnQgPSBudWxsOyB2YXIgY2hpbGQgPSB3aW5kb3cub3BlbignICtcblx0XHRvcGVuQXJncyArXG5cdFx0Jyk7JyArXG5cdFx0J2lmIChjaGlsZCkgeyBjaGlsZC5vcGVuZXIgPSBudWxsIH0nO1xuXHRpZnJhbWVEb2MuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuXHRjb25zdCBuZXdXaW4gPSAoaWZyYW1lLmNvbnRlbnRXaW5kb3cgYXMgYW55KS5jaGlsZCBhcyBXaW5kb3c7XG5cblx0ZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChpZnJhbWUpO1xuXHRyZXR1cm4gbmV3V2luO1xufVxuXG5leHBvcnQgY29uc3QgbG9nZ2VyOiBDb25zb2xlICYgeyBvbjogKCkgPT4gdm9pZDsgb2ZmOiAoKSA9PiB2b2lkIH0gPSAoZnVuY3Rpb24gX2xvZ2dlcigpIHtcblx0bGV0IF9zaG93TG9nID0gdHJ1ZTtcblx0Y29uc3QgX2ZuICAgID0gZnVuY3Rpb24gKFxuXHRcdHR5cGU6IGtleW9mIENvbnNvbGUsXG5cdCkge1xuXHRcdHJldHVybiBfc2hvd0xvZyA/IGNvbnNvbGVbdHlwZV0gOiBub29wO1xuXHR9O1xuXG5cdHJldHVybiB7XG5cblx0XHRvZmYoKSB7XG5cdFx0XHRfc2hvd0xvZyA9IGZhbHNlO1xuXHRcdH0sXG5cdFx0b24oKSB7XG5cdFx0XHRfc2hvd0xvZyA9IHRydWU7XG5cdFx0fSxcblxuXHRcdGdldCBtZW1vcnkoKSB7cmV0dXJuIF9mbignbWVtb3J5Jyk7fSxcblx0XHRnZXQgYXNzZXJ0KCkge3JldHVybiBfZm4oJ2Fzc2VydCcpO30sXG5cdFx0Z2V0IGNsZWFyKCkge3JldHVybiBfZm4oJ2NsZWFyJyk7fSxcblx0XHRnZXQgY291bnQoKSB7cmV0dXJuIF9mbignY291bnQnKTt9LFxuXHRcdGdldCBjb3VudFJlc2V0KCkge3JldHVybiBfZm4oJ2NvdW50UmVzZXQnKTt9LFxuXHRcdGdldCBkZWJ1ZygpIHtyZXR1cm4gX2ZuKCdkZWJ1ZycpO30sXG5cdFx0Z2V0IGRpcigpIHtyZXR1cm4gX2ZuKCdkaXInKTt9LFxuXHRcdGdldCBkaXJ4bWwoKSB7cmV0dXJuIF9mbignZGlyeG1sJyk7fSxcblx0XHRnZXQgZXJyb3IoKSB7cmV0dXJuIF9mbignZXJyb3InKTt9LFxuXHRcdGdldCBleGNlcHRpb24oKSB7cmV0dXJuIF9mbignZXhjZXB0aW9uJyk7fSxcblx0XHRnZXQgZ3JvdXAoKSB7cmV0dXJuIF9mbignZ3JvdXAnKTt9LFxuXHRcdGdldCBncm91cENvbGxhcHNlZCgpIHtyZXR1cm4gX2ZuKCdncm91cENvbGxhcHNlZCcpO30sXG5cdFx0Z2V0IGdyb3VwRW5kKCkge3JldHVybiBfZm4oJ2dyb3VwRW5kJyk7fSxcblx0XHRnZXQgaW5mbygpIHtyZXR1cm4gX2ZuKCdpbmZvJyk7fSxcblx0XHRnZXQgbG9nKCkge3JldHVybiBfZm4oJ2xvZycpO30sXG5cdFx0Z2V0IHRhYmxlKCkge3JldHVybiBfZm4oJ3RhYmxlJyk7fSxcblx0XHRnZXQgdGltZSgpIHtyZXR1cm4gX2ZuKCd0aW1lJyk7fSxcblx0XHRnZXQgdGltZUVuZCgpIHtyZXR1cm4gX2ZuKCd0aW1lRW5kJyk7fSxcblx0XHRnZXQgdGltZUxvZygpIHtyZXR1cm4gX2ZuKCd0aW1lTG9nJyk7fSxcblx0XHRnZXQgdGltZVN0YW1wKCkge3JldHVybiBfZm4oJ3RpbWVTdGFtcCcpO30sXG5cdFx0Z2V0IHRyYWNlKCkge3JldHVybiBfZm4oJ3RyYWNlJyk7fSxcblx0XHRnZXQgd2FybigpIHtyZXR1cm4gX2ZuKCd3YXJuJyk7fSxcblx0fTtcbn0pKCk7XG5cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGUodmFsOiBzdHJpbmcpIHtcblx0cmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpXG5cdFx0LnJlcGxhY2UoLyUyNC9nLCAnJCcpXG5cdFx0LnJlcGxhY2UoLyUyMC9nLCAnKycpXG5cdFx0LnJlcGxhY2UoLyUzQS9naSwgJzonKVxuXHRcdC5yZXBsYWNlKC8lMkMvZ2ksICcsJylcblx0XHQucmVwbGFjZSgvJTVCL2dpLCAnWycpXG5cdFx0LnJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBxdWVyeSBzdHJpbmcgZnJvbSBvYmplY3QuIFJlY3Vyc2l2ZWx5IVxuICogQHBhcmFtIHBhcmFtc1xuICogQHBhcmFtIHByZWZpeFxuICovXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRRdWVyeVN0cmluZyhcblx0cGFyYW1zOiBvYmplY3QgfCBVUkxTZWFyY2hQYXJhbXMsXG5cdHByZWZpeD86IHN0cmluZyxcbik6IHN0cmluZyB7XG5cblx0aWYgKHBhcmFtcyBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcykge1xuXHRcdHJldHVybiBwYXJhbXMudG9TdHJpbmcoKTtcblx0fVxuXG5cdGNvbnN0IGR1cGxpY2F0ZXMgPSB7fSxcblx0XHQgIHN0ciAgICAgICAgPSBbXTtcblxuXHRmb3IgKGNvbnN0IHByb3AgaW4gcGFyYW1zKSB7XG5cdFx0aWYgKCFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocGFyYW1zLCBwcm9wKSkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Y29uc3Qga2V5ICAgPSBwcmVmaXggPyBwcmVmaXggKyAnWycgKyBwcm9wICsgJ10nIDogcHJvcCxcblx0XHRcdCAgdmFsdWUgPSAocGFyYW1zIGFzIGFueSlbcHJvcF07XG5cdFx0bGV0IHBhaXI7XG5cdFx0aWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuXHRcdFx0XHRwYWlyID0gZW5jb2RlKGtleSk7XG5cdFx0XHR9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG5cdFx0XHRcdHBhaXIgPSBidWlsZFF1ZXJ5U3RyaW5nKHZhbHVlLCBrZXkpO1xuXHRcdFx0fSBlbHNlIGlmIChpc0FycmF5KHZhbHVlKSkge1xuXHRcdFx0XHRwYWlyID0gdmFsdWVcblx0XHRcdFx0XHQucmVkdWNlKGZ1bmN0aW9uIChhY2MsIGl0ZW0sIGluZGV4KSB7XG5cdFx0XHRcdFx0XHRpZiAoIShkdXBsaWNhdGVzIGFzIGFueSlba2V5XSkge1xuXHRcdFx0XHRcdFx0XHQoZHVwbGljYXRlcyBhcyBhbnkpW2tleV0gPSB7fTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICghKGR1cGxpY2F0ZXMgYXMgYW55KVtrZXldW2l0ZW1dKSB7XG5cdFx0XHRcdFx0XHRcdChkdXBsaWNhdGVzIGFzIGFueSlba2V5XVtpdGVtXSA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBhY2MuY29uY2F0KFxuXHRcdFx0XHRcdFx0XHRcdGJ1aWxkUXVlcnlTdHJpbmcoe1trZXkgKyAnWycgKyBpbmRleCArICddJ106IGl0ZW19KSxcblx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdHJldHVybiBhY2M7XG5cdFx0XHRcdFx0fSwgW10pXG5cdFx0XHRcdFx0LmpvaW4oJyYnKTtcblx0XHRcdH0gZWxzZSB7Ly8gc2NhbGFyIHR5cGVcblx0XHRcdFx0cGFpciA9XG5cdFx0XHRcdFx0ZW5jb2RlKGtleSkgKyAnPScgKyBlbmNvZGUodmFsdWUpO1xuXHRcdFx0fVxuXG5cdFx0XHRzdHIucHVzaChwYWlyIHx8IGtleSk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHN0ci5qb2luKCcmJyk7XG59XG5cbi8qKlxuICogQnVpbGQgYSBVUkwgd2l0aCBhIGdpdmVuIHBhcmFtc1xuICpcbiAqIEBwYXJhbSB1cmxcbiAqIEBwYXJhbSBwYXJhbXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybDogc3RyaW5nLCBwYXJhbXM6IG9iamVjdCB8IFVSTFNlYXJjaFBhcmFtcykge1xuXHRpZiAoIXBhcmFtcykge1xuXHRcdHJldHVybiB1cmw7XG5cdH1cblxuXHRjb25zdCBzZXJpYWxpemVkUGFyYW1zID0gYnVpbGRRdWVyeVN0cmluZyhwYXJhbXMpO1xuXG5cdGlmIChzZXJpYWxpemVkUGFyYW1zKSB7XG5cdFx0Y29uc3QgaGFzaEluZGV4ID0gdXJsLmluZGV4T2YoJyMnKTtcblx0XHRpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuXHRcdFx0dXJsID0gdXJsLnNsaWNlKDAsIGhhc2hJbmRleCk7XG5cdFx0fVxuXG5cdFx0dXJsICs9ICh1cmwuaW5kZXhPZignPycpID09PSAtMSA/ICc/JyA6ICcmJykgKyBzZXJpYWxpemVkUGFyYW1zO1xuXHR9XG5cblx0cmV0dXJuIHVybDtcbn1cblxuZXhwb3J0ICogZnJvbSAnLi9zY3JpcHRMb2FkZXInO1xuXG5leHBvcnQge2RlZmF1bHQgYXMgUGF0aFJlc29sdmVyfSBmcm9tICcuL1BhdGhSZXNvbHZlcic7Il19