// ==========TYPE CHECKERS====================================
let _naturalId = 0;
const isArray = Array.isArray;
const naturalId = () => 'id-' + _naturalId++;
const isPlainObject = (a) => Object.prototype.toString.call(a) === '[object Object]';
const isString = (a) => typeof a === 'string';
const isFunction = (a) => typeof a === 'function';
const isEmpty = function (a) {
    if (isArray(a)) {
        return !a.length;
    }
    if (isPlainObject(a)) {
        return !Object.keys(a).length;
    }
    if (typeof a === 'string') {
        return a.trim().length === 0;
    }
    if (typeof a === 'number') {
        return isNaN(a);
    }
    return !a;
};
const isNotEmpty = (a) => !isEmpty(a);
const toArray = (a) => [].concat.apply([], a);
// ==========HELPERS====================================
const callback = function (fn, args, ctx) {
    if (typeof fn === 'function') {
        return fn.apply(ctx, args);
    }
    return null;
};
const forEach = function (obj, fn) {
    Object.keys(obj).forEach((key) => {
        let value = obj[key];
        fn(value, key);
    });
};
const assign = Object.assign ||
    function (target, source) {
        let to = target, from, symbols;
        for (let s = 1; s < arguments.length; s++) {
            from = Object(arguments[s]);
            for (let key in from) {
                if (from.hasOwnProperty(key)) {
                    to[key] = from[key];
                }
            }
            if ('getOwnPropertySymbols' in Object) {
                symbols = Object.getOwnPropertySymbols(from);
                for (let i = 0; i < symbols.length; i++) {
                    if (from.propertyIsEnumerable(symbols[i])) {
                        to[symbols[i]] = from[symbols[i]];
                    }
                }
            }
        }
        return to;
    };
const copy = function (a) {
    return JSON.parse(JSON.stringify(a));
};
const stringKeyReplace = function (str, data) {
    if (isString(str) && str.length && isPlainObject(data)) {
        let keys = Object.keys(data)
            .sort()
            .reverse(), reg;
        if (keys.length) {
            let m = keys.join('|');
            reg = new RegExp(':(' + m + ')', 'g');
            return str.replace(reg, function () {
                let replacement = data[arguments[1]];
                if (replacement === undefined) {
                    return arguments[0];
                }
                return replacement;
            });
        }
    }
    return str;
};
const textToLineString = (text) => {
    let reg = /["'\\\n\r\t\u2028\u2029]/g, to_escapes = {
        '"': '"',
        "'": "'",
        '\\': '\\',
        '\n': 'n',
        '\r': 'r',
        '\t': 't',
        '\u2028': '2028',
        '\u2029': '2029',
    };
    return text.replace(reg, match => '\\' + to_escapes[match]);
};
const expose = function (items, ctx) {
    let out = {};
    items.forEach(function (key) {
        let item = ctx[key];
        // methods and properties
        if (isFunction(item)) {
            out[key] = function () {
                let res = item.apply(ctx, arguments);
                return res === ctx ? out : res;
            };
        }
        else {
            out[key] = item;
        }
    });
    return out;
};
const getFrom = function (from, key) {
    let { [key]: value } = from || {};
    return value;
};
// ==========MATH====================================
const _setDigitsSep = function (x, sep) {
    let s = String(x), count = 0, ans = [], j = s.indexOf('.'), start = j !== -1 ? j : s.length, end = j !== -1 ? s.slice(start + 1) : [], i = start;
    for (; i >= 0; i--) {
        if (count === 3) {
            count = 0;
            ans[i] = i !== 0 ? sep + s[i] : s[i];
        }
        else {
            ans[i] = s[i];
        }
        count++;
    }
    return ans.concat(end).join('');
};
const math = {
    numberFormat: function (x, dec = 2, decimalSep = '.', digitsSep = ' ') {
        if (!x) {
            return '';
        }
        let ans = parseFloat(String(x)), decimalPos;
        if (dec >= 0) {
            let decimalPow = Math.pow(10, dec);
            ans = Math.floor(ans * decimalPow) / decimalPow;
        }
        let n = _setDigitsSep(ans, digitsSep);
        let a = n.split('');
        decimalPos = a.lastIndexOf('.');
        if (decimalPos >= 0 && decimalSep !== '.') {
            a[decimalPos] = decimalSep;
        }
        return a.join('');
    },
    gt: function (x, y, eq = false) {
        return eq ? x >= y : x > y;
    },
    lt: function (x, y, eq = false) {
        return eq ? x <= y : x < y;
    },
    between: function (x, a, b, eq = false) {
        return eq ? x >= a && x <= b : x > a && x < b;
    },
    isRange: function (a, b) {
        return typeof a === 'number' && typeof b === 'number' && a < b;
    },
};
const isInDOM = function (element, inBody = false) {
    let _ = element, last;
    while (_) {
        last = _;
        if (inBody && last === document.body) {
            break;
        }
        _ = _.parentNode;
    }
    return inBody ? last === document.body : last === document;
};
const buildQueryString = function (object, prefix) {
    const duplicates = {}, str = [];
    for (let prop in object) {
        if (!Object.prototype.hasOwnProperty.call(object, prop)) {
            continue;
        }
        let key = prefix ? prefix + '[' + prop + ']' : prop, value = object[prop], pair;
        if (value !== undefined) {
            if (value === null) {
                pair = encodeURIComponent(key);
            }
            else if (Utils.isPlainObject(value)) {
                pair = buildQueryString(value, key);
            }
            else if (Utils.isArray(value)) {
                pair = value
                    .reduce(function (memo, item) {
                    if (!duplicates[key])
                        duplicates[key] = {};
                    if (!duplicates[key][item]) {
                        duplicates[key][item] = true;
                        return memo.concat(encodeURIComponent(key) +
                            '=' +
                            encodeURIComponent(item));
                    }
                    return memo;
                }, [])
                    .join('&');
            }
            else {
                pair =
                    encodeURIComponent(key) + '=' + encodeURIComponent(value);
            }
            str.push(pair);
        }
    }
    return str.join('&');
};
const shuffle = (a) => {
    let j, x, i;
    for (i = a.length - 1; i > 0; i--) {
        j = Math.floor(Math.random() * (i + 1));
        x = a[i];
        a[i] = a[j];
        a[j] = x;
    }
    return a;
};
const parseQueryString = function (str) {
    if (str.charAt(0) === '?')
        str = str.substring(1);
    if (!str.length)
        return {};
    const pairs = str.split('&'), params = {};
    for (let i = 0, len = pairs.length; i < len; i++) {
        let pair = pairs[i].split('='), key = decodeURIComponent(pair[0]), value = pair.length == 2 ? decodeURIComponent(pair[1]) : null;
        if (params[key] != null) {
            if (!Utils.isArray(params[key])) {
                params[key] = [params[key]];
            }
            params[key].push(value);
        }
        else
            params[key] = value;
    }
    return params;
};
const preventDefault = function (e) {
    if (!e) {
        if (window.event)
            e = window.event;
        else
            return;
    }
    if (e.preventDefault)
        e.preventDefault();
    if (e.cancelBubble != null)
        e.cancelBubble = true;
    if (e.stopPropagation)
        e.stopPropagation();
    if (window.event)
        e.returnValue = false;
    // if (e.cancel != null) e.cancel = true;
}, eventCancel = function (e) {
    console.warn('"Utils.eventCancel" is deprecated, use "Utils.preventDefault" instead');
    preventDefault(e);
};
const isValidAge = (day, month, year, minAge, maxAge) => {
    // depending on the year, calculate the number of days in the month
    let daysInMonth, februaryDays = year % 4 === 0 ? 29 : 28;
    daysInMonth = [31, februaryDays, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    // first, check the incoming month and year are valid.
    if (!month || !day || !year) {
        return false;
    }
    if (1 > month || month > 12) {
        return false;
    }
    if (year < 0) {
        return false;
    }
    if (1 > day || day > daysInMonth[month - 1]) {
        return false;
    }
    // if required, verify the current date is LATER than the incoming date.
    if (minAge !== undefined || maxAge !== undefined) {
        // we get current year
        let currentYear = new Date().getFullYear(), age = currentYear - year;
        if (age < 0) {
            return false;
        }
        if (age < minAge) {
            return false;
        }
        if (age > maxAge) {
            return false;
        }
    }
    return true;
};
const fileSizeFormat = function (size /* in bytes */, decimalPoint = '.', thousandsSep = ' ') {
    let units = ['byte', 'Kb', 'Mb', 'Gb', 'Tb'], i_max = units.length, i = 0, result = 0;
    size = parseFloat(String(size));
    while (size >= 1 && i < i_max) {
        result = size;
        size /= 1000; // not 1024
        i++;
    }
    let parts = String(result).split('.'), head = parseInt(parts[0]) === result
        ? result
        : Utils.math.numberFormat(result, 2, decimalPoint, thousandsSep);
    return head + ' ' + units[i == 0 ? 0 : i - 1];
};
/**
 * Opens the provided url by injecting a hidden iframe that calls
 * window.open(), then removes the iframe from the DOM.
 *
 * Prevent reverse tabnabbing phishing attacks caused by _blank
 *
 * https://mathiasbynens.github.io/rel-noopener/
 *
 * https://github.com/danielstjules/blankshield/blob/6e208bf25a44bf50d1a5e85ae96fee0c015d05bc/blankshield.js#L166
 *
 * @param url
 * @param strWindowName
 * @param strWindowFeatures
 */
const safeOpen = function (url = '', strWindowName = '', strWindowFeatures = '') {
    if (window.navigator.userAgent.indexOf('MSIE') !== -1) {
        // IE before 11
        let child = open.apply(window, [url, strWindowName, strWindowFeatures]);
        if (child) {
            child.opener = null;
        }
        return child;
    }
    let iframe, iframeDoc, script, openArgs, newWin;
    iframe = document.createElement('iframe');
    iframe.style.display = 'none';
    document.body.appendChild(iframe);
    iframeDoc = (iframe.contentDocument ||
        iframe.contentWindow.document);
    openArgs = '"' + url + '"';
    if (strWindowName) {
        openArgs += ', "' + strWindowName + '"';
    }
    if (strWindowFeatures) {
        openArgs += ', "' + strWindowFeatures + '"';
    }
    script = iframeDoc.createElement('script');
    script.type = 'text/javascript';
    script.text =
        'window.parent = null; window.top = null;' +
            'window.frameElement = null; var child = window.open(' +
            openArgs +
            ');' +
            'if (child) { child.opener = null }';
    iframeDoc.body.appendChild(script);
    newWin = iframe.contentWindow.child;
    document.body.removeChild(iframe);
    return newWin;
};
const Utils = {
    isPlainObject,
    isString,
    isArray,
    isFunction,
    isEmpty,
    isNotEmpty,
    toArray,
    isInDOM,
    shuffle,
    id: naturalId,
    // ============
    callback,
    assign,
    copy,
    expose,
    getFrom,
    stringKeyReplace,
    textToLineString,
    forEach,
    // ============
    math,
    isValidAge,
    // ============
    buildQueryString,
    parseQueryString,
    // ============
    eventCancel,
    preventDefault,
    // ============
    fileSizeFormat,
    // ============
    safeOpen,
};
export default Utils;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvdXRpbHMvVXRpbHMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsOERBQThEO0FBQzlELElBQUksVUFBVSxHQUFHLENBQUMsQ0FBQztBQUNuQixNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDO0FBQzlCLE1BQU0sU0FBUyxHQUFHLEdBQVcsRUFBRSxDQUFDLEtBQUssR0FBRyxVQUFVLEVBQUUsQ0FBQztBQUNyRCxNQUFNLGFBQWEsR0FBRyxDQUFDLENBQU0sRUFBVyxFQUFFLENBQ3pDLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxpQkFBaUIsQ0FBQztBQUN6RCxNQUFNLFFBQVEsR0FBRyxDQUFDLENBQU0sRUFBZSxFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssUUFBUSxDQUFDO0FBQ2hFLE1BQU0sVUFBVSxHQUFHLENBQUMsQ0FBTSxFQUFpQixFQUFFLENBQUMsT0FBTyxDQUFDLEtBQUssVUFBVSxDQUFDO0FBQ3RFLE1BQU0sT0FBTyxHQUFHLFVBQVMsQ0FBTTtJQUM5QixJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRTtRQUNmLE9BQU8sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0tBQ2pCO0lBQ0QsSUFBSSxhQUFhLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDckIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0tBQzlCO0lBRUQsSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLEVBQUU7UUFDMUIsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztLQUM3QjtJQUVELElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxFQUFFO1FBQzFCLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ2hCO0lBRUQs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b0NBQW9DLENBQUM7SUFDdEMsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbkMsTUFBTSxHQUFJLE1BQU0sQ0FBQyxhQUFxQixDQUFDLEtBQWUsQ0FBQztJQUV2RCxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsQyxPQUFPLE1BQU0sQ0FBQztBQUNmLENBQUMsQ0FBQztBQUVGLE1BQU0sS0FBSyxHQUFHO0lBQ2IsYUFBYTtJQUNiLFFBQVE7SUFDUixPQUFPO0lBQ1AsVUFBVTtJQUNWLE9BQU87SUFDUCxVQUFVO0lBQ1YsT0FBTztJQUNQLE9BQU87SUFDUCxPQUFPO0lBQ1AsRUFBRSxFQUFFLFNBQVM7SUFDYixlQUFlO0lBQ2YsUUFBUTtJQUNSLE1BQU07SUFDTixJQUFJO0lBQ0osTUFBTTtJQUNOLE9BQU87SUFDUCxnQkFBZ0I7SUFDaEIsZ0JBQWdCO0lBQ2hCLE9BQU87SUFDUCxlQUFlO0lBQ2YsSUFBSTtJQUNKLFVBQVU7SUFDVixlQUFlO0lBQ2YsZ0JBQWdCO0lBQ2hCLGdCQUFnQjtJQUNoQixlQUFlO0lBQ2YsV0FBVztJQUNYLGNBQWM7SUFDZCxlQUFlO0lBQ2YsY0FBYztJQUNkLGVBQWU7SUFDZixRQUFRO0NBQ1IsQ0FBQztBQUVGLGVBQWUsS0FBSyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gPT09PT09PT09PVRZUEUgQ0hFQ0tFUlM9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmxldCBfbmF0dXJhbElkID0gMDtcbmNvbnN0IGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuY29uc3QgbmF0dXJhbElkID0gKCk6IHN0cmluZyA9PiAnaWQtJyArIF9uYXR1cmFsSWQrKztcbmNvbnN0IGlzUGxhaW5PYmplY3QgPSAoYTogYW55KTogYm9vbGVhbiA9PlxuXHRPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYSkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xuY29uc3QgaXNTdHJpbmcgPSAoYTogYW55KTogYSBpcyBzdHJpbmcgPT4gdHlwZW9mIGEgPT09ICdzdHJpbmcnO1xuY29uc3QgaXNGdW5jdGlvbiA9IChhOiBhbnkpOiBhIGlzIEZ1bmN0aW9uID0+IHR5cGVvZiBhID09PSAnZnVuY3Rpb24nO1xuY29uc3QgaXNFbXB0eSA9IGZ1bmN0aW9uKGE6IGFueSk6IGJvb2xlYW4ge1xuXHRpZiAoaXNBcnJheShhKSkge1xuXHRcdHJldHVybiAhYS5sZW5ndGg7XG5cdH1cblx0aWYgKGlzUGxhaW5PYmplY3QoYSkpIHtcblx0XHRyZXR1cm4gIU9iamVjdC5rZXlzKGEpLmxlbmd0aDtcblx0fVxuXG5cdGlmICh0eXBlb2YgYSA9PT0gJ3N0cmluZycpIHtcblx0XHRyZXR1cm4gYS50cmltKCkubGVuZ3RoID09PSAwO1xuXHR9XG5cblx0aWYgKHR5cGVvZiBhID09PSAnbnVtYmVyJykge1xuXHRcdHJldHVybiBpc05hTihhKTtcblx0fVxuXG5cdHJldHVybiAhYTtcbn07XG5cbmNvbnN0IGlzTm90RW1wdHkgPSAoYTogYW55KTogYm9vbGVhbiA9PiAhaXNFbXB0eShhKTtcbmNvbnN0IHRvQXJyYXkgPSAoYTogYW55KTogQXJyYXk8YW55PiA9PiBbXS5jb25jYXQuYXBwbHkoW10sIGEpO1xuXG4vLyA9PT09PT09PT09SEVMUEVSUz09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuY29uc3QgY2FsbGJhY2sgPSBmdW5jdGlvbihmbjogYW55LCBhcmdzPzogQXJyYXk8YW55PiwgY3R4PzogYW55KTogYW55IHtcblx0aWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHJldHVybiBmbi5hcHBseShjdHgsIGFyZ3MpO1xuXHR9XG5cblx0cmV0dXJuIG51bGw7XG59O1xuXG5jb25zdCBmb3JFYWNoID0gZnVuY3Rpb248VD4oXG5cdG9iajogeyBba2V5OiBzdHJpbmddOiBUIH0gfCBBcnJheTxUPixcblx0Zm46ICh2YWx1ZTogVCwga2V5OiBhbnkpID0+IHZvaWRcbikge1xuXHRPYmplY3Qua2V5cyhvYmopLmZvckVhY2goKGtleTogc3RyaW5nKSA9PiB7XG5cdFx0bGV0IHZhbHVlOiBUID0gKG9iaiBhcyBhbnkpW2tleV07XG5cdFx0Zm4odmFsdWUsIGtleSk7XG5cdH0pO1xufTtcblxuY29uc3QgYXNzaWduID1cblx0KE9iamVjdCBhcyBhbnkpLmFzc2lnbiB8fFxuXHRmdW5jdGlvbih0YXJnZXQ6IG9iamVjdCwgc291cmNlOiBvYmplY3QpIHtcblx0XHRsZXQgdG8gPSB0YXJnZXQsXG5cdFx0XHRmcm9tLFxuXHRcdFx0c3ltYm9scztcblxuXHRcdGZvciAobGV0IHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRcdGZvciAobGV0IGtleSBpbiBmcm9tKSB7XG5cdFx0XHRcdGlmIChmcm9tLmhhc093blByb3BlcnR5KGtleSkpIHtcblx0XHRcdFx0XHQodG8gYXMgYW55KVtrZXldID0gZnJvbVtrZXldO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICgnZ2V0T3duUHJvcGVydHlTeW1ib2xzJyBpbiBPYmplY3QpIHtcblx0XHRcdFx0c3ltYm9scyA9IChPYmplY3QgYXMgYW55KS5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRcdGlmIChmcm9tLnByb3BlcnR5SXNFbnVtZXJhYmxlKHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0XHQodG8gYXMgYW55KVtzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRvO1xuXHR9O1xuXG5jb25zdCBjb3B5ID0gZnVuY3Rpb248VD4oYTogVCk6IFQge1xuXHRyZXR1cm4gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShhKSk7XG59O1xuXG5jb25zdCBzdHJpbmdLZXlSZXBsYWNlID0gZnVuY3Rpb24oc3RyOiBzdHJpbmcsIGRhdGE6IG9iamVjdCk6IHN0cmluZyB7XG5cdGlmIChpc1N0cmluZyhzdHIpICYmIHN0ci5sZW5ndGggJiYgaXNQbGFpbk9iamVjdChkYXRhKSkge1xuXHRcdGxldCBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSlcblx0XHRcdFx0LnNvcnQoKVxuXHRcdFx0XHQucmV2ZXJzZSgpLFxuXHRcdFx0cmVnO1xuXG5cdFx0aWYgKGtleXMubGVuZ3RoKSB7XG5cdFx0XHRsZXQgbSA9IGtleXMuam9pbignfCcpO1xuXHRcdFx0cmVnID0gbmV3IFJlZ0V4cCgnOignICsgbSArICcpJywgJ2cnKTtcblxuXHRcdFx0cmV0dXJuIHN0ci5yZXBsYWNlKHJlZywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxldCByZXBsYWNlbWVudCA9IChkYXRhIGFzIGFueSlbYXJndW1lbnRzWzFdXTtcblxuXHRcdFx0XHRpZiAocmVwbGFjZW1lbnQgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdHJldHVybiBhcmd1bWVudHNbMF07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gcmVwbGFjZW1lbnQ7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gc3RyO1xufTtcblxuY29uc3QgdGV4dFRvTGluZVN0cmluZyA9ICh0ZXh0OiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuXHRsZXQgcmVnID0gL1tcIidcXFxcXFxuXFxyXFx0XFx1MjAyOFxcdTIwMjldL2csXG5cdFx0dG9fZXNjYXBlczogb2JqZWN0ID0ge1xuXHRcdFx0J1wiJzogJ1wiJyxcblx0XHRcdFwiJ1wiOiBcIidcIixcblx0XHRcdCdcXFxcJzogJ1xcXFwnLFxuXHRcdFx0J1xcbic6ICduJyxcblx0XHRcdCdcXHInOiAncicsXG5cdFx0XHQnXFx0JzogJ3QnLFxuXHRcdFx0J1xcdTIwMjgnOiAnMjAyOCcsXG5cdFx0XHQnXFx1MjAyOSc6ICcyMDI5Jyxcblx0XHR9O1xuXG5cdHJldHVybiB0ZXh0LnJlcGxhY2UocmVnLCBtYXRjaCA9PiAnXFxcXCcgKyAodG9fZXNjYXBlcyBhcyBhbnkpW21hdGNoXSk7XG59O1xuXG5jb25zdCBleHBvc2UgPSBmdW5jdGlvbihpdGVtczogQXJyYXk8c3RyaW5nPiwgY3R4OiBhbnkpOiBvYmplY3Qge1xuXHRsZXQgb3V0OiBvYmplY3QgPSB7fTtcblx0aXRlbXMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRsZXQgaXRlbSA9IGN0eFtrZXldO1xuXHRcdC8vIG1ldGhvZHMgYW5kIHByb3BlcnRpZXNcblx0XHRpZiAoaXNGdW5jdGlvbihpdGVtKSkge1xuXHRcdFx0KG91dCBhcyBhbnkpW2tleV0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0bGV0IHJlcyA9IGl0ZW0uYXBwbHkoY3R4LCBhcmd1bWVudHMpO1xuXG5cdFx0XHRcdHJldHVybiByZXMgPT09IGN0eCA/IG91dCA6IHJlcztcblx0XHRcdH07XG5cdFx0fSBlbHNlIHtcblx0XHRcdChvdXQgYXMgYW55KVtrZXldID0gaXRlbTtcblx0XHR9XG5cdH0pO1xuXG5cdHJldHVybiBvdXQ7XG59O1xuXG5jb25zdCBnZXRGcm9tID0gZnVuY3Rpb24oZnJvbTogb2JqZWN0LCBrZXk6IHN0cmluZyk6IGFueSB7XG5cdGxldCB7IFtrZXldOiB2YWx1ZSB9OiBhbnkgPSBmcm9tIHx8IHt9O1xuXG5cdHJldHVybiB2YWx1ZTtcbn07XG5cbi8vID09PT09PT09PT1NQVRIPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbmNvbnN0IF9zZXREaWdpdHNTZXAgPSBmdW5jdGlvbih4OiBudW1iZXIsIHNlcDogc3RyaW5nKTogc3RyaW5nIHtcblx0bGV0IHMgPSBTdHJpbmcoeCksXG5cdFx0Y291bnQgPSAwLFxuXHRcdGFucyA9IFtdLFxuXHRcdGogPSBzLmluZGV4T2YoJy4nKSxcblx0XHRzdGFydCA9IGogIT09IC0xID8gaiA6IHMubGVuZ3RoLFxuXHRcdGVuZCA9IGogIT09IC0xID8gcy5zbGljZShzdGFydCArIDEpIDogW10sXG5cdFx0aSA9IHN0YXJ0O1xuXG5cdGZvciAoOyBpID49IDA7IGktLSkge1xuXHRcdGlmIChjb3VudCA9PT0gMykge1xuXHRcdFx0Y291bnQgPSAwO1xuXHRcdFx0YW5zW2ldID0gaSAhPT0gMCA/IHNlcCArIHNbaV0gOiBzW2ldO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRhbnNbaV0gPSBzW2ldO1xuXHRcdH1cblx0XHRjb3VudCsrO1xuXHR9XG5cblx0cmV0dXJuIGFucy5jb25jYXQoZW5kKS5qb2luKCcnKTtcbn07XG5cbmNvbnN0IG1hdGggPSB7XG5cdG51bWJlckZvcm1hdDogZnVuY3Rpb24oXG5cdFx0eDogbnVtYmVyIHwgc3RyaW5nLFxuXHRcdGRlYzogbnVtYmVyID0gMixcblx0XHRkZWNpbWFsU2VwOiBzdHJpbmcgPSAnLicsXG5cdFx0ZGlnaXRzU2VwOiBzdHJpbmcgPSAnICdcblx0KTogc3RyaW5nIHtcblx0XHRpZiAoIXgpIHtcblx0XHRcdHJldHVybiAnJztcblx0XHR9XG5cblx0XHRsZXQgYW5zID0gcGFyc2VGbG9hdChTdHJpbmcoeCkpLFxuXHRcdFx0ZGVjaW1hbFBvcztcblxuXHRcdGlmIChkZWMgPj0gMCkge1xuXHRcdFx0bGV0IGRlY2ltYWxQb3cgPSBNYXRoLnBvdygxMCwgZGVjKTtcblx0XHRcdGFucyA9IE1hdGguZmxvb3IoYW5zICogZGVjaW1hbFBvdykgLyBkZWNpbWFsUG93O1xuXHRcdH1cblxuXHRcdGxldCBuID0gX3NldERpZ2l0c1NlcChhbnMsIGRpZ2l0c1NlcCk7XG5cdFx0bGV0IGEgPSBuLnNwbGl0KCcnKTtcblxuXHRcdGRlY2ltYWxQb3MgPSBhLmxhc3RJbmRleE9mKCcuJyk7XG5cdFx0aWYgKGRlY2ltYWxQb3MgPj0gMCAmJiBkZWNpbWFsU2VwICE9PSAnLicpIHtcblx0XHRcdGFbZGVjaW1hbFBvc10gPSBkZWNpbWFsU2VwO1xuXHRcdH1cblxuXHRcdHJldHVybiBhLmpvaW4oJycpO1xuXHR9LFxuXHRndDogZnVuY3Rpb24oeDogbnVtYmVyLCB5OiBudW1iZXIsIGVxOiBib29sZWFuID0gZmFsc2UpOiBib29sZWFuIHtcblx0XHRyZXR1cm4gZXEgPyB4ID49IHkgOiB4ID4geTtcblx0fSxcblx0bHQ6IGZ1bmN0aW9uKHg6IG51bWJlciwgeTogbnVtYmVyLCBlcTogYm9vbGVhbiA9IGZhbHNlKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIGVxID8geCA8PSB5IDogeCA8IHk7XG5cdH0sXG5cdGJldHdlZW46IGZ1bmN0aW9uKFxuXHRcdHg6IG51bWJlcixcblx0XHRhOiBudW1iZXIsXG5cdFx0YjogbnVtYmVyLFxuXHRcdGVxOiBib29sZWFuID0gZmFsc2Vcblx0KTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIGVxID8geCA+PSBhICYmIHggPD0gYiA6IHggPiBhICYmIHggPCBiO1xuXHR9LFxuXHRpc1JhbmdlOiBmdW5jdGlvbihhOiBudW1iZXIsIGI6IG51bWJlcik6IGJvb2xlYW4ge1xuXHRcdHJldHVybiB0eXBlb2YgYSA9PT0gJ251bWJlcicgJiYgdHlwZW9mIGIgPT09ICdudW1iZXInICYmIGEgPCBiO1xuXHR9LFxufTtcblxuY29uc3QgaXNJbkRPTSA9IGZ1bmN0aW9uKGVsZW1lbnQ6IGFueSwgaW5Cb2R5OiBib29sZWFuID0gZmFsc2UpOiBib29sZWFuIHtcblx0bGV0IF8gPSBlbGVtZW50LFxuXHRcdGxhc3Q7XG5cblx0d2hpbGUgKF8pIHtcblx0XHRsYXN0ID0gXztcblx0XHRpZiAoaW5Cb2R5ICYmIGxhc3QgPT09IGRvY3VtZW50LmJvZHkpIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0XHRfID0gXy5wYXJlbnROb2RlO1xuXHR9XG5cblx0cmV0dXJuIGluQm9keSA/IGxhc3QgPT09IGRvY3VtZW50LmJvZHkgOiBsYXN0ID09PSBkb2N1bWVudDtcbn07XG5cbmNvbnN0IGJ1aWxkUXVlcnlTdHJpbmcgPSBmdW5jdGlvbihvYmplY3Q6IG9iamVjdCwgcHJlZml4OiBzdHJpbmcpOiBzdHJpbmcge1xuXHRjb25zdCBkdXBsaWNhdGVzID0ge30sXG5cdFx0c3RyID0gW107XG5cblx0Zm9yIChsZXQgcHJvcCBpbiBvYmplY3QpIHtcblx0XHRpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3ApKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRsZXQga2V5ID0gcHJlZml4ID8gcHJlZml4ICsgJ1snICsgcHJvcCArICddJyA6IHByb3AsXG5cdFx0XHR2YWx1ZSA9IChvYmplY3QgYXMgYW55KVtwcm9wXSxcblx0XHRcdHBhaXI7XG5cdFx0aWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuXHRcdFx0XHRwYWlyID0gZW5jb2RlVVJJQ29tcG9uZW50KGtleSk7XG5cdFx0XHR9IGVsc2UgaWYgKFV0aWxzLmlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG5cdFx0XHRcdHBhaXIgPSBidWlsZFF1ZXJ5U3RyaW5nKHZhbHVlLCBrZXkpO1xuXHRcdFx0fSBlbHNlIGlmIChVdGlscy5pc0FycmF5KHZhbHVlKSkge1xuXHRcdFx0XHRwYWlyID0gdmFsdWVcblx0XHRcdFx0XHQucmVkdWNlKGZ1bmN0aW9uKG1lbW8sIGl0ZW0pIHtcblx0XHRcdFx0XHRcdGlmICghKGR1cGxpY2F0ZXMgYXMgYW55KVtrZXldKVxuXHRcdFx0XHRcdFx0XHQoZHVwbGljYXRlcyBhcyBhbnkpW2tleV0gPSB7fTtcblx0XHRcdFx0XHRcdGlmICghKGR1cGxpY2F0ZXMgYXMgYW55KVtrZXldW2l0ZW1dKSB7XG5cdFx0XHRcdFx0XHRcdChkdXBsaWNhdGVzIGFzIGFueSlba2V5XVtpdGVtXSA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBtZW1vLmNvbmNhdChcblx0XHRcdFx0XHRcdFx0XHRlbmNvZGVVUklDb21wb25lbnQoa2V5KSArXG5cdFx0XHRcdFx0XHRcdFx0XHQnPScgK1xuXHRcdFx0XHRcdFx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KGl0ZW0pXG5cdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRyZXR1cm4gbWVtbztcblx0XHRcdFx0XHR9LCBbXSlcblx0XHRcdFx0XHQuam9pbignJicpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cGFpciA9XG5cdFx0XHRcdFx0ZW5jb2RlVVJJQ29tcG9uZW50KGtleSkgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpO1xuXHRcdFx0fVxuXG5cdFx0XHRzdHIucHVzaChwYWlyKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gc3RyLmpvaW4oJyYnKTtcbn07XG5cbmNvbnN0IHNodWZmbGUgPSAoYTogQXJyYXk8YW55Pik6IEFycmF5PGFueT4gPT4ge1xuXHRsZXQgaiwgeCwgaTtcblxuXHRmb3IgKGkgPSBhLmxlbmd0aCAtIDE7IGkgPiAwOyBpLS0pIHtcblx0XHRqID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGkgKyAxKSk7XG5cdFx0eCA9IGFbaV07XG5cdFx0YVtpXSA9IGFbal07XG5cdFx0YVtqXSA9IHg7XG5cdH1cblxuXHRyZXR1cm4gYTtcbn07XG5cbmNvbnN0IHBhcnNlUXVlcnlTdHJpbmcgPSBmdW5jdGlvbihzdHI6IHN0cmluZykge1xuXHRpZiAoc3RyLmNoYXJBdCgwKSA9PT0gJz8nKSBzdHIgPSBzdHIuc3Vic3RyaW5nKDEpO1xuXHRpZiAoIXN0ci5sZW5ndGgpIHJldHVybiB7fTtcblxuXHRjb25zdCBwYWlycyA9IHN0ci5zcGxpdCgnJicpLFxuXHRcdHBhcmFtcyA9IHt9O1xuXHRmb3IgKGxldCBpID0gMCwgbGVuID0gcGFpcnMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRsZXQgcGFpciA9IHBhaXJzW2ldLnNwbGl0KCc9JyksXG5cdFx0XHRrZXkgPSBkZWNvZGVVUklDb21wb25lbnQocGFpclswXSksXG5cdFx0XHR2YWx1ZSA9IHBhaXIubGVuZ3RoID09IDIgPyBkZWNvZGVVUklDb21wb25lbnQocGFpclsxXSkgOiBudWxsO1xuXHRcdGlmICgocGFyYW1zIGFzIGFueSlba2V5XSAhPSBudWxsKSB7XG5cdFx0XHRpZiAoIVV0aWxzLmlzQXJyYXkoKHBhcmFtcyBhcyBhbnkpW2tleV0pKSB7XG5cdFx0XHRcdChwYXJhbXMgYXMgYW55KVtrZXldID0gWyhwYXJhbXMgYXMgYW55KVtrZXldXTtcblx0XHRcdH1cblx0XHRcdChwYXJhbXMgYXMgYW55KVtrZXldLnB1c2godmFsdWUpO1xuXHRcdH0gZWxzZSAocGFyYW1zIGFzIGFueSlba2V5XSA9IHZhbHVlO1xuXHR9XG5cdHJldHVybiBwYXJhbXM7XG59O1xuXG5jb25zdCBwcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uKGU6IEV2ZW50KSB7XG5cdFx0aWYgKCFlKSB7XG5cdFx0XHRpZiAod2luZG93LmV2ZW50KSBlID0gd2luZG93LmV2ZW50O1xuXHRcdFx0ZWxzZSByZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKGUucHJldmVudERlZmF1bHQpIGUucHJldmVudERlZmF1bHQoKTtcblx0XHRpZiAoZS5jYW5jZWxCdWJibGUgIT0gbnVsbCkgZS5jYW5jZWxCdWJibGUgPSB0cnVlO1xuXHRcdGlmIChlLnN0b3BQcm9wYWdhdGlvbikgZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRpZiAod2luZG93LmV2ZW50KSBlLnJldHVyblZhbHVlID0gZmFsc2U7XG5cdFx0Ly8gaWYgKGUuY2FuY2VsICE9IG51bGwpIGUuY2FuY2VsID0gdHJ1ZTtcblx0fSxcblx0ZXZlbnRDYW5jZWwgPSBmdW5jdGlvbihlOiBFdmVudCkge1xuXHRcdGNvbnNvbGUud2Fybihcblx0XHRcdCdcIlV0aWxzLmV2ZW50Q2FuY2VsXCIgaXMgZGVwcmVjYXRlZCwgdXNlIFwiVXRpbHMucHJldmVudERlZmF1bHRcIiBpbnN0ZWFkJ1xuXHRcdCk7XG5cblx0XHRwcmV2ZW50RGVmYXVsdChlKTtcblx0fTtcblxuY29uc3QgaXNWYWxpZEFnZSA9IChcblx0ZGF5OiBudW1iZXIsXG5cdG1vbnRoOiBudW1iZXIsXG5cdHllYXI6IG51bWJlcixcblx0bWluQWdlOiBudW1iZXIsXG5cdG1heEFnZTogbnVtYmVyXG4pOiBib29sZWFuID0+IHtcblx0Ly8gZGVwZW5kaW5nIG9uIHRoZSB5ZWFyLCBjYWxjdWxhdGUgdGhlIG51bWJlciBvZiBkYXlzIGluIHRoZSBtb250aFxuXHRsZXQgZGF5c0luTW9udGgsXG5cdFx0ZmVicnVhcnlEYXlzID0geWVhciAlIDQgPT09IDAgPyAyOSA6IDI4O1xuXG5cdGRheXNJbk1vbnRoID0gWzMxLCBmZWJydWFyeURheXMsIDMxLCAzMCwgMzEsIDMwLCAzMSwgMzEsIDMwLCAzMSwgMzAsIDMxXTtcblxuXHQvLyBmaXJzdCwgY2hlY2sgdGhlIGluY29taW5nIG1vbnRoIGFuZCB5ZWFyIGFyZSB2YWxpZC5cblx0aWYgKCFtb250aCB8fCAhZGF5IHx8ICF5ZWFyKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cdGlmICgxID4gbW9udGggfHwgbW9udGggPiAxMikge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXHRpZiAoeWVhciA8IDApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblx0aWYgKDEgPiBkYXkgfHwgZGF5ID4gZGF5c0luTW9udGhbbW9udGggLSAxXSkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8vIGlmIHJlcXVpcmVkLCB2ZXJpZnkgdGhlIGN1cnJlbnQgZGF0ZSBpcyBMQVRFUiB0aGFuIHRoZSBpbmNvbWluZyBkYXRlLlxuXHRpZiAobWluQWdlICE9PSB1bmRlZmluZWQgfHwgbWF4QWdlICE9PSB1bmRlZmluZWQpIHtcblx0XHQvLyB3ZSBnZXQgY3VycmVudCB5ZWFyXG5cdFx0bGV0IGN1cnJlbnRZZWFyID0gbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpLFxuXHRcdFx0YWdlID0gY3VycmVudFllYXIgLSB5ZWFyO1xuXG5cdFx0aWYgKGFnZSA8IDApIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0aWYgKGFnZSA8IG1pbkFnZSkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRpZiAoYWdlID4gbWF4QWdlKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRydWU7XG59O1xuXG5jb25zdCBmaWxlU2l6ZUZvcm1hdCA9IGZ1bmN0aW9uKFxuXHRzaXplOiBudW1iZXIgLyogaW4gYnl0ZXMgKi8sXG5cdGRlY2ltYWxQb2ludDogc3RyaW5nID0gJy4nLFxuXHR0aG91c2FuZHNTZXA6IHN0cmluZyA9ICcgJ1xuKSB7XG5cdGxldCB1bml0cyA9IFsnYnl0ZScsICdLYicsICdNYicsICdHYicsICdUYiddLFxuXHRcdGlfbWF4ID0gdW5pdHMubGVuZ3RoLFxuXHRcdGkgPSAwLFxuXHRcdHJlc3VsdCA9IDA7XG5cblx0c2l6ZSA9IHBhcnNlRmxvYXQoU3RyaW5nKHNpemUpKTtcblxuXHR3aGlsZSAoc2l6ZSA+PSAxICYmIGkgPCBpX21heCkge1xuXHRcdHJlc3VsdCA9IHNpemU7XG5cdFx0c2l6ZSAvPSAxMDAwOyAvLyBub3QgMTAyNFxuXHRcdGkrKztcblx0fVxuXG5cdGxldCBwYXJ0cyA9IFN0cmluZyhyZXN1bHQpLnNwbGl0KCcuJyksXG5cdFx0aGVhZCA9XG5cdFx0XHRwYXJzZUludChwYXJ0c1swXSkgPT09IHJlc3VsdFxuXHRcdFx0XHQ/IHJlc3VsdFxuXHRcdFx0XHQ6IFV0aWxzLm1hdGgubnVtYmVyRm9ybWF0KFxuXHRcdFx0XHRcdFx0cmVzdWx0LFxuXHRcdFx0XHRcdFx0Mixcblx0XHRcdFx0XHRcdGRlY2ltYWxQb2ludCxcblx0XHRcdFx0XHRcdHRob3VzYW5kc1NlcFxuXHRcdFx0XHQgICk7XG5cblx0cmV0dXJuIGhlYWQgKyAnICcgKyB1bml0c1tpID09IDAgPyAwIDogaSAtIDFdO1xufTtcblxuLyoqXG4gKiBPcGVucyB0aGUgcHJvdmlkZWQgdXJsIGJ5IGluamVjdGluZyBhIGhpZGRlbiBpZnJhbWUgdGhhdCBjYWxsc1xuICogd2luZG93Lm9wZW4oKSwgdGhlbiByZW1vdmVzIHRoZSBpZnJhbWUgZnJvbSB0aGUgRE9NLlxuICpcbiAqIFByZXZlbnQgcmV2ZXJzZSB0YWJuYWJiaW5nIHBoaXNoaW5nIGF0dGFja3MgY2F1c2VkIGJ5IF9ibGFua1xuICpcbiAqIGh0dHBzOi8vbWF0aGlhc2J5bmVucy5naXRodWIuaW8vcmVsLW5vb3BlbmVyL1xuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9kYW5pZWxzdGp1bGVzL2JsYW5rc2hpZWxkL2Jsb2IvNmUyMDhiZjI1YTQ0YmY1MGQxYTVlODVhZTk2ZmVlMGMwMTVkMDViYy9ibGFua3NoaWVsZC5qcyNMMTY2XG4gKlxuICogQHBhcmFtIHVybFxuICogQHBhcmFtIHN0cldpbmRvd05hbWVcbiAqIEBwYXJhbSBzdHJXaW5kb3dGZWF0dXJlc1xuICovXG5jb25zdCBzYWZlT3BlbiA9IGZ1bmN0aW9uKFxuXHR1cmw6IHN0cmluZyA9ICcnLFxuXHRzdHJXaW5kb3dOYW1lOiBzdHJpbmcgPSAnJyxcblx0c3RyV2luZG93RmVhdHVyZXM6IHN0cmluZyA9ICcnXG4pIHtcblx0aWYgKHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ01TSUUnKSAhPT0gLTEpIHtcblx0XHQvLyBJRSBiZWZvcmUgMTFcblx0XHRsZXQgY2hpbGQgPSBvcGVuLmFwcGx5KHdpbmRvdywgW3VybCwgc3RyV2luZG93TmFtZSwgc3RyV2luZG93RmVhdHVyZXNdKTtcblx0XHRpZiAoY2hpbGQpIHtcblx0XHRcdGNoaWxkLm9wZW5lciA9IG51bGw7XG5cdFx0fVxuXHRcdHJldHVybiBjaGlsZDtcblx0fVxuXG5cdGxldCBpZnJhbWUsIGlmcmFtZURvYywgc2NyaXB0LCBvcGVuQXJncywgbmV3V2luO1xuXG5cdGlmcmFtZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2lmcmFtZScpIGFzIEhUTUxJRnJhbWVFbGVtZW50O1xuXHRpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuXHRpZnJhbWVEb2MgPSAoaWZyYW1lLmNvbnRlbnREb2N1bWVudCB8fFxuXHRcdChpZnJhbWUuY29udGVudFdpbmRvdyBhcyBhbnkpLmRvY3VtZW50KSBhcyBEb2N1bWVudDtcblxuXHRvcGVuQXJncyA9ICdcIicgKyB1cmwgKyAnXCInO1xuXHRpZiAoc3RyV2luZG93TmFtZSkge1xuXHRcdG9wZW5BcmdzICs9ICcsIFwiJyArIHN0cldpbmRvd05hbWUgKyAnXCInO1xuXHR9XG5cdGlmIChzdHJXaW5kb3dGZWF0dXJlcykge1xuXHRcdG9wZW5BcmdzICs9ICcsIFwiJyArIHN0cldpbmRvd0ZlYXR1cmVzICsgJ1wiJztcblx0fVxuXG5cdHNjcmlwdCA9IGlmcmFtZURvYy5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblx0c2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0Jztcblx0c2NyaXB0LnRleHQgPVxuXHRcdCd3aW5kb3cucGFyZW50ID0gbnVsbDsgd2luZG93LnRvcCA9IG51bGw7JyArXG5cdFx0J3dpbmRvdy5mcmFtZUVsZW1lbnQgPSBudWxsOyB2YXIgY2hpbGQgPSB3aW5kb3cub3BlbignICtcblx0XHRvcGVuQXJncyArXG5cdFx0Jyk7JyArXG5cdFx0J2lmIChjaGlsZCkgeyBjaGlsZC5vcGVuZXIgPSBudWxsIH0nO1xuXHRpZnJhbWVEb2MuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuXHRuZXdXaW4gPSAoaWZyYW1lLmNvbnRlbnRXaW5kb3cgYXMgYW55KS5jaGlsZCBhcyBXaW5kb3c7XG5cblx0ZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChpZnJhbWUpO1xuXHRyZXR1cm4gbmV3V2luO1xufTtcblxuY29uc3QgVXRpbHMgPSB7XG5cdGlzUGxhaW5PYmplY3QsXG5cdGlzU3RyaW5nLFxuXHRpc0FycmF5LFxuXHRpc0Z1bmN0aW9uLFxuXHRpc0VtcHR5LFxuXHRpc05vdEVtcHR5LFxuXHR0b0FycmF5LFxuXHRpc0luRE9NLFxuXHRzaHVmZmxlLFxuXHRpZDogbmF0dXJhbElkLFxuXHQvLyA9PT09PT09PT09PT1cblx0Y2FsbGJhY2ssXG5cdGFzc2lnbixcblx0Y29weSxcblx0ZXhwb3NlLFxuXHRnZXRGcm9tLFxuXHRzdHJpbmdLZXlSZXBsYWNlLFxuXHR0ZXh0VG9MaW5lU3RyaW5nLFxuXHRmb3JFYWNoLFxuXHQvLyA9PT09PT09PT09PT1cblx0bWF0aCxcblx0aXNWYWxpZEFnZSxcblx0Ly8gPT09PT09PT09PT09XG5cdGJ1aWxkUXVlcnlTdHJpbmcsXG5cdHBhcnNlUXVlcnlTdHJpbmcsXG5cdC8vID09PT09PT09PT09PVxuXHRldmVudENhbmNlbCxcblx0cHJldmVudERlZmF1bHQsXG5cdC8vID09PT09PT09PT09PVxuXHRmaWxlU2l6ZUZvcm1hdCxcblx0Ly8gPT09PT09PT09PT09XG5cdHNhZmVPcGVuLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgVXRpbHM7XG4iXX0=