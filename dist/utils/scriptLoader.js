import { callback, logger } from '.';
const document = window.document, isOldIE = /MSIE\s([5-9]\.0)/.test(navigator.userAgent);
if (typeof document !== 'object' ||
    typeof document.createElement !== 'function') {
    throw new Error('scriptLoader is for web use only');
}
export function noCache(url) {
    const _random = function () {
        return String(Math.random()).substring(2);
    };
    try {
        const u = new URL(url, window.location.href);
        u.searchParams.set('no_cache', _random());
        url = u.href;
    }
    catch (e) {
        logger.error('unable to disable caching on file', url, e);
    }
    return url;
}
export function loadScript(src, then, fail, disableCache = false) {
    if (!document.querySelector(`script[load-path='${src}']`)) {
        if (disableCache) {
            src = noCache(src);
        }
        const script = document.createElement('script');
        script.src = src;
        script.async = false;
        script.type = 'text/javascript';
        script.onload = function onLoad() {
            callback(then, [src]);
        };
        script.onerror = function onError() {
            script.parentNode && script.parentNode.removeChild(script);
            callback(fail, [src]);
        };
        script.setAttribute('load-path', src);
        document.body.appendChild(script);
        // ie9 hack: to force script execution in order
        // since ie9 does not support script.async  = false;
        // https://github.com/h5bp/lazyweb-requests/issues/42#issue-1382146
        if (isOldIE) {
            document.body.appendChild(document.createElement('script'));
        }
    }
    else {
        callback(then, [src]);
    }
}
export function loadScriptBatch(list, then, disableCache = false) {
    const total = list.length;
    const failed = [];
    const done = [];
    let counter = 0;
    const updateCount = (success, src) => {
        counter++;
        (success ? done : failed).push(src);
        if (counter === total) {
            callback(then, [!failed.length, done, failed]);
        }
    };
    for (let i = 0; i < total; i++) {
        const src = list[i][0];
        const fn = list[i][1];
        if (typeof fn === 'function' && !fn()) {
            continue;
        }
        loadScript(src, (_src) => {
            updateCount(true, _src);
        }, (_src) => {
            updateCount(false, _src);
        }, disableCache);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0TG9hZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL3NjcmlwdExvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUcsQ0FBQztBQUVyQyxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxFQUMvQixPQUFPLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUV4RCxJQUNDLE9BQU8sUUFBUSxLQUFLLFFBQVE7SUFDNUIsT0FBTyxRQUFRLENBQUMsYUFBYSxLQUFLLFVBQVUsRUFDM0M7SUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7Q0FDcEQ7QUFVRCxNQUFNLFVBQVUsT0FBTyxDQUFDLEdBQVc7SUFDbEMsTUFBTSxPQUFPLEdBQUc7UUFDZixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0MsQ0FBQyxDQUFDO0lBRUYsSUFBSTtRQUNILE1BQU0sQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdDLENBQUMsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQzFDLEdBQUcsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO0tBQ2I7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNYLE1BQU0sQ0FBQyxLQUFLLENBQUMsbUNBQW1DLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQzFEO0lBRUQsT0FBTyxHQUFHLENBQUM7QUFDWixDQUFDO0FBRUQsTUFBTSxVQUFVLFVBQVUsQ0FDekIsR0FBVyxFQUNYLElBQW9CLEVBQ3BCLElB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Q1IsV0FBVyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMxQixDQUFDLEVBQ0QsWUFBWSxDQUNaLENBQUM7S0FDRjtBQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjYWxsYmFjaywgbG9nZ2VyIH0gZnJvbSAnLic7XG5cbmNvbnN0IGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50LFxuXHRpc09sZElFID0gL01TSUVcXHMoWzUtOV1cXC4wKS8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuaWYgKFxuXHR0eXBlb2YgZG9jdW1lbnQgIT09ICdvYmplY3QnIHx8XG5cdHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSAnZnVuY3Rpb24nXG4pIHtcblx0dGhyb3cgbmV3IEVycm9yKCdzY3JpcHRMb2FkZXIgaXMgZm9yIHdlYiB1c2Ugb25seScpO1xufVxuXG5leHBvcnQgdHlwZSBPU2NyaXB0RmlsZSA9IFtzdHJpbmcsICgpID0+IGJvb2xlYW5dIHwgW3N0cmluZ107XG5leHBvcnQgdHlwZSBPQmF0Y2hDYiA9IChcblx0c3VjY2VzczogYm9vbGVhbixcblx0ZG9uZTogc3RyaW5nW10sXG5cdGZhaWxlZDogc3RyaW5nW11cbikgPT4gdm9pZDtcbmV4cG9ydCB0eXBlIE9TY3JpcHRMb2FkQ2IgPSAoc3JjOiBzdHJpbmcpID0+IHZvaWQ7XG5cbmV4cG9ydCBmdW5jdGlvbiBub0NhY2hlKHVybDogc3RyaW5nKTogc3RyaW5nIHtcblx0Y29uc3QgX3JhbmRvbSA9IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gU3RyaW5nKE1hdGgucmFuZG9tKCkpLnN1YnN0cmluZygyKTtcblx0fTtcblxuXHR0cnkge1xuXHRcdGNvbnN0IHUgPSBuZXcgVVJMKHVybCwgd2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXHRcdHUuc2VhcmNoUGFyYW1zLnNldCgnbm9fY2FjaGUnLCBfcmFuZG9tKCkpO1xuXHRcdHVybCA9IHUuaHJlZjtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGxvZ2dlci5lcnJvcigndW5hYmxlIHRvIGRpc2FibGUgY2FjaGluZyBvbiBmaWxlJywgdXJsLCBlKTtcblx0fVxuXG5cdHJldHVybiB1cmw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2FkU2NyaXB0KFxuXHRzcmM6IHN0cmluZyxcblx0dGhlbj86IE9TY3JpcHRMb2FkQ2IsXG5cdGZhaWw/OiBPU2NyaXB0TG9hZENiLFxuXHRkaXNhYmxlQ2FjaGUgPSBmYWxzZVxuKTogdm9pZCB7XG5cdGlmICghZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihgc2NyaXB0W2xvYWQtcGF0aD0nJHtzcmN9J11gKSkge1xuXHRcdGlmIChkaXNhYmxlQ2FjaGUpIHtcblx0XHRcdHNyYyA9IG5vQ2FjaGUoc3JjKTtcblx0XHR9XG5cblx0XHRjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblx0XHRzY3JpcHQuc3JjID0gc3JjO1xuXHRcdHNjcmlwdC5hc3luYyA9IGZhbHNlO1xuXHRcdHNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XG5cdFx0c2NyaXB0Lm9ubG9hZCA9IGZ1bmN0aW9uIG9uTG9hZCgpIHtcblx0XHRcdGNhbGxiYWNrKHRoZW4sIFtzcmNdKTtcblx0XHR9O1xuXHRcdHNjcmlwdC5vbmVycm9yID0gZnVuY3Rpb24gb25FcnJvcigpIHtcblx0XHRcdHNjcmlwdC5wYXJlbnROb2RlICYmIHNjcmlwdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG5cdFx0XHRjYWxsYmFjayhmYWlsLCBbc3JjXSk7XG5cdFx0fTtcblxuXHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoJ2xvYWQtcGF0aCcsIHNyYyk7XG5cdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuXHRcdC8vIGllOSBoYWNrOiB0byBmb3JjZSBzY3JpcHQgZXhlY3V0aW9uIGluIG9yZGVyXG5cdFx0Ly8gc2luY2UgaWU5IGRvZXMgbm90IHN1cHBvcnQgc2NyaXB0LmFzeW5jICA9IGZhbHNlO1xuXHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9oNWJwL2xhenl3ZWItcmVxdWVzdHMvaXNzdWVzLzQyI2lzc3VlLTEzODIxNDZcblx0XHRpZiAoaXNPbGRJRSkge1xuXHRcdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKSk7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdGNhbGxiYWNrKHRoZW4sIFtzcmNdKTtcblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9hZFNjcmlwdEJhdGNoKFxuXHRsaXN0OiBPU2NyaXB0RmlsZVtdLFxuXHR0aGVuPzogT0JhdGNoQ2IsXG5cdGRpc2FibGVDYWNoZSA9IGZhbHNlXG4pOiB2b2lkIHtcblx0Y29uc3QgdG90YWwgPSBsaXN0Lmxlbmd0aDtcblx0Y29uc3QgZmFpbGVkOiBzdHJpbmdbXSA9IFtdO1xuXHRjb25zdCBkb25lOiBzdHJpbmdbXSA9IFtdO1xuXHRsZXQgY291bnRlciA9IDA7XG5cdGNvbnN0IHVwZGF0ZUNvdW50ID0gKHN1Y2Nlc3M6IGJvb2xlYW4sIHNyYzogc3RyaW5nKSA9PiB7XG5cdFx0Y291bnRlcisrO1xuXHRcdChzdWNjZXNzID8gZG9uZSA6IGZhaWxlZCkucHVzaChzcmMpO1xuXG5cdFx0aWYgKGNvdW50ZXIgPT09IHRvdGFsKSB7XG5cdFx0XHRjYWxsYmFjayh0aGVuLCBbIWZhaWxlZC5sZW5ndGgsIGRvbmUsIGZhaWxlZF0pO1xuXHRcdH1cblx0fTtcblxuXHRmb3IgKGxldCBpID0gMDsgaSA8IHRvdGFsOyBpKyspIHtcblx0XHRjb25zdCBzcmMgPSBsaXN0W2ldWzBdO1xuXHRcdGNvbnN0IGZuID0gbGlzdFtpXVsxXTtcblxuXHRcdGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgJiYgIWZuKCkpIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGxvYWRTY3JpcHQoXG5cdFx0XHRzcmMsXG5cdFx0XHQoX3NyYykgPT4ge1xuXHRcdFx0XHR1cGRhdGVDb3VudCh0cnVlLCBfc3JjKTtcblx0XHRcdH0sXG5cdFx0XHQoX3NyYykgPT4ge1xuXHRcdFx0XHR1cGRhdGVDb3VudChmYWxzZSwgX3NyYyk7XG5cdFx0XHR9LFxuXHRcdFx0ZGlzYWJsZUNhY2hlXG5cdFx0KTtcblx0fVxufVxuIl19