"use strict";
import Utils from "./Utils";
let document = window.document;
let isOldIE = /MSIE\s([5-9]\.0)/.test(navigator.userAgent);
if (typeof document !== "object" || typeof document.createElement !== "function") {
    throw new Error("scriptLoader is for web use only");
}
let batchLoad = function (list, then, disable_cache = false) {
    let total = list.length;
    let failed = [];
    let done = [];
    let counter = 0;
    let updateCount = (success, src) => {
        counter++;
        (success ? done : failed).push(src);
        if (counter === total) {
            Utils.callback(then, [!failed.length, done, failed]);
        }
    };
    for (let i = 0; i < total; i++) {
        let src = list[i][0];
        let fn = list[i][1];
        if (typeof fn === "function" && !fn()) {
            continue;
        }
        tryLoad(src, (src) => {
            updateCount(true, src);
        }, (src) => {
            updateCount(false, src);
        }, disable_cache);
    }
};
let noCache = function (url) {
    let _random = function () {
        return String(Math.random()).substring(2);
    };
    try {
        let u = new URL(url, window.location.href);
        u.searchParams.set("nocache", _random());
        url = u.href;
    }
    catch (e) {
        console.error("unable to disable caching on file", url, e);
    }
    return url;
};
let tryLoad = function (src, then, fail, disable_cache = false) {
    if (!document.querySelector("script[load-path='" + src + "']")) {
        if (disable_cache) {
            src = noCache(src);
        }
        let script = document.createElement("script");
        script.src = src;
        script.async = false;
        script.type = "text/javascript";
        script.onload = function () {
            Utils.callback(then, [src]);
        };
        script.onerror = function () {
            script.parentNode.removeChild(script);
            Utils.callback(fail, [src]);
        };
        script.setAttribute("load-path", src);
        document.body.appendChild(script);
        //ie9 hack: to force script execution in order
        //since ie9 does not suport script.async  = false;
        //https://github.com/h5bp/lazyweb-requests/issues/42#issue-1382146
        if (isOldIE) {
            document.body.appendChild(document.createElement("script"));
        }
    }
    else {
        Utils.callback(then, [src]);
    }
};
export default {
    noCache,
    tryLoad,
    batchLoad
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0TG9hZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL3NjcmlwdExvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxZQUFZLENBQUM7QUFFYixPQUFPLEtBQUssTUFBTSxTQUFTLENBQUM7QUFFNUIsSUFBSSxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztBQUMvQixJQUFJLE9BQU8sR0FBSSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBRTVELElBQUksT0FBTyxRQUFRLEtBQUssUUFBUSxJQUFJLE9BQU8sUUFBUSxDQUFDLGFBQWEsS0FBSyxVQUFVLEVBQUU7SUFDakYsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO0NBQ3BEO0FBTUQsSUFBSSxTQUFTLEdBQUcsVUFBVSxJQUFtQixFQUFFLElBQWUsRUFBRSxnQkFBeUIsS0FBSztJQUM3RixJQUFJLEtBQUssR0FBbUIsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN4QyxJQUFJLE1BQU0sR0FBa0IsRUFBRSxDQUFDO0lBQy9CLElBQUksSUFBSSxHQUFvQixFQUFFLENBQUM7SUFDL0IsSUFBSSxPQUFPLEdBQWlCLENBQUMsQ0FBQztJQUM5QixJQUFJLFdBQVcsR0FBYSxDQUFDLE9BQWdCLEVBQUUsR0FBVyxFQUFFLEVBQUU7UUFDN0QsT0FBTyxFQUFFLENBQUM7UUFDVixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFcEMsSUFBSSxPQUFPLEtBQUssS0FBSyxFQUFFO1lBQ3RCLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQ3JEO0lBQ0YsQ0FBQyxD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LENBQUMsQ0FBQztTQUM1RDtLQUNEO1NBQU07UUFDTixLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDNUI7QUFDRixDQUFDLENBQUM7QUFFRixlQUFlO0lBQ2QsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0NBQ1QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgVXRpbHMgZnJvbSBcIi4vVXRpbHNcIjtcblxubGV0IGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50O1xubGV0IGlzT2xkSUUgID0gL01TSUVcXHMoWzUtOV1cXC4wKS8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gXCJmdW5jdGlvblwiKSB7XG5cdHRocm93IG5ldyBFcnJvcihcInNjcmlwdExvYWRlciBpcyBmb3Igd2ViIHVzZSBvbmx5XCIpO1xufVxuXG5leHBvcnQgdHlwZSB0U2NyaXB0RmlsZSA9IFthbnksICgpID0+IGJvb2xlYW5dIHwgW2FueV07XG50eXBlIHRCYXRjaENiID0gKHN1Y2Nlc3M6IGJvb2xlYW4sIGRvbmU6IEFycmF5PHN0cmluZz4sIGZhaWxlZDogQXJyYXk8c3RyaW5nPikgPT4gdm9pZDtcbnR5cGUgdFRyeUxvYWRDYiA9IChzcmM6IHN0cmluZykgPT4gdm9pZDtcblxubGV0IGJhdGNoTG9hZCA9IGZ1bmN0aW9uIChsaXN0OiB0U2NyaXB0RmlsZVtdLCB0aGVuPzogdEJhdGNoQ2IsIGRpc2FibGVfY2FjaGU6IGJvb2xlYW4gPSBmYWxzZSk6IHZvaWQge1xuXHRsZXQgdG90YWwgICAgICAgICAgICAgICAgID0gbGlzdC5sZW5ndGg7XG5cdGxldCBmYWlsZWQ6IEFycmF5PHN0cmluZz4gPSBbXTtcblx0bGV0IGRvbmU6IEFycmF5PHN0cmluZz4gICA9IFtdO1xuXHRsZXQgY291bnRlciAgICAgICAgICAgICAgID0gMDtcblx0bGV0IHVwZGF0ZUNvdW50ICAgICAgICAgICA9IChzdWNjZXNzOiBib29sZWFuLCBzcmM6IHN0cmluZykgPT4ge1xuXHRcdGNvdW50ZXIrKztcblx0XHQoc3VjY2VzcyA/IGRvbmUgOiBmYWlsZWQpLnB1c2goc3JjKTtcblxuXHRcdGlmIChjb3VudGVyID09PSB0b3RhbCkge1xuXHRcdFx0VXRpbHMuY2FsbGJhY2sodGhlbiwgWyFmYWlsZWQubGVuZ3RoLCBkb25lLCBmYWlsZWRdKTtcblx0XHR9XG5cdH07XG5cblx0Zm9yIChsZXQgaSA9IDA7IGkgPCB0b3RhbDsgaSsrKSB7XG5cdFx0bGV0IHNyYyA9IGxpc3RbaV1bMF07XG5cdFx0bGV0IGZuICA9IGxpc3RbaV1bMV07XG5cblx0XHRpZiAodHlwZW9mIGZuID09PSBcImZ1bmN0aW9uXCIgJiYgIWZuKCkpIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdHRyeUxvYWQoc3JjLCAoc3JjKSA9PiB7XG5cdFx0XHR1cGRhdGVDb3VudCh0cnVlLCBzcmMpO1xuXHRcdH0sIChzcmMpID0+IHtcblx0XHRcdHVwZGF0ZUNvdW50KGZhbHNlLCBzcmMpO1xuXHRcdH0sIGRpc2FibGVfY2FjaGUpO1xuXHR9XG59O1xuXG5sZXQgbm9DYWNoZSA9IGZ1bmN0aW9uICh1cmw6IHN0cmluZyk6IHN0cmluZyB7XG5cdGxldCBfcmFuZG9tID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBTdHJpbmcoTWF0aC5yYW5kb20oKSkuc3Vic3RyaW5nKDIpO1xuXHR9O1xuXG5cdHRyeSB7XG5cdFx0bGV0IHUgPSBuZXcgVVJMKHVybCwgd2luZG93LmxvY2F0aW9uLmhyZWYpO1xuXHRcdHUuc2VhcmNoUGFyYW1zLnNldChcIm5vY2FjaGVcIiwgX3JhbmRvbSgpKTtcblx0XHR1cmwgPSB1LmhyZWY7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRjb25zb2xlLmVycm9yKFwidW5hYmxlIHRvIGRpc2FibGUgY2FjaGluZyBvbiBmaWxlXCIsIHVybCwgZSk7XG5cdH1cblxuXHRyZXR1cm4gdXJsO1xufTtcblxubGV0IHRyeUxvYWQgPSBmdW5jdGlvbiAoc3JjOiBzdHJpbmcsIHRoZW4/OiB0VHJ5TG9hZENiLCBmYWlsPzogdFRyeUxvYWRDYiwgZGlzYWJsZV9jYWNoZTogYm9vbGVhbiA9IGZhbHNlKSB7XG5cblx0aWYgKCFkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwic2NyaXB0W2xvYWQtcGF0aD0nXCIgKyBzcmMgKyBcIiddXCIpKSB7XG5cblx0XHRpZiAoZGlzYWJsZV9jYWNoZSkge1xuXHRcdFx0c3JjID0gbm9DYWNoZShzcmMpO1xuXHRcdH1cblxuXHRcdGxldCBzY3JpcHQgICAgID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKTtcblx0XHRzY3JpcHQuc3JjICAgICA9IHNyYztcblx0XHRzY3JpcHQuYXN5bmMgICA9IGZhbHNlO1xuXHRcdHNjcmlwdC50eXBlICAgID0gXCJ0ZXh0L2phdmFzY3JpcHRcIjtcblx0XHRzY3JpcHQub25sb2FkICA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFV0aWxzLmNhbGxiYWNrKHRoZW4sIFtzcmNdKTtcblx0XHR9O1xuXHRcdHNjcmlwdC5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0c2NyaXB0LnBhcmVudE5vZGUhLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG5cdFx0XHRVdGlscy5jYWxsYmFjayhmYWlsLCBbc3JjXSk7XG5cdFx0fTtcblxuXHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJsb2FkLXBhdGhcIiwgc3JjKTtcblx0XHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7XG5cdFx0Ly9pZTkgaGFjazogdG8gZm9yY2Ugc2NyaXB0IGV4ZWN1dGlvbiBpbiBvcmRlclxuXHRcdC8vc2luY2UgaWU5IGRvZXMgbm90IHN1cG9ydCBzY3JpcHQuYXN5bmMgID0gZmFsc2U7XG5cdFx0Ly9odHRwczovL2dpdGh1Yi5jb20vaDVicC9sYXp5d2ViLXJlcXVlc3RzL2lzc3Vlcy80MiNpc3N1ZS0xMzgyMTQ2XG5cdFx0aWYgKGlzT2xkSUUpIHtcblx0XHRcdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInNjcmlwdFwiKSk7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdFV0aWxzLmNhbGxiYWNrKHRoZW4sIFtzcmNdKTtcblx0fVxufTtcblxuZXhwb3J0IGRlZmF1bHQge1xuXHRub0NhY2hlLFxuXHR0cnlMb2FkLFxuXHRiYXRjaExvYWRcbn07XG4iXX0=