import { callback, logger } from '.';
export function noCache(url) {
    const _random = function () {
        return String(Math.random()).substring(2);
    };
    try {
        const u = new URL(url, window.location.href);
        u.searchParams.set('no_cache', _random());
        url = u.href;
    }
    catch (e) {
        logger.error('unable to disable caching on file', url, e);
    }
    return url;
}
export function loadScript(src, then, fail, disableCache = false) {
    const document = window.document, isOldIE = /MSIE\s([5-9]\.0)/.test(navigator.userAgent);
    if (typeof document !== 'object' ||
        typeof document.createElement !== 'function') {
        throw new Error('loadScript require a web environment.');
    }
    if (!document.querySelector(`script[load-path='${src}']`)) {
        if (disableCache) {
            src = noCache(src);
        }
        const script = document.createElement('script');
        script.src = src;
        script.async = false;
        script.type = 'text/javascript';
        script.onload = function onLoad() {
            callback(then, [src]);
        };
        script.onerror = function onError() {
            script.parentNode && script.parentNode.removeChild(script);
            callback(fail, [src]);
        };
        script.setAttribute('load-path', src);
        document.body.appendChild(script);
        // ie9 hack: to force script execution in order
        // since ie9 does not support script.async  = false;
        // https://github.com/h5bp/lazyweb-requests/issues/42#issue-1382146
        if (isOldIE) {
            document.body.appendChild(document.createElement('script'));
        }
    }
    else {
        callback(then, [src]);
    }
}
export function loadScriptBatch(list, then, disableCache = false) {
    const total = list.length;
    const failed = [];
    const done = [];
    let counter = 0;
    const updateCount = (success, src) => {
        counter++;
        (success ? done : failed).push(src);
        if (counter === total) {
            callback(then, [!failed.length, done, failed]);
        }
    };
    for (let i = 0; i < total; i++) {
        const src = list[i][0];
        const fn = list[i][1];
        if (typeof fn === 'function' && !fn()) {
            continue;
        }
        loadScript(src, (_src) => {
            updateCount(true, _src);
        }, (_src) => {
            updateCount(false, _src);
        }, disableCache);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0TG9hZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL3NjcmlwdExvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUcsQ0FBQztBQVVyQyxNQUFNLFVBQVUsT0FBTyxDQUFDLEdBQVc7SUFDbEMsTUFBTSxPQUFPLEdBQUc7UUFDZixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0MsQ0FBQyxDQUFDO0lBRUYsSUFBSTtRQUNILE1BQU0sQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdDLENBQUMsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQzFDLEdBQUcsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO0tBQ2I7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNYLE1BQU0sQ0FBQyxLQUFLLENBQUMsbUNBQW1DLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQzFEO0lBRUQsT0FBTyxHQUFHLENBQUM7QUFDWixDQUFDO0FBRUQsTUFBTSxVQUFVLFVBQVUsQ0FDekIsR0FBVyxFQUNYLElBQW9CLEVBQ3BCLElBQW9CLEVBQ3BCLFlBQVksR0FBRyxLQUFLO0lBRXBCLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLEVBQzdCLE9BQU8sR0FBRyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBRTFELElBQ0MsT0FBTyxRQUFRLEtBQUssUUFBUTtRQUM1QixPQUFPLFFBQVEsQ0FBQyxhQUFhLEtBQUssVUFBVSxFQUMzQztRQUNELE1BQU0sSUFBSSxLQUFLLENB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Q1IsV0FBVyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMxQixDQUFDLEVBQ0QsWUFBWSxDQUNaLENBQUM7S0FDRjtBQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjYWxsYmFjaywgbG9nZ2VyIH0gZnJvbSAnLic7XG5cbmV4cG9ydCB0eXBlIE9TY3JpcHRGaWxlID0gW3N0cmluZywgKCkgPT4gYm9vbGVhbl0gfCBbc3RyaW5nXTtcbmV4cG9ydCB0eXBlIE9CYXRjaENiID0gKFxuXHRzdWNjZXNzOiBib29sZWFuLFxuXHRkb25lOiBzdHJpbmdbXSxcblx0ZmFpbGVkOiBzdHJpbmdbXVxuKSA9PiB2b2lkO1xuZXhwb3J0IHR5cGUgT1NjcmlwdExvYWRDYiA9IChzcmM6IHN0cmluZykgPT4gdm9pZDtcblxuZXhwb3J0IGZ1bmN0aW9uIG5vQ2FjaGUodXJsOiBzdHJpbmcpOiBzdHJpbmcge1xuXHRjb25zdCBfcmFuZG9tID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBTdHJpbmcoTWF0aC5yYW5kb20oKSkuc3Vic3RyaW5nKDIpO1xuXHR9O1xuXG5cdHRyeSB7XG5cdFx0Y29uc3QgdSA9IG5ldyBVUkwodXJsLCB3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cdFx0dS5zZWFyY2hQYXJhbXMuc2V0KCdub19jYWNoZScsIF9yYW5kb20oKSk7XG5cdFx0dXJsID0gdS5ocmVmO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0bG9nZ2VyLmVycm9yKCd1bmFibGUgdG8gZGlzYWJsZSBjYWNoaW5nIG9uIGZpbGUnLCB1cmwsIGUpO1xuXHR9XG5cblx0cmV0dXJuIHVybDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRTY3JpcHQoXG5cdHNyYzogc3RyaW5nLFxuXHR0aGVuPzogT1NjcmlwdExvYWRDYixcblx0ZmFpbD86IE9TY3JpcHRMb2FkQ2IsXG5cdGRpc2FibGVDYWNoZSA9IGZhbHNlXG4pOiB2b2lkIHtcblx0Y29uc3QgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQsXG5cdFx0ICBpc09sZElFID0gL01TSUVcXHMoWzUtOV1cXC4wKS8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuXHRpZiAoXG5cdFx0dHlwZW9mIGRvY3VtZW50ICE9PSAnb2JqZWN0JyB8fFxuXHRcdHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSAnZnVuY3Rpb24nXG5cdCkge1xuXHRcdHRocm93IG5ldyBFcnJvcignbG9hZFNjcmlwdCByZXF1aXJlIGEgd2ViIGVudmlyb25tZW50LicpO1xuXHR9XG5cblx0aWYgKCFkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGBzY3JpcHRbbG9hZC1wYXRoPScke3NyY30nXWApKSB7XG5cdFx0aWYgKGRpc2FibGVDYWNoZSkge1xuXHRcdFx0c3JjID0gbm9DYWNoZShzcmMpO1xuXHRcdH1cblxuXHRcdGNvbnN0IHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuXHRcdHNjcmlwdC5zcmMgPSBzcmM7XG5cdFx0c2NyaXB0LmFzeW5jID0gZmFsc2U7XG5cdFx0c2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0Jztcblx0XHRzY3JpcHQub25sb2FkID0gZnVuY3Rpb24gb25Mb2FkKCkge1xuXHRcdFx0Y2FsbGJhY2sodGhlbiwgW3NyY10pO1xuXHRcdH07XG5cdFx0c2NyaXB0Lm9uZXJyb3IgPSBmdW5jdGlvbiBvbkVycm9yKCkge1xuXHRcdFx0c2NyaXB0LnBhcmVudE5vZGUgJiYgc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcblx0XHRcdGNhbGxiYWNrKGZhaWwsIFtzcmNdKTtcblx0XHR9O1xuXG5cdFx0c2NyaXB0LnNldEF0dHJpYnV0ZSgnbG9hZC1wYXRoJywgc3JjKTtcblx0XHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7XG5cdFx0Ly8gaWU5IGhhY2s6IHRvIGZvcmNlIHNjcmlwdCBleGVjdXRpb24gaW4gb3JkZXJcblx0XHQvLyBzaW5jZSBpZTkgZG9lcyBub3Qgc3VwcG9ydCBzY3JpcHQuYXN5bmMgID0gZmFsc2U7XG5cdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2g1YnAvbGF6eXdlYi1yZXF1ZXN0cy9pc3N1ZXMvNDIjaXNzdWUtMTM4MjE0NlxuXHRcdGlmIChpc09sZElFKSB7XG5cdFx0XHRkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpKTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0Y2FsbGJhY2sodGhlbiwgW3NyY10pO1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2FkU2NyaXB0QmF0Y2goXG5cdGxpc3Q6IE9TY3JpcHRGaWxlW10sXG5cdHRoZW4/OiBPQmF0Y2hDYixcblx0ZGlzYWJsZUNhY2hlID0gZmFsc2Vcbik6IHZvaWQge1xuXHRjb25zdCB0b3RhbCA9IGxpc3QubGVuZ3RoO1xuXHRjb25zdCBmYWlsZWQ6IHN0cmluZ1tdID0gW107XG5cdGNvbnN0IGRvbmU6IHN0cmluZ1tdID0gW107XG5cdGxldCBjb3VudGVyID0gMDtcblx0Y29uc3QgdXBkYXRlQ291bnQgPSAoc3VjY2VzczogYm9vbGVhbiwgc3JjOiBzdHJpbmcpID0+IHtcblx0XHRjb3VudGVyKys7XG5cdFx0KHN1Y2Nlc3MgPyBkb25lIDogZmFpbGVkKS5wdXNoKHNyYyk7XG5cblx0XHRpZiAoY291bnRlciA9PT0gdG90YWwpIHtcblx0XHRcdGNhbGxiYWNrKHRoZW4sIFshZmFpbGVkLmxlbmd0aCwgZG9uZSwgZmFpbGVkXSk7XG5cdFx0fVxuXHR9O1xuXG5cdGZvciAobGV0IGkgPSAwOyBpIDwgdG90YWw7IGkrKykge1xuXHRcdGNvbnN0IHNyYyA9IGxpc3RbaV1bMF07XG5cdFx0Y29uc3QgZm4gPSBsaXN0W2ldWzFdO1xuXG5cdFx0aWYgKHR5cGVvZiBmbiA9PT0gJ2Z1bmN0aW9uJyAmJiAhZm4oKSkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0bG9hZFNjcmlwdChcblx0XHRcdHNyYyxcblx0XHRcdChfc3JjKSA9PiB7XG5cdFx0XHRcdHVwZGF0ZUNvdW50KHRydWUsIF9zcmMpO1xuXHRcdFx0fSxcblx0XHRcdChfc3JjKSA9PiB7XG5cdFx0XHRcdHVwZGF0ZUNvdW50KGZhbHNlLCBfc3JjKTtcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlQ2FjaGVcblx0XHQpO1xuXHR9XG59XG4iXX0=