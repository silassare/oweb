import { callback, logger } from '.';
const document = window.document, isOldIE = /MSIE\s([5-9]\.0)/.test(navigator.userAgent);
if (typeof document !== 'object' ||
    typeof document.createElement !== 'function') {
    throw new Error('scriptLoader is for web use only');
}
const batchLoad = function (list, then, disableCache = false) {
    const total = list.length;
    const failed = [];
    const done = [];
    let counter = 0;
    const updateCount = (success, src) => {
        counter++;
        (success ? done : failed).push(src);
        if (counter === total) {
            callback(then, [!failed.length, done, failed]);
        }
    };
    for (let i = 0; i < total; i++) {
        const src = list[i][0];
        const fn = list[i][1];
        if (typeof fn === 'function' && !fn()) {
            continue;
        }
        tryLoad(src, (_src) => {
            updateCount(true, _src);
        }, (_src) => {
            updateCount(false, _src);
        }, disableCache);
    }
};
const noCache = function (url) {
    const _random = function () {
        return String(Math.random()).substring(2);
    };
    try {
        const u = new URL(url, window.location.href);
        u.searchParams.set('no_cache', _random());
        url = u.href;
    }
    catch (e) {
        logger.error('unable to disable caching on file', url, e);
    }
    return url;
};
const tryLoad = function (src, then, fail, disableCache = false) {
    if (!document.querySelector(`script[load-path='${src}']`)) {
        if (disableCache) {
            src = noCache(src);
        }
        const script = document.createElement('script');
        script.src = src;
        script.async = false;
        script.type = 'text/javascript';
        script.onload = function () {
            callback(then, [src]);
        };
        script.onerror = function () {
            script.parentNode.removeChild(script);
            callback(fail, [src]);
        };
        script.setAttribute('load-path', src);
        document.body.appendChild(script);
        // ie9 hack: to force script execution in order
        // since ie9 does not support script.async  = false;
        // https://github.com/h5bp/lazyweb-requests/issues/42#issue-1382146
        if (isOldIE) {
            document.body.appendChild(document.createElement('script'));
        }
    }
    else {
        callback(then, [src]);
    }
};
export default {
    noCache,
    tryLoad,
    batchLoad,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0TG9hZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL3NjcmlwdExvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxNQUFNLEdBQUcsQ0FBQztBQUVyQyxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxFQUMvQixPQUFPLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUV4RCxJQUNDLE9BQU8sUUFBUSxLQUFLLFFBQVE7SUFDNUIsT0FBTyxRQUFRLENBQUMsYUFBYSxLQUFLLFVBQVUsRUFDM0M7SUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7Q0FDcEQ7QUFNRCxNQUFNLFNBQVMsR0FBRyxVQUNqQixJQUFtQixFQUNuQixJQUFlLEVBQ2YsZUFBd0IsS0FBSztJQUU3QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQzFCLE1BQU0sTUFBTSxHQUFhLEVBQUUsQ0FBQztJQUM1QixNQUFNLElBQUksR0FBYSxFQUFFLENBQUM7SUFDMUIsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDO0lBQ2hCLE1BQU0sV0FBVyxHQUFHLENBQUMsT0FBZ0IsRUFBRSxHQUFXLEVBQUUsRUFBRTtRQUNyRCxPQUFPLEVBQUUsQ0FBQztRQUNWLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVwQyxJQUFJLE9BQU8sS0FBSyxLQUFLLEVBQUU7WUFDdEIsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUMvQztJQUNGLENBQUMsQ0FBQztJQUVGLEtBQUssSUFB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QUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0tBQ3RCO0FBQ0YsQ0FBQyxDQUFDO0FBRUYsZUFBZTtJQUNkLE9BQU87SUFDUCxPQUFPO0lBQ1AsU0FBUztDQUNULENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjYWxsYmFjaywgbG9nZ2VyIH0gZnJvbSAnLic7XG5cbmNvbnN0IGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50LFxuXHRpc09sZElFID0gL01TSUVcXHMoWzUtOV1cXC4wKS8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuaWYgKFxuXHR0eXBlb2YgZG9jdW1lbnQgIT09ICdvYmplY3QnIHx8XG5cdHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSAnZnVuY3Rpb24nXG4pIHtcblx0dGhyb3cgbmV3IEVycm9yKCdzY3JpcHRMb2FkZXIgaXMgZm9yIHdlYiB1c2Ugb25seScpO1xufVxuXG5leHBvcnQgdHlwZSB0U2NyaXB0RmlsZSA9IFthbnksICgpID0+IGJvb2xlYW5dIHwgW2FueV07XG50eXBlIHRCYXRjaENiID0gKHN1Y2Nlc3M6IGJvb2xlYW4sIGRvbmU6IHN0cmluZ1tdLCBmYWlsZWQ6IHN0cmluZ1tdKSA9PiB2b2lkO1xudHlwZSB0VHJ5TG9hZENiID0gKHNyYzogc3RyaW5nKSA9PiB2b2lkO1xuXG5jb25zdCBiYXRjaExvYWQgPSBmdW5jdGlvbiAoXG5cdGxpc3Q6IHRTY3JpcHRGaWxlW10sXG5cdHRoZW4/OiB0QmF0Y2hDYixcblx0ZGlzYWJsZUNhY2hlOiBib29sZWFuID0gZmFsc2UsXG4pOiB2b2lkIHtcblx0Y29uc3QgdG90YWwgPSBsaXN0Lmxlbmd0aDtcblx0Y29uc3QgZmFpbGVkOiBzdHJpbmdbXSA9IFtdO1xuXHRjb25zdCBkb25lOiBzdHJpbmdbXSA9IFtdO1xuXHRsZXQgY291bnRlciA9IDA7XG5cdGNvbnN0IHVwZGF0ZUNvdW50ID0gKHN1Y2Nlc3M6IGJvb2xlYW4sIHNyYzogc3RyaW5nKSA9PiB7XG5cdFx0Y291bnRlcisrO1xuXHRcdChzdWNjZXNzID8gZG9uZSA6IGZhaWxlZCkucHVzaChzcmMpO1xuXG5cdFx0aWYgKGNvdW50ZXIgPT09IHRvdGFsKSB7XG5cdFx0XHRjYWxsYmFjayh0aGVuLCBbIWZhaWxlZC5sZW5ndGgsIGRvbmUsIGZhaWxlZF0pO1xuXHRcdH1cblx0fTtcblxuXHRmb3IgKGxldCBpID0gMDsgaSA8IHRvdGFsOyBpKyspIHtcblx0XHRjb25zdCBzcmMgPSBsaXN0W2ldWzBdO1xuXHRcdGNvbnN0IGZuID0gbGlzdFtpXVsxXTtcblxuXHRcdGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgJiYgIWZuKCkpIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdHRyeUxvYWQoXG5cdFx0XHRzcmMsXG5cdFx0XHQoX3NyYykgPT4ge1xuXHRcdFx0XHR1cGRhdGVDb3VudCh0cnVlLCBfc3JjKTtcblx0XHRcdH0sXG5cdFx0XHQoX3NyYykgPT4ge1xuXHRcdFx0XHR1cGRhdGVDb3VudChmYWxzZSwgX3NyYyk7XG5cdFx0XHR9LFxuXHRcdFx0ZGlzYWJsZUNhY2hlLFxuXHRcdCk7XG5cdH1cbn07XG5cbmNvbnN0IG5vQ2FjaGUgPSBmdW5jdGlvbiAodXJsOiBzdHJpbmcpOiBzdHJpbmcge1xuXHRjb25zdCBfcmFuZG9tID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBTdHJpbmcoTWF0aC5yYW5kb20oKSkuc3Vic3RyaW5nKDIpO1xuXHR9O1xuXG5cdHRyeSB7XG5cdFx0Y29uc3QgdSA9IG5ldyBVUkwodXJsLCB3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cdFx0dS5zZWFyY2hQYXJhbXMuc2V0KCdub19jYWNoZScsIF9yYW5kb20oKSk7XG5cdFx0dXJsID0gdS5ocmVmO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0bG9nZ2VyLmVycm9yKCd1bmFibGUgdG8gZGlzYWJsZSBjYWNoaW5nIG9uIGZpbGUnLCB1cmwsIGUpO1xuXHR9XG5cblx0cmV0dXJuIHVybDtcbn07XG5cbmNvbnN0IHRyeUxvYWQgPSBmdW5jdGlvbiAoXG5cdHNyYzogc3RyaW5nLFxuXHR0aGVuPzogdFRyeUxvYWRDYixcblx0ZmFpbD86IHRUcnlMb2FkQ2IsXG5cdGRpc2FibGVDYWNoZTogYm9vbGVhbiA9IGZhbHNlLFxuKSB7XG5cdGlmICghZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihgc2NyaXB0W2xvYWQtcGF0aD0nJHtzcmN9J11gKSkge1xuXHRcdGlmIChkaXNhYmxlQ2FjaGUpIHtcblx0XHRcdHNyYyA9IG5vQ2FjaGUoc3JjKTtcblx0XHR9XG5cblx0XHRjb25zdCBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblx0XHRzY3JpcHQuc3JjID0gc3JjO1xuXHRcdHNjcmlwdC5hc3luYyA9IGZhbHNlO1xuXHRcdHNjcmlwdC50eXBlID0gJ3RleHQvamF2YXNjcmlwdCc7XG5cdFx0c2NyaXB0Lm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdGNhbGxiYWNrKHRoZW4sIFtzcmNdKTtcblx0XHR9O1xuXHRcdHNjcmlwdC5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0c2NyaXB0LnBhcmVudE5vZGUhLnJlbW92ZUNoaWxkKHNjcmlwdCk7XG5cdFx0XHRjYWxsYmFjayhmYWlsLCBbc3JjXSk7XG5cdFx0fTtcblxuXHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoJ2xvYWQtcGF0aCcsIHNyYyk7XG5cdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuXHRcdC8vIGllOSBoYWNrOiB0byBmb3JjZSBzY3JpcHQgZXhlY3V0aW9uIGluIG9yZGVyXG5cdFx0Ly8gc2luY2UgaWU5IGRvZXMgbm90IHN1cHBvcnQgc2NyaXB0LmFzeW5jICA9IGZhbHNlO1xuXHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9oNWJwL2xhenl3ZWItcmVxdWVzdHMvaXNzdWVzLzQyI2lzc3VlLTEzODIxNDZcblx0XHRpZiAoaXNPbGRJRSkge1xuXHRcdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKSk7XG5cdFx0fVxuXHR9IGVsc2Uge1xuXHRcdGNhbGxiYWNrKHRoZW4sIFtzcmNdKTtcblx0fVxufTtcblxuZXhwb3J0IGRlZmF1bHQge1xuXHRub0NhY2hlLFxuXHR0cnlMb2FkLFxuXHRiYXRjaExvYWQsXG59O1xuIl19