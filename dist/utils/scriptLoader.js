import Utils from "./Utils";
let document = window.document;
let isOldIE = /MSIE\s([5-9]\.0)/.test(navigator.userAgent);
if (typeof document !== "object" || typeof document.createElement !== "function") {
    throw new Error("scriptLoader is for web use only");
}
let batchLoad = function (list, then, disable_cache = false) {
    let total = list.length;
    let failed = [];
    let done = [];
    let counter = 0;
    let updateCount = (success, src) => {
        counter++;
        (success ? done : failed).push(src);
        if (counter === total) {
            Utils.callback(then, [!failed.length, done, failed]);
        }
    };
    for (let i = 0; i < total; i++) {
        let src = list[i][0];
        let fn = list[i][1];
        if (typeof fn === "function" && !fn()) {
            continue;
        }
        tryLoad(src, (src) => {
            updateCount(true, src);
        }, (src) => {
            updateCount(false, src);
        }, disable_cache);
    }
};
let noCache = function (url) {
    let _random = function () {
        return String(Math.random()).substring(2);
    };
    try {
        let u = new URL(url, window.location.href);
        u.searchParams.set("nocache", _random());
        url = u.href;
    }
    catch (e) {
        console.error("unable to disable caching on file", url, e);
    }
    return url;
};
let tryLoad = function (src, then, fail, disable_cache = false) {
    if (!document.querySelector("script[load-path='" + src + "']")) {
        if (disable_cache) {
            src = noCache(src);
        }
        let script = document.createElement("script");
        script.src = src;
        script.async = false;
        script.type = "text/javascript";
        script.onload = function () {
            Utils.callback(then, [src]);
        };
        script.onerror = function () {
            script.parentNode.removeChild(script);
            Utils.callback(fail, [src]);
        };
        script.setAttribute("load-path", src);
        document.body.appendChild(script);
        //ie9 hack: to force script execution in order
        //since ie9 does not suport script.async  = false;
        //https://github.com/h5bp/lazyweb-requests/issues/42#issue-1382146
        if (isOldIE) {
            document.body.appendChild(document.createElement("script"));
        }
    }
    else {
        Utils.callback(then, [src]);
    }
};
export default {
    noCache,
    tryLoad,
    batchLoad
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0TG9hZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL3NjcmlwdExvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssTUFBTSxTQUFTLENBQUM7QUFFNUIsSUFBSSxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQztBQUMvQixJQUFJLE9BQU8sR0FBSSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBRTVELElBQUksT0FBTyxRQUFRLEtBQUssUUFBUSxJQUFJLE9BQU8sUUFBUSxDQUFDLGFBQWEsS0FBSyxVQUFVLEVBQUU7SUFDakYsTUFBTSxJQUFJLEtBQUssQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO0NBQ3BEO0FBTUQsSUFBSSxTQUFTLEdBQUcsVUFBVSxJQUFtQixFQUFFLElBQWUsRUFBRSxnQkFBeUIsS0FBSztJQUM3RixJQUFJLEtBQUssR0FBbUIsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN4QyxJQUFJLE1BQU0sR0FBa0IsRUFBRSxDQUFDO0lBQy9CLElBQUksSUFBSSxHQUFvQixFQUFFLENBQUM7SUFDL0IsSUFBSSxPQUFPLEdBQWlCLENBQUMsQ0FBQztJQUM5QixJQUFJLFdBQVcsR0FBYSxDQUFDLE9BQWdCLEVBQUUsR0FBVyxFQUFFLEVBQUU7UUFDN0QsT0FBTyxFQUFFLENBQUM7UUFDVixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFcEMsSUFBSSxPQUFPLEtBQUssS0FBSyxFQUFFO1lBQ3RCLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQ3JEO0lBQ0YsQ0FBQyxDQUFDO0lBRUYsS0FBSyxJ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RDtLQUNEO1NBQU07UUFDTixLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7S0FDNUI7QUFDRixDQUFDLENBQUM7QUFFRixlQUFlO0lBQ2QsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0NBQ1QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBVdGlscyBmcm9tIFwiLi9VdGlsc1wiO1xuXG5sZXQgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5sZXQgaXNPbGRJRSAgPSAvTVNJRVxccyhbNS05XVxcLjApLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSBcImZ1bmN0aW9uXCIpIHtcblx0dGhyb3cgbmV3IEVycm9yKFwic2NyaXB0TG9hZGVyIGlzIGZvciB3ZWIgdXNlIG9ubHlcIik7XG59XG5cbmV4cG9ydCB0eXBlIHRTY3JpcHRGaWxlID0gW2FueSwgKCkgPT4gYm9vbGVhbl0gfCBbYW55XTtcbnR5cGUgdEJhdGNoQ2IgPSAoc3VjY2VzczogYm9vbGVhbiwgZG9uZTogQXJyYXk8c3RyaW5nPiwgZmFpbGVkOiBBcnJheTxzdHJpbmc+KSA9PiB2b2lkO1xudHlwZSB0VHJ5TG9hZENiID0gKHNyYzogc3RyaW5nKSA9PiB2b2lkO1xuXG5sZXQgYmF0Y2hMb2FkID0gZnVuY3Rpb24gKGxpc3Q6IHRTY3JpcHRGaWxlW10sIHRoZW4/OiB0QmF0Y2hDYiwgZGlzYWJsZV9jYWNoZTogYm9vbGVhbiA9IGZhbHNlKTogdm9pZCB7XG5cdGxldCB0b3RhbCAgICAgICAgICAgICAgICAgPSBsaXN0Lmxlbmd0aDtcblx0bGV0IGZhaWxlZDogQXJyYXk8c3RyaW5nPiA9IFtdO1xuXHRsZXQgZG9uZTogQXJyYXk8c3RyaW5nPiAgID0gW107XG5cdGxldCBjb3VudGVyICAgICAgICAgICAgICAgPSAwO1xuXHRsZXQgdXBkYXRlQ291bnQgICAgICAgICAgID0gKHN1Y2Nlc3M6IGJvb2xlYW4sIHNyYzogc3RyaW5nKSA9PiB7XG5cdFx0Y291bnRlcisrO1xuXHRcdChzdWNjZXNzID8gZG9uZSA6IGZhaWxlZCkucHVzaChzcmMpO1xuXG5cdFx0aWYgKGNvdW50ZXIgPT09IHRvdGFsKSB7XG5cdFx0XHRVdGlscy5jYWxsYmFjayh0aGVuLCBbIWZhaWxlZC5sZW5ndGgsIGRvbmUsIGZhaWxlZF0pO1xuXHRcdH1cblx0fTtcblxuXHRmb3IgKGxldCBpID0gMDsgaSA8IHRvdGFsOyBpKyspIHtcblx0XHRsZXQgc3JjID0gbGlzdFtpXVswXTtcblx0XHRsZXQgZm4gID0gbGlzdFtpXVsxXTtcblxuXHRcdGlmICh0eXBlb2YgZm4gPT09IFwiZnVuY3Rpb25cIiAmJiAhZm4oKSkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0dHJ5TG9hZChzcmMsIChzcmMpID0+IHtcblx0XHRcdHVwZGF0ZUNvdW50KHRydWUsIHNyYyk7XG5cdFx0fSwgKHNyYykgPT4ge1xuXHRcdFx0dXBkYXRlQ291bnQoZmFsc2UsIHNyYyk7XG5cdFx0fSwgZGlzYWJsZV9jYWNoZSk7XG5cdH1cbn07XG5cbmxldCBub0NhY2hlID0gZnVuY3Rpb24gKHVybDogc3RyaW5nKTogc3RyaW5nIHtcblx0bGV0IF9yYW5kb20gPSBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIFN0cmluZyhNYXRoLnJhbmRvbSgpKS5zdWJzdHJpbmcoMik7XG5cdH07XG5cblx0dHJ5IHtcblx0XHRsZXQgdSA9IG5ldyBVUkwodXJsLCB3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cdFx0dS5zZWFyY2hQYXJhbXMuc2V0KFwibm9jYWNoZVwiLCBfcmFuZG9tKCkpO1xuXHRcdHVybCA9IHUuaHJlZjtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGNvbnNvbGUuZXJyb3IoXCJ1bmFibGUgdG8gZGlzYWJsZSBjYWNoaW5nIG9uIGZpbGVcIiwgdXJsLCBlKTtcblx0fVxuXG5cdHJldHVybiB1cmw7XG59O1xuXG5sZXQgdHJ5TG9hZCA9IGZ1bmN0aW9uIChzcmM6IHN0cmluZywgdGhlbj86IHRUcnlMb2FkQ2IsIGZhaWw/OiB0VHJ5TG9hZENiLCBkaXNhYmxlX2NhY2hlOiBib29sZWFuID0gZmFsc2UpIHtcblxuXHRpZiAoIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJzY3JpcHRbbG9hZC1wYXRoPSdcIiArIHNyYyArIFwiJ11cIikpIHtcblxuXHRcdGlmIChkaXNhYmxlX2NhY2hlKSB7XG5cdFx0XHRzcmMgPSBub0NhY2hlKHNyYyk7XG5cdFx0fVxuXG5cdFx0bGV0IHNjcmlwdCAgICAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO1xuXHRcdHNjcmlwdC5zcmMgICAgID0gc3JjO1xuXHRcdHNjcmlwdC5hc3luYyAgID0gZmFsc2U7XG5cdFx0c2NyaXB0LnR5cGUgICAgPSBcInRleHQvamF2YXNjcmlwdFwiO1xuXHRcdHNjcmlwdC5vbmxvYWQgID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0VXRpbHMuY2FsbGJhY2sodGhlbiwgW3NyY10pO1xuXHRcdH07XG5cdFx0c2NyaXB0Lm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRzY3JpcHQucGFyZW50Tm9kZSEucmVtb3ZlQ2hpbGQoc2NyaXB0KTtcblx0XHRcdFV0aWxzLmNhbGxiYWNrKGZhaWwsIFtzcmNdKTtcblx0XHR9O1xuXG5cdFx0c2NyaXB0LnNldEF0dHJpYnV0ZShcImxvYWQtcGF0aFwiLCBzcmMpO1xuXHRcdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcblx0XHQvL2llOSBoYWNrOiB0byBmb3JjZSBzY3JpcHQgZXhlY3V0aW9uIGluIG9yZGVyXG5cdFx0Ly9zaW5jZSBpZTkgZG9lcyBub3Qgc3Vwb3J0IHNjcmlwdC5hc3luYyAgPSBmYWxzZTtcblx0XHQvL2h0dHBzOi8vZ2l0aHViLmNvbS9oNWJwL2xhenl3ZWItcmVxdWVzdHMvaXNzdWVzLzQyI2lzc3VlLTEzODIxNDZcblx0XHRpZiAoaXNPbGRJRSkge1xuXHRcdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpKTtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0VXRpbHMuY2FsbGJhY2sodGhlbiwgW3NyY10pO1xuXHR9XG59O1xuXG5leHBvcnQgZGVmYXVsdCB7XG5cdG5vQ2FjaGUsXG5cdHRyeUxvYWQsXG5cdGJhdGNoTG9hZFxufTtcbiJdfQ==