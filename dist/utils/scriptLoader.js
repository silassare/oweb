import { callback, logger } from '.';
const document = window.document, isOldIE = /MSIE\s([5-9]\.0)/.test(navigator.userAgent);
if (typeof document !== 'object' ||
    typeof document.createElement !== 'function') {
    throw new Error('scriptLoader is for web use only');
}
export function noCache(url) {
    const _random = function () {
        return String(Math.random()).substring(2);
    };
    try {
        const u = new URL(url, window.location.href);
        u.searchParams.set('no_cache', _random());
        url = u.href;
    }
    catch (e) {
        logger.error('unable to disable caching on file', url, e);
    }
    return url;
}
export function loadScript(src, then, fail, disableCache = false) {
    if (!document.querySelector(`script[load-path='${src}']`)) {
        if (disableCache) {
            src = noCache(src);
        }
        const script = document.createElement('script');
        script.src = src;
        script.async = false;
        script.type = 'text/javascript';
        script.onload = function onLoad() {
            callback(then, [src]);
        };
        script.onerror = function onError() {
            script.parentNode && script.parentNode.removeChild(script);
            callback(fail, [src]);
        };
        script.setAttribute('load-path', src);
        document.body.appendChild(script);
        // ie9 hack: to force script execution in order
        // since ie9 does not support script.async  = false;
        // https://github.com/h5bp/lazyweb-requests/issues/42#issue-1382146
        if (isOldIE) {
            document.body.appendChild(document.createElement('script'));
        }
    }
    else {
        callback(then, [src]);
    }
}
export function loadScriptBatch(list, then, disableCache = false) {
    const total = list.length;
    const failed = [];
    const done = [];
    let counter = 0;
    const updateCount = (success, src) => {
        counter++;
        (success ? done : failed).push(src);
        if (counter === total) {
            callback(then, [!failed.length, done, failed]);
        }
    };
    for (let i = 0; i < total; i++) {
        const src = list[i][0];
        const fn = list[i][1];
        if (typeof fn === 'function' && !fn()) {
            continue;
        }
        loadScript(src, (_src) => {
            updateCount(true, _src);
        }, (_src) => {
            updateCount(false, _src);
        }, disableCache);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0TG9hZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL3NjcmlwdExvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsUUFBUSxFQUFFLE1BQU0sRUFBQyxNQUFNLEdBQUcsQ0FBQztBQUVuQyxNQUFNLFFBQVEsR0FBRyxNQUFNLENBQUMsUUFBUSxFQUM3QixPQUFPLEdBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUUzRCxJQUNDLE9BQU8sUUFBUSxLQUFLLFFBQVE7SUFDNUIsT0FBTyxRQUFRLENBQUMsYUFBYSxLQUFLLFVBQVUsRUFDM0M7SUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7Q0FDcEQ7QUFNRCxNQUFNLFVBQVUsT0FBTyxDQUFDLEdBQVc7SUFDbEMsTUFBTSxPQUFPLEdBQUc7UUFDZixPQUFPLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0MsQ0FBQyxDQUFDO0lBRUYsSUFBSTtRQUNILE1BQU0sQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdDLENBQUMsQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1FBQzFDLEdBQUcsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO0tBQ2I7SUFBQyxPQUFPLENBQUMsRUFBRTtRQUNYLE1BQU0sQ0FBQyxLQUFLLENBQUMsbUNBQW1DLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQzFEO0lBRUQsT0FBTyxHQUFHLENBQUM7QUFDWixDQUFDO0FBRUQsTUFBTSxVQUFVLFVBQVUsQ0FDekIsR0FBVyxFQUNYLElBQW9CLEVBQ3BCLElB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Q1IsV0FBVyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQztRQUMxQixDQUFDLEVBQ0QsWUFBWSxDQUNaLENBQUM7S0FDRjtBQUNGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge2NhbGxiYWNrLCBsb2dnZXJ9IGZyb20gJy4nO1xuXG5jb25zdCBkb2N1bWVudCA9IHdpbmRvdy5kb2N1bWVudCxcblx0ICBpc09sZElFICA9IC9NU0lFXFxzKFs1LTldXFwuMCkvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG5cbmlmIChcblx0dHlwZW9mIGRvY3VtZW50ICE9PSAnb2JqZWN0JyB8fFxuXHR0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gJ2Z1bmN0aW9uJ1xuKSB7XG5cdHRocm93IG5ldyBFcnJvcignc2NyaXB0TG9hZGVyIGlzIGZvciB3ZWIgdXNlIG9ubHknKTtcbn1cblxuZXhwb3J0IHR5cGUgT1NjcmlwdEZpbGUgPSBbc3RyaW5nLCAoKSA9PiBib29sZWFuXSB8IFtzdHJpbmddO1xuZXhwb3J0IHR5cGUgT0JhdGNoQ2IgPSAoc3VjY2VzczogYm9vbGVhbiwgZG9uZTogc3RyaW5nW10sIGZhaWxlZDogc3RyaW5nW10pID0+IHZvaWQ7XG5leHBvcnQgdHlwZSBPU2NyaXB0TG9hZENiID0gKHNyYzogc3RyaW5nKSA9PiB2b2lkO1xuXG5leHBvcnQgZnVuY3Rpb24gbm9DYWNoZSh1cmw6IHN0cmluZyk6IHN0cmluZyB7XG5cdGNvbnN0IF9yYW5kb20gPSBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIFN0cmluZyhNYXRoLnJhbmRvbSgpKS5zdWJzdHJpbmcoMik7XG5cdH07XG5cblx0dHJ5IHtcblx0XHRjb25zdCB1ID0gbmV3IFVSTCh1cmwsIHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblx0XHR1LnNlYXJjaFBhcmFtcy5zZXQoJ25vX2NhY2hlJywgX3JhbmRvbSgpKTtcblx0XHR1cmwgPSB1LmhyZWY7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRsb2dnZXIuZXJyb3IoJ3VuYWJsZSB0byBkaXNhYmxlIGNhY2hpbmcgb24gZmlsZScsIHVybCwgZSk7XG5cdH1cblxuXHRyZXR1cm4gdXJsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbG9hZFNjcmlwdChcblx0c3JjOiBzdHJpbmcsXG5cdHRoZW4/OiBPU2NyaXB0TG9hZENiLFxuXHRmYWlsPzogT1NjcmlwdExvYWRDYixcblx0ZGlzYWJsZUNhY2hlID0gZmFsc2Vcbik6IHZvaWQge1xuXHRpZiAoIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYHNjcmlwdFtsb2FkLXBhdGg9JyR7c3JjfSddYCkpIHtcblx0XHRpZiAoZGlzYWJsZUNhY2hlKSB7XG5cdFx0XHRzcmMgPSBub0NhY2hlKHNyYyk7XG5cdFx0fVxuXG5cdFx0Y29uc3Qgc2NyaXB0ICAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcblx0XHRzY3JpcHQuc3JjICAgICA9IHNyYztcblx0XHRzY3JpcHQuYXN5bmMgICA9IGZhbHNlO1xuXHRcdHNjcmlwdC50eXBlICAgID0gJ3RleHQvamF2YXNjcmlwdCc7XG5cdFx0c2NyaXB0Lm9ubG9hZCAgPSBmdW5jdGlvbiBvbkxvYWQoKSB7XG5cdFx0XHRjYWxsYmFjayh0aGVuLCBbc3JjXSk7XG5cdFx0fTtcblx0XHRzY3JpcHQub25lcnJvciA9IGZ1bmN0aW9uIG9uRXJyb3IoKSB7XG5cdFx0XHRzY3JpcHQucGFyZW50Tm9kZSAmJiBzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuXHRcdFx0Y2FsbGJhY2soZmFpbCwgW3NyY10pO1xuXHRcdH07XG5cblx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKCdsb2FkLXBhdGgnLCBzcmMpO1xuXHRcdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcblx0XHQvLyBpZTkgaGFjazogdG8gZm9yY2Ugc2NyaXB0IGV4ZWN1dGlvbiBpbiBvcmRlclxuXHRcdC8vIHNpbmNlIGllOSBkb2VzIG5vdCBzdXBwb3J0IHNjcmlwdC5hc3luYyAgPSBmYWxzZTtcblx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vaDVicC9sYXp5d2ViLXJlcXVlc3RzL2lzc3Vlcy80MiNpc3N1ZS0xMzgyMTQ2XG5cdFx0aWYgKGlzT2xkSUUpIHtcblx0XHRcdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRjYWxsYmFjayh0aGVuLCBbc3JjXSk7XG5cdH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRTY3JpcHRCYXRjaChcblx0bGlzdDogT1NjcmlwdEZpbGVbXSxcblx0dGhlbj86IE9CYXRjaENiLFxuXHRkaXNhYmxlQ2FjaGUgPSBmYWxzZVxuKTogdm9pZCB7XG5cdGNvbnN0IHRvdGFsICAgICAgICAgICAgPSBsaXN0Lmxlbmd0aDtcblx0Y29uc3QgZmFpbGVkOiBzdHJpbmdbXSA9IFtdO1xuXHRjb25zdCBkb25lOiBzdHJpbmdbXSAgID0gW107XG5cdGxldCBjb3VudGVyICAgICAgICAgICAgPSAwO1xuXHRjb25zdCB1cGRhdGVDb3VudCAgICAgID0gKHN1Y2Nlc3M6IGJvb2xlYW4sIHNyYzogc3RyaW5nKSA9PiB7XG5cdFx0Y291bnRlcisrO1xuXHRcdChzdWNjZXNzID8gZG9uZSA6IGZhaWxlZCkucHVzaChzcmMpO1xuXG5cdFx0aWYgKGNvdW50ZXIgPT09IHRvdGFsKSB7XG5cdFx0XHRjYWxsYmFjayh0aGVuLCBbIWZhaWxlZC5sZW5ndGgsIGRvbmUsIGZhaWxlZF0pO1xuXHRcdH1cblx0fTtcblxuXHRmb3IgKGxldCBpID0gMDsgaSA8IHRvdGFsOyBpKyspIHtcblx0XHRjb25zdCBzcmMgPSBsaXN0W2ldWzBdO1xuXHRcdGNvbnN0IGZuICA9IGxpc3RbaV1bMV07XG5cblx0XHRpZiAodHlwZW9mIGZuID09PSAnZnVuY3Rpb24nICYmICFmbigpKSB7XG5cdFx0XHRjb250aW51ZTtcblx0XHR9XG5cblx0XHRsb2FkU2NyaXB0KFxuXHRcdFx0c3JjLFxuXHRcdFx0KF9zcmMpID0+IHtcblx0XHRcdFx0dXBkYXRlQ291bnQodHJ1ZSwgX3NyYyk7XG5cdFx0XHR9LFxuXHRcdFx0KF9zcmMpID0+IHtcblx0XHRcdFx0dXBkYXRlQ291bnQoZmFsc2UsIF9zcmMpO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVDYWNoZVxuXHRcdCk7XG5cdH1cbn1cbiJdfQ==