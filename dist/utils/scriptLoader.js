import { callback } from './Utils';
const document = window.document, isOldIE = /MSIE\s([5-9]\.0)/.test(navigator.userAgent);
if (typeof document !== 'object' ||
    typeof document.createElement !== 'function') {
    throw new Error('scriptLoader is for web use only');
}
const batchLoad = function (list, then, disableCache = false) {
    const total = list.length;
    const failed = [];
    const done = [];
    let counter = 0;
    const updateCount = (success, src) => {
        counter++;
        (success ? done : failed).push(src);
        if (counter === total) {
            callback(then, [!failed.length, done, failed]);
        }
    };
    for (let i = 0; i < total; i++) {
        const src = list[i][0];
        const fn = list[i][1];
        if (typeof fn === 'function' && !fn()) {
            continue;
        }
        tryLoad(src, (_src) => {
            updateCount(true, _src);
        }, (_src) => {
            updateCount(false, _src);
        }, disableCache);
    }
};
const noCache = function (url) {
    const _random = function () {
        return String(Math.random()).substring(2);
    };
    try {
        const u = new URL(url, window.location.href);
        u.searchParams.set('no_cache', _random());
        url = u.href;
    }
    catch (e) {
        console.error('unable to disable caching on file', url, e);
    }
    return url;
};
const tryLoad = function (src, then, fail, disableCache = false) {
    if (!document.querySelector(`script[load-path='${src}']`)) {
        if (disableCache) {
            src = noCache(src);
        }
        const script = document.createElement('script');
        script.src = src;
        script.async = false;
        script.type = 'text/javascript';
        script.onload = function () {
            callback(then, [src]);
        };
        script.onerror = function () {
            script.parentNode.removeChild(script);
            callback(fail, [src]);
        };
        script.setAttribute('load-path', src);
        document.body.appendChild(script);
        // ie9 hack: to force script execution in order
        // since ie9 does not support script.async  = false;
        // https://github.com/h5bp/lazyweb-requests/issues/42#issue-1382146
        if (isOldIE) {
            document.body.appendChild(document.createElement('script'));
        }
    }
    else {
        callback(then, [src]);
    }
};
export default {
    noCache,
    tryLoad,
    batchLoad,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2NyaXB0TG9hZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3V0aWxzL3NjcmlwdExvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRW5DLE1BQU0sUUFBUSxHQUFHLE1BQU0sQ0FBQyxRQUFRLEVBQy9CLE9BQU8sR0FBRyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBRXhELElBQ0MsT0FBTyxRQUFRLEtBQUssUUFBUTtJQUM1QixPQUFPLFFBQVEsQ0FBQyxhQUFhLEtBQUssVUFBVSxFQUMzQztJQUNELE1BQU0sSUFBSSxLQUFLLENBQUMsa0NBQWtDLENBQUMsQ0FBQztDQUNwRDtBQU1ELE1BQU0sU0FBUyxHQUFHLFVBQ2pCLElBQW1CLEVBQ25CLElBQWUsRUFDZixlQUF3QixLQUFLO0lBRTdCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDMUIsTUFBTSxNQUFNLEdBQWEsRUFBRSxDQUFDO0lBQzVCLE1BQU0sSUFBSSxHQUFhLEVBQUUsQ0FBQztJQUMxQixJQUFJLE9BQU8sR0FBRyxDQUFDLENBQUM7SUFDaEIsTUFBTSxXQUFXLEdBQUcsQ0FBQyxPQUFnQixFQUFFLEdBQVcsRUFBRSxFQUFFO1FBQ3JELE9BQU8sRUFBRSxDQUFDO1FBQ1YsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXBDLElBQUksT0FBTyxLQUFLLEtBQUssRUFBRTtZQUN0QixRQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQy9DO0lBQ0YsQ0FBQyxDQUFDO0lBRUYsS0FBSyxJQUFJLENBQUMsR0FB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QUcsQ0FBQyxDQUFDLENBQUM7S0FDdEI7QUFDRixDQUFDLENBQUM7QUFFRixlQUFlO0lBQ2QsT0FBTztJQUNQLE9BQU87SUFDUCxTQUFTO0NBQ1QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNhbGxiYWNrIH0gZnJvbSAnLi9VdGlscyc7XG5cbmNvbnN0IGRvY3VtZW50ID0gd2luZG93LmRvY3VtZW50LFxuXHRpc09sZElFID0gL01TSUVcXHMoWzUtOV1cXC4wKS8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuaWYgKFxuXHR0eXBlb2YgZG9jdW1lbnQgIT09ICdvYmplY3QnIHx8XG5cdHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50ICE9PSAnZnVuY3Rpb24nXG4pIHtcblx0dGhyb3cgbmV3IEVycm9yKCdzY3JpcHRMb2FkZXIgaXMgZm9yIHdlYiB1c2Ugb25seScpO1xufVxuXG5leHBvcnQgdHlwZSB0U2NyaXB0RmlsZSA9IFthbnksICgpID0+IGJvb2xlYW5dIHwgW2FueV07XG50eXBlIHRCYXRjaENiID0gKHN1Y2Nlc3M6IGJvb2xlYW4sIGRvbmU6IHN0cmluZ1tdLCBmYWlsZWQ6IHN0cmluZ1tdKSA9PiB2b2lkO1xudHlwZSB0VHJ5TG9hZENiID0gKHNyYzogc3RyaW5nKSA9PiB2b2lkO1xuXG5jb25zdCBiYXRjaExvYWQgPSBmdW5jdGlvbiAoXG5cdGxpc3Q6IHRTY3JpcHRGaWxlW10sXG5cdHRoZW4/OiB0QmF0Y2hDYixcblx0ZGlzYWJsZUNhY2hlOiBib29sZWFuID0gZmFsc2UsXG4pOiB2b2lkIHtcblx0Y29uc3QgdG90YWwgPSBsaXN0Lmxlbmd0aDtcblx0Y29uc3QgZmFpbGVkOiBzdHJpbmdbXSA9IFtdO1xuXHRjb25zdCBkb25lOiBzdHJpbmdbXSA9IFtdO1xuXHRsZXQgY291bnRlciA9IDA7XG5cdGNvbnN0IHVwZGF0ZUNvdW50ID0gKHN1Y2Nlc3M6IGJvb2xlYW4sIHNyYzogc3RyaW5nKSA9PiB7XG5cdFx0Y291bnRlcisrO1xuXHRcdChzdWNjZXNzID8gZG9uZSA6IGZhaWxlZCkucHVzaChzcmMpO1xuXG5cdFx0aWYgKGNvdW50ZXIgPT09IHRvdGFsKSB7XG5cdFx0XHRjYWxsYmFjayh0aGVuLCBbIWZhaWxlZC5sZW5ndGgsIGRvbmUsIGZhaWxlZF0pO1xuXHRcdH1cblx0fTtcblxuXHRmb3IgKGxldCBpID0gMDsgaSA8IHRvdGFsOyBpKyspIHtcblx0XHRjb25zdCBzcmMgPSBsaXN0W2ldWzBdO1xuXHRcdGNvbnN0IGZuID0gbGlzdFtpXVsxXTtcblxuXHRcdGlmICh0eXBlb2YgZm4gPT09ICdmdW5jdGlvbicgJiYgIWZuKCkpIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdHRyeUxvYWQoXG5cdFx0XHRzcmMsXG5cdFx0XHQoX3NyYykgPT4ge1xuXHRcdFx0XHR1cGRhdGVDb3VudCh0cnVlLCBfc3JjKTtcblx0XHRcdH0sXG5cdFx0XHQoX3NyYykgPT4ge1xuXHRcdFx0XHR1cGRhdGVDb3VudChmYWxzZSwgX3NyYyk7XG5cdFx0XHR9LFxuXHRcdFx0ZGlzYWJsZUNhY2hlLFxuXHRcdCk7XG5cdH1cbn07XG5cbmNvbnN0IG5vQ2FjaGUgPSBmdW5jdGlvbiAodXJsOiBzdHJpbmcpOiBzdHJpbmcge1xuXHRjb25zdCBfcmFuZG9tID0gZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBTdHJpbmcoTWF0aC5yYW5kb20oKSkuc3Vic3RyaW5nKDIpO1xuXHR9O1xuXG5cdHRyeSB7XG5cdFx0Y29uc3QgdSA9IG5ldyBVUkwodXJsLCB3aW5kb3cubG9jYXRpb24uaHJlZik7XG5cdFx0dS5zZWFyY2hQYXJhbXMuc2V0KCdub19jYWNoZScsIF9yYW5kb20oKSk7XG5cdFx0dXJsID0gdS5ocmVmO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0Y29uc29sZS5lcnJvcigndW5hYmxlIHRvIGRpc2FibGUgY2FjaGluZyBvbiBmaWxlJywgdXJsLCBlKTtcblx0fVxuXG5cdHJldHVybiB1cmw7XG59O1xuXG5jb25zdCB0cnlMb2FkID0gZnVuY3Rpb24gKFxuXHRzcmM6IHN0cmluZyxcblx0dGhlbj86IHRUcnlMb2FkQ2IsXG5cdGZhaWw/OiB0VHJ5TG9hZENiLFxuXHRkaXNhYmxlQ2FjaGU6IGJvb2xlYW4gPSBmYWxzZSxcbikge1xuXHRpZiAoIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYHNjcmlwdFtsb2FkLXBhdGg9JyR7c3JjfSddYCkpIHtcblx0XHRpZiAoZGlzYWJsZUNhY2hlKSB7XG5cdFx0XHRzcmMgPSBub0NhY2hlKHNyYyk7XG5cdFx0fVxuXG5cdFx0Y29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG5cdFx0c2NyaXB0LnNyYyA9IHNyYztcblx0XHRzY3JpcHQuYXN5bmMgPSBmYWxzZTtcblx0XHRzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xuXHRcdHNjcmlwdC5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG5cdFx0XHRjYWxsYmFjayh0aGVuLCBbc3JjXSk7XG5cdFx0fTtcblx0XHRzY3JpcHQub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdHNjcmlwdC5wYXJlbnROb2RlIS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuXHRcdFx0Y2FsbGJhY2soZmFpbCwgW3NyY10pO1xuXHRcdH07XG5cblx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKCdsb2FkLXBhdGgnLCBzcmMpO1xuXHRcdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcblx0XHQvLyBpZTkgaGFjazogdG8gZm9yY2Ugc2NyaXB0IGV4ZWN1dGlvbiBpbiBvcmRlclxuXHRcdC8vIHNpbmNlIGllOSBkb2VzIG5vdCBzdXBwb3J0IHNjcmlwdC5hc3luYyAgPSBmYWxzZTtcblx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vaDVicC9sYXp5d2ViLXJlcXVlc3RzL2lzc3Vlcy80MiNpc3N1ZS0xMzgyMTQ2XG5cdFx0aWYgKGlzT2xkSUUpIHtcblx0XHRcdGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0JykpO1xuXHRcdH1cblx0fSBlbHNlIHtcblx0XHRjYWxsYmFjayh0aGVuLCBbc3JjXSk7XG5cdH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcblx0bm9DYWNoZSxcblx0dHJ5TG9hZCxcblx0YmF0Y2hMb2FkLFxufTtcbiJdfQ==