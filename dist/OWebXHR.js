import OWebNet from './OWebNet';
import { buildURL, forEach, isPlainObject } from './utils';
const setOrIgnoreIfExists = function setOrIgnoreIfExists(target, key, value, caseSensitive = false) {
    if (!target[key] && (!caseSensitive || !target[key.toUpperCase()])) {
        target[key] = value;
    }
};
export default class OWebXHR extends OWebNet {
    _abort;
    _sent = false;
    /**
     * OWebXHR constructor.
     *
     * @param url
     * @param options
     */
    constructor(url, options) {
        super(url, {
            method: 'get',
            timeout: 0,
            withCredentials: false,
            responseType: 'json',
            headers: {},
            isSuccessStatus: (status) => status >= 200 && status < 300,
            isGoodNews: () => {
                return true;
            },
            errorResponseToDialog: () => {
                return { text: 'OW_ERROR_REQUEST_FAILED' };
            },
            ...options,
        });
    }
    /**
     * @inheritDoc
     */
    isSent() {
        return this._sent;
    }
    /**
     * @inheritDoc
     */
    send() {
        this.assertNotSent('[OWebXHR] request is already sent.');
        let x = this, xhr = new XMLHttpRequest();
        const opt = x.options, always = () => {
            x.trigger(OWebNet.EVT_FINISH);
            xhr = x = null;
        }, onerror = (err) => {
            x.trigger(OWebNet.EVT_ERROR, [err]);
            x.trigger(OWebNet.EVT_FAIL, [err]);
            always();
        }, body = this.requestBody(opt.body);
        xhr.timeout = opt.timeout;
        setOrIgnoreIfExists(opt.headers, 'Accept', 'application/json, text/plain, */*');
        xhr.withCredentials = opt.withCredentials;
        xhr.onreadystatechange = function onReadyStateChange() {
            if (!xhr || xhr.readyState !== 4) {
                return;
            }
            // The request errored out and we didn't get a response, this will be
            // handled by onerror instead
            // With one exception: request that using file: protocol, most browsers
            // will return status as 0 even though it's a successful request
            if (xhr.status === 0 &&
                !(xhr.responseURL && xhr.responseURL.indexOf('file:') === 0)) {
                return;
            }
            const responseRaw = xhr[(xhr.responseType || 'text') === 'text'
                ? 'responseText'
                : 'response'];
            let json = null;
            if (typeof responseRaw === 'string') {
                try {
                    json = JSON.parse(responseRaw);
                    // eslint-disable-next-line no-empty
                }
                catch (e) { }
            }
            const response = {
                isSuccessStatus: opt.isSuccessStatus(xhr.status),
                isGoodNews: opt.isGoodNews(json),
                raw: responseRaw,
                json,
                status: xhr.status,
                statusText: xhr.statusText,
            };
            x.trigger(OWebNet.EVT_RESPONSE, [response]);
            if (response.isSuccessStatus) {
                x.trigger(OWebNet.EVT_HTTP_SUCCESS, [response]);
                if (response.isGoodNews) {
                    x.trigger(OWebNet.EVT_GOOD_NEWS, [response]);
                }
                else {
                    x.trigger(OWebNet.EVT_BAD_NEWS, [response]);
                    const err = {
                        type: 'error',
                        errType: 'bad_news',
                        ...x.options.errorResponseToDialog(response),
                    };
                    x.trigger(OWebNet.EVT_FAIL, [err]);
                }
            }
            else {
                x.trigger(OWebNet.EVT_HTTP_ERROR, [response]);
                const err = {
                    type: 'error',
                    errType: 'http',
                    ...x.options.errorResponseToDialog(response),
                };
                x.trigger(OWebNet.EVT_FAIL, [err]);
            }
            always();
        };
        xhr.addEventListener('progress', function onDownloadProgress(event) {
            // report download progress
            x.trigger(OWebNet.EVT_DOWNLOAD_PROGRESS, [event]);
        });
        xhr.upload.addEventListener('progress', function onUploadProgress(event) {
            // report upload progress
            x.trigger(OWebNet.EVT_UPLOAD_PROGRESS, [event]);
        });
        xhr.onabort = function onAbort(event) {
            onerror({
                type: 'error',
                errType: 'abort',
                text: 'OW_ERROR_REQUEST_ABORTED',
                data: { event },
            });
        };
        xhr.ontimeout = function onTimeout(event) {
            onerror({
                type: 'error',
                errType: 'timeout',
                text: 'OW_ERROR_REQUEST_TIMED_OUT',
                data: { event },
            });
        };
        xhr.onerror = function onError(event) {
            // handle non-HTTP error (e.g. network down)
            onerror({
                type: 'error',
                errType: 'network',
                text: 'OZ_ERROR_NETWORK',
                data: { event },
            });
        };
        this._abort = () => {
            xhr && xhr.abort();
        };
        const url = this.options.params ? buildURL(this.url, this.options.params) : this.url;
        xhr.open(opt.method.toUpperCase(), url, true);
        forEach(opt.headers, function requestHeaderIterator(value, header) {
            xhr.setRequestHeader(header, value);
        });
        return new Promise(function xhrPromiseExecutor(resolve, reject) {
            x.onGoodNews((response) => resolve(response))
                .onFail((err) => reject(err));
            x._sent = true;
            xhr.send(body);
        });
    }
    /**
     * @inheritDoc
     */
    abort() {
        this._abort && this._abort();
        return this;
    }
    /**
     * Builds the request body.
     *
     * @param body
     * @private
     */
    requestBody(body) {
        if (body === null || typeof body === 'undefined') {
            return null;
        }
        if (body instanceof URLSearchParams) {
            setOrIgnoreIfExists(this.options.headers, 'Content-Type', 'application/x-www-form-urlencoded;charset=utf-8');
            return body.toString();
        }
        if (isPlainObject(body)) {
            setOrIgnoreIfExists(this.options.headers, 'Content-Type', 'application/json;charset=utf-8');
            return JSON.stringify(body);
        }
        return body;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYlhIUi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9PV2ViWEhSLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sT0FLTixNQUFNLFdBQVcsQ0FBQztBQUNuQixPQUFPLEVBQUMsUUFBUSxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUMsTUFBTSxTQUFTLENBQUM7QUFFekQsTUFBTSxtQkFBbUIsR0FBRyxTQUFTLG1CQUFtQixDQUN2RCxNQUFXLEVBQ1gsR0FBVyxFQUNYLEtBQVUsRUFDVixhQUFhLEdBQUcsS0FBSztJQUVyQixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxhQUFhLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsRUFBRTtRQUNuRSxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO0tBQ3BCO0FBQ0YsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE9BQU8sT0FBTyxPQUFXLFNBQVEsT0FBVTtJQUN6QyxNQUFNLENBQWM7SUFDcEIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUV0Qjs7Ozs7T0FLRztJQUNILFlBQVksR0FBVyxFQUFFLE9BQXVDO1FBQy9ELEtBQUssQ0FBQyxHQUFHLEVBQUU7WUFDVixNQUFNLEVBQWlCLEtBQUs7WUFDNUIsT0FBTyxFQUFnQixDQUFDO1lBQ3hCLGVBQWUsRUFBUSxLQUFLO1lBQzVCLFlBQVksRUFBVyxNQUFNO1lBQzdCLE9BQU8sRUFBZ0IsRUFBRTtZQUN6QixlQUFlLEVBQVEsQ0FBQyxNQUFjLEVBQUUsRUFBRSxDQUFDLE1BQU0sSUFBSSxHQUFHLElBQUksTUFBTSxHQUFHLEdBQUc7WUFDeEUsVUFBVSxFQUFhLEdBQUcsRUFBRTtnQkFDM0IsT0FBTyxJQUFJLENBQUM7WUFDYixDQUFDO1lBQ0QscUJBQXFCLEVBQUUsR0FBRyxFQUFFO2dCQUMzQixPQUFPLEVBQUMsSUFBSSxFQUFFLHlC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QUFFO1lBQ2pELE9BQU8sSUFBSSxDQUFDO1NBQ1o7UUFFRCxJQUFJLElBQUksWUFBWSxlQUFlLEVBQUU7WUFDcEMsbUJBQW1CLENBQ2xCLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUNwQixjQUFjLEVBQ2QsaURBQWlELENBQ2pELENBQUM7WUFFRixPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztTQUN2QjtRQUVELElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3hCLG1CQUFtQixDQUNsQixJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFDcEIsY0FBYyxFQUNkLGdDQUFnQyxDQUNoQyxDQUFDO1lBRUYsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzVCO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0NBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgT1dlYk5ldCwge1xuXHRPTmV0RXJyb3IsXG5cdE9OZXRSZXF1ZXN0T3B0aW9ucyxcblx0T05ldFJlc3BvbnNlLFxuXHRPTmV0UmVxdWVzdEJvZHksXG59IGZyb20gJy4vT1dlYk5ldCc7XG5pbXBvcnQge2J1aWxkVVJMLCBmb3JFYWNoLCBpc1BsYWluT2JqZWN0fSBmcm9tICcuL3V0aWxzJztcblxuY29uc3Qgc2V0T3JJZ25vcmVJZkV4aXN0cyA9IGZ1bmN0aW9uIHNldE9ySWdub3JlSWZFeGlzdHMoXG5cdHRhcmdldDogYW55LFxuXHRrZXk6IHN0cmluZyxcblx0dmFsdWU6IGFueSxcblx0Y2FzZVNlbnNpdGl2ZSA9IGZhbHNlXG4pIHtcblx0aWYgKCF0YXJnZXRba2V5XSAmJiAoIWNhc2VTZW5zaXRpdmUgfHwgIXRhcmdldFtrZXkudG9VcHBlckNhc2UoKV0pKSB7XG5cdFx0dGFyZ2V0W2tleV0gPSB2YWx1ZTtcblx0fVxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT1dlYlhIUjxUPiBleHRlbmRzIE9XZWJOZXQ8VD4ge1xuXHRwcml2YXRlIF9hYm9ydD86ICgpID0+IHZvaWQ7XG5cdHByaXZhdGUgX3NlbnQgPSBmYWxzZTtcblxuXHQvKipcblx0ICogT1dlYlhIUiBjb25zdHJ1Y3Rvci5cblx0ICpcblx0ICogQHBhcmFtIHVybFxuXHQgKiBAcGFyYW0gb3B0aW9uc1xuXHQgKi9cblx0Y29uc3RydWN0b3IodXJsOiBzdHJpbmcsIG9wdGlvbnM6IFBhcnRpYWw8T05ldFJlcXVlc3RPcHRpb25zPFQ+Pikge1xuXHRcdHN1cGVyKHVybCwge1xuXHRcdFx0bWV0aG9kICAgICAgICAgICAgICAgOiAnZ2V0Jyxcblx0XHRcdHRpbWVvdXQgICAgICAgICAgICAgIDogMCxcblx0XHRcdHdpdGhDcmVkZW50aWFscyAgICAgIDogZmFsc2UsXG5cdFx0XHRyZXNwb25zZVR5cGUgICAgICAgICA6ICdqc29uJyxcblx0XHRcdGhlYWRlcnMgICAgICAgICAgICAgIDoge30sXG5cdFx0XHRpc1N1Y2Nlc3NTdGF0dXMgICAgICA6IChzdGF0dXM6IG51bWJlcikgPT4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAsXG5cdFx0XHRpc0dvb2ROZXdzICAgICAgICAgICA6ICgpID0+IHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9LFxuXHRcdFx0ZXJyb3JSZXNwb25zZVRvRGlhbG9nOiAoKSA9PiB7XG5cdFx0XHRcdHJldHVybiB7dGV4dDogJ09XX0VSUk9SX1JFUVVFU1RfRkFJTEVEJ307XG5cdFx0XHR9LFxuXHRcdFx0Li4ub3B0aW9ucyxcblx0XHR9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0aXNTZW50KCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiB0aGlzLl9zZW50O1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRzZW5kKCk6IFByb21pc2U8T05ldFJlc3BvbnNlPFQ+PiB7XG5cdFx0dGhpcy5hc3NlcnROb3RTZW50KCdbT1dlYlhIUl0gcmVxdWVzdCBpcyBhbHJlYWR5IHNlbnQuJyk7XG5cblx0XHRsZXQgeCAgICAgICAgID0gdGhpcyxcblx0XHRcdHhociAgICAgICA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXHRcdGNvbnN0IG9wdCAgICAgPSB4Lm9wdGlvbnMsXG5cdFx0XHQgIGFsd2F5cyAgPSAoKSA9PiB7XG5cdFx0XHRcdCAgeC50cmlnZ2VyKE9XZWJOZXQuRVZUX0ZJTklTSCk7XG5cdFx0XHRcdCAgeGhyID0geCA9IG51bGwgYXMgYW55O1xuXHRcdFx0ICB9LFxuXHRcdFx0ICBvbmVycm9yID0gKGVycjogT05ldEVycm9yKSA9PiB7XG5cdFx0XHRcdCAgeC50cmlnZ2VyKE9XZWJOZXQuRVZUX0VSUk9SLCBbZXJyXSk7XG5cdFx0XHRcdCAgeC50cmlnZ2VyKE9XZWJOZXQuRVZUX0ZBSUwsIFtlcnJdKTtcblx0XHRcdFx0ICBhbHdheXMoKTtcblx0XHRcdCAgfSxcblx0XHRcdCAgYm9keSAgICA9IHRoaXMucmVxdWVzdEJvZHkob3B0LmJvZHkpO1xuXG5cdFx0eGhyLnRpbWVvdXQgPSBvcHQudGltZW91dDtcblxuXHRcdHNldE9ySWdub3JlSWZFeGlzdHMoXG5cdFx0XHRvcHQuaGVhZGVycyxcblx0XHRcdCdBY2NlcHQnLFxuXHRcdFx0J2FwcGxpY2F0aW9uL2pzb24sIHRleHQvcGxhaW4sICovKidcblx0XHQpO1xuXG5cdFx0eGhyLndpdGhDcmVkZW50aWFscyA9IG9wdC53aXRoQ3JlZGVudGlhbHM7XG5cblx0XHR4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gb25SZWFkeVN0YXRlQ2hhbmdlKCkge1xuXHRcdFx0aWYgKCF4aHIgfHwgeGhyLnJlYWR5U3RhdGUgIT09IDQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcblx0XHRcdC8vIGhhbmRsZWQgYnkgb25lcnJvciBpbnN0ZWFkXG5cdFx0XHQvLyBXaXRoIG9uZSBleGNlcHRpb246IHJlcXVlc3QgdGhhdCB1c2luZyBmaWxlOiBwcm90b2NvbCwgbW9zdCBicm93c2Vyc1xuXHRcdFx0Ly8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuXHRcdFx0aWYgKFxuXHRcdFx0XHR4aHIuc3RhdHVzID09PSAwICYmXG5cdFx0XHRcdCEoeGhyLnJlc3BvbnNlVVJMICYmIHhoci5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKVxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgcmVzcG9uc2VSYXcgPVxuXHRcdFx0XHRcdCAgeGhyW1xuXHRcdFx0XHRcdFx0ICAoeGhyLnJlc3BvbnNlVHlwZSB8fCAndGV4dCcpID09PSAndGV4dCdcblx0XHRcdFx0XHRcdCAgPyAncmVzcG9uc2VUZXh0J1xuXHRcdFx0XHRcdFx0ICA6ICdyZXNwb25zZSdcblx0XHRcdFx0XHRcdCAgXTtcblxuXHRcdFx0bGV0IGpzb24gPSBudWxsIGFzIGFueTtcblxuXHRcdFx0aWYgKHR5cGVvZiByZXNwb25zZVJhdyA9PT0gJ3N0cmluZycpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRqc29uID0gSlNPTi5wYXJzZShyZXNwb25zZVJhdyk7XG5cdFx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG5cdFx0XHRcdH0gY2F0Y2ggKGUpIHt9XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHJlc3BvbnNlOiBPTmV0UmVzcG9uc2U8VD4gPSB7XG5cdFx0XHRcdGlzU3VjY2Vzc1N0YXR1czogb3B0LmlzU3VjY2Vzc1N0YXR1cyh4aHIuc3RhdHVzKSxcblx0XHRcdFx0aXNHb29kTmV3cyAgICAgOiBvcHQuaXNHb29kTmV3cyhqc29uKSxcblx0XHRcdFx0cmF3ICAgICAgICAgICAgOiByZXNwb25zZVJhdyxcblx0XHRcdFx0anNvbixcblx0XHRcdFx0c3RhdHVzICAgICAgICAgOiB4aHIuc3RhdHVzLFxuXHRcdFx0XHRzdGF0dXNUZXh0ICAgICA6IHhoci5zdGF0dXNUZXh0LFxuXHRcdFx0fTtcblxuXHRcdFx0eC50cmlnZ2VyKE9XZWJOZXQuRVZUX1JFU1BPTlNFLCBbcmVzcG9uc2VdKTtcblxuXHRcdFx0aWYgKHJlc3BvbnNlLmlzU3VjY2Vzc1N0YXR1cykge1xuXHRcdFx0XHR4LnRyaWdnZXIoT1dlYk5ldC5FVlRfSFRUUF9TVUNDRVNTLCBbcmVzcG9uc2VdKTtcblxuXHRcdFx0XHRpZiAocmVzcG9uc2UuaXNHb29kTmV3cykge1xuXHRcdFx0XHRcdHgudHJpZ2dlcihPV2ViTmV0LkVWVF9HT09EX05FV1MsIFtyZXNwb25zZV0pO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHgudHJpZ2dlcihPV2ViTmV0LkVWVF9CQURfTkVXUywgW3Jlc3BvbnNlXSk7XG5cdFx0XHRcdFx0Y29uc3QgZXJyOiBPTmV0RXJyb3IgPSB7XG5cdFx0XHRcdFx0XHR0eXBlOiAnZXJyb3InLFxuXHRcdFx0XHRcdFx0ZXJyVHlwZTogJ2JhZF9uZXdzJyxcblx0XHRcdFx0XHRcdC4uLiB4Lm9wdGlvbnMuZXJyb3JSZXNwb25zZVRvRGlhbG9nKHJlc3BvbnNlKSxcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdHgudHJpZ2dlcihPV2ViTmV0LkVWVF9GQUlMLCBbZXJyXSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHgudHJpZ2dlcihPV2ViTmV0LkVWVF9IVFRQX0VSUk9SLCBbcmVzcG9uc2VdKTtcblx0XHRcdFx0Y29uc3QgZXJyOiBPTmV0RXJyb3IgPSB7XG5cdFx0XHRcdFx0dHlwZTogJ2Vycm9yJyxcblx0XHRcdFx0XHRlcnJUeXBlOiAnaHR0cCcsXG5cdFx0XHRcdFx0Li4uIHgub3B0aW9ucy5lcnJvclJlc3BvbnNlVG9EaWFsb2cocmVzcG9uc2UpLFxuXHRcdFx0XHR9O1xuXHRcdFx0XHR4LnRyaWdnZXIoT1dlYk5ldC5FVlRfRkFJTCwgW2Vycl0pO1xuXHRcdFx0fVxuXG5cdFx0XHRhbHdheXMoKTtcblx0XHR9O1xuXG5cdFx0eGhyLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgZnVuY3Rpb24gb25Eb3dubG9hZFByb2dyZXNzKGV2ZW50KSB7XG5cdFx0XHQvLyByZXBvcnQgZG93bmxvYWQgcHJvZ3Jlc3Ncblx0XHRcdHgudHJpZ2dlcihPV2ViTmV0LkVWVF9ET1dOTE9BRF9QUk9HUkVTUywgW2V2ZW50XSk7XG5cdFx0fSk7XG5cblx0XHR4aHIudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgZnVuY3Rpb24gb25VcGxvYWRQcm9ncmVzcyhldmVudCkge1xuXHRcdFx0Ly8gcmVwb3J0IHVwbG9hZCBwcm9ncmVzc1xuXHRcdFx0eC50cmlnZ2VyKE9XZWJOZXQuRVZUX1VQTE9BRF9QUk9HUkVTUywgW2V2ZW50XSk7XG5cdFx0fSk7XG5cblx0XHR4aHIub25hYm9ydCA9IGZ1bmN0aW9uIG9uQWJvcnQoZXZlbnQpIHtcblx0XHRcdG9uZXJyb3Ioe1xuXHRcdFx0XHR0eXBlICAgOiAnZXJyb3InLFxuXHRcdFx0XHRlcnJUeXBlOiAnYWJvcnQnLFxuXHRcdFx0XHR0ZXh0ICAgOiAnT1dfRVJST1JfUkVRVUVTVF9BQk9SVEVEJyxcblx0XHRcdFx0ZGF0YSAgIDoge2V2ZW50fSxcblx0XHRcdH0pO1xuXHRcdH07XG5cblx0XHR4aHIub250aW1lb3V0ID0gZnVuY3Rpb24gb25UaW1lb3V0KGV2ZW50KSB7XG5cdFx0XHRvbmVycm9yKHtcblx0XHRcdFx0dHlwZSAgIDogJ2Vycm9yJyxcblx0XHRcdFx0ZXJyVHlwZTogJ3RpbWVvdXQnLFxuXHRcdFx0XHR0ZXh0ICAgOiAnT1dfRVJST1JfUkVRVUVTVF9USU1FRF9PVVQnLFxuXHRcdFx0XHRkYXRhICAgOiB7ZXZlbnR9LFxuXHRcdFx0fSk7XG5cdFx0fTtcblxuXHRcdHhoci5vbmVycm9yID0gZnVuY3Rpb24gb25FcnJvcihldmVudCkge1xuXHRcdFx0Ly8gaGFuZGxlIG5vbi1IVFRQIGVycm9yIChlLmcuIG5ldHdvcmsgZG93bilcblx0XHRcdG9uZXJyb3Ioe1xuXHRcdFx0XHR0eXBlICAgOiAnZXJyb3InLFxuXHRcdFx0XHRlcnJUeXBlOiAnbmV0d29yaycsXG5cdFx0XHRcdHRleHQgICA6ICdPWl9FUlJPUl9ORVRXT1JLJyxcblx0XHRcdFx0ZGF0YSAgIDoge2V2ZW50fSxcblx0XHRcdH0pO1xuXHRcdH07XG5cblx0XHR0aGlzLl9hYm9ydCA9ICgpID0+IHtcblx0XHRcdHhociAmJiB4aHIuYWJvcnQoKTtcblx0XHR9O1xuXG5cdFx0Y29uc3QgdXJsID0gdGhpcy5vcHRpb25zLnBhcmFtcyA/IGJ1aWxkVVJMKHRoaXMudXJsLCB0aGlzLm9wdGlvbnMucGFyYW1zKSA6IHRoaXMudXJsO1xuXG5cdFx0eGhyLm9wZW4ob3B0Lm1ldGhvZC50b1VwcGVyQ2FzZSgpLCB1cmwsIHRydWUpO1xuXG5cdFx0Zm9yRWFjaChvcHQuaGVhZGVycywgZnVuY3Rpb24gcmVxdWVzdEhlYWRlckl0ZXJhdG9yKHZhbHVlLCBoZWFkZXIpIHtcblx0XHRcdHhoci5zZXRSZXF1ZXN0SGVhZGVyKGhlYWRlciwgdmFsdWUpO1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlPE9OZXRSZXNwb25zZTxUPj4oZnVuY3Rpb24geGhyUHJvbWlzZUV4ZWN1dG9yKFxuXHRcdFx0cmVzb2x2ZTogKHJlc3BvbnNlOiBPTmV0UmVzcG9uc2U8VD4pID0+IHZvaWQsXG5cdFx0XHRyZWplY3Q6IChlcnJvcjogT05ldEVycm9yKSA9PiB2b2lkXG5cdFx0KSB7XG5cdFx0XHR4Lm9uR29vZE5ld3MoKHJlc3BvbnNlKSA9PiByZXNvbHZlKHJlc3BvbnNlKSlcblx0XHRcdCAub25GYWlsKChlcnIpID0+IHJlamVjdChlcnIpKTtcblxuXHRcdFx0eC5fc2VudCA9IHRydWU7XG5cdFx0XHR4aHIuc2VuZChib2R5KTtcblx0XHR9KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0YWJvcnQoKTogdGhpcyB7XG5cdFx0dGhpcy5fYWJvcnQgJiYgdGhpcy5fYWJvcnQoKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxuXG5cdC8qKlxuXHQgKiBCdWlsZHMgdGhlIHJlcXVlc3QgYm9keS5cblx0ICpcblx0ICogQHBhcmFtIGJvZHlcblx0ICogQHByaXZhdGVcblx0ICovXG5cdHByaXZhdGUgcmVxdWVzdEJvZHkoYm9keTogT05ldFJlcXVlc3RCb2R5KTogYW55IHtcblx0XHRpZiAoYm9keSA9PT0gbnVsbCB8fCB0eXBlb2YgYm9keSA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblxuXHRcdGlmIChib2R5IGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zKSB7XG5cdFx0XHRzZXRPcklnbm9yZUlmRXhpc3RzKFxuXHRcdFx0XHR0aGlzLm9wdGlvbnMuaGVhZGVycyxcblx0XHRcdFx0J0NvbnRlbnQtVHlwZScsXG5cdFx0XHRcdCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7Y2hhcnNldD11dGYtOCdcblx0XHRcdCk7XG5cblx0XHRcdHJldHVybiBib2R5LnRvU3RyaW5nKCk7XG5cdFx0fVxuXG5cdFx0aWYgKGlzUGxhaW5PYmplY3QoYm9keSkpIHtcblx0XHRcdHNldE9ySWdub3JlSWZFeGlzdHMoXG5cdFx0XHRcdHRoaXMub3B0aW9ucy5oZWFkZXJzLFxuXHRcdFx0XHQnQ29udGVudC1UeXBlJyxcblx0XHRcdFx0J2FwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtOCdcblx0XHRcdCk7XG5cblx0XHRcdHJldHVybiBKU09OLnN0cmluZ2lmeShib2R5KTtcblx0XHR9XG5cblx0XHRyZXR1cm4gYm9keTtcblx0fVxufVxuIl19