import OWebNet from './OWebNet';
import { buildURL, forEach, isPlainObject } from './utils';
const setOrIgnoreIfExists = function setOrIgnoreIfExists(target, key, value, caseSensitive = false) {
    if (!target[key] && (!caseSensitive || !target[key.toUpperCase()])) {
        target[key] = value;
    }
};
export default class OWebXHR extends OWebNet {
    _abort;
    _sent = false;
    constructor(url, options) {
        super(url, {
            method: 'get',
            timeout: 0,
            withCredentials: false,
            responseType: 'json',
            headers: {},
            isSuccessStatus: (status) => status >= 200 && status < 300,
            isGoodNews: () => {
                return true;
            },
            errorResponseToDialog: () => {
                return { text: 'OW_ERROR_REQUEST_FAILED' };
            },
            ...options,
        });
    }
    isSent() {
        return this._sent;
    }
    send() {
        this.assertNotSent('[OWebXHR] request is already sent.');
        let x = this, xhr = new XMLHttpRequest();
        const opt = x.options, always = () => {
            x.trigger(OWebNet.EVT_FINISH);
            xhr = x = null;
        }, onerror = (err) => {
            x.trigger(OWebNet.EVT_ERROR, [err]);
            x.trigger(OWebNet.EVT_FAIL, [err]);
            always();
        }, body = this.requestBody(opt.body);
        xhr.timeout = opt.timeout;
        setOrIgnoreIfExists(opt.headers, 'Accept', 'application/json, text/plain, */*');
        xhr.withCredentials = opt.withCredentials;
        xhr.onreadystatechange = function onReadyStateChange() {
            if (!xhr || xhr.readyState !== 4) {
                return;
            }
            if (xhr.status === 0 &&
                !(xhr.responseURL && xhr.responseURL.indexOf('file:') === 0)) {
                return;
            }
            const responseRaw = xhr[(xhr.responseType || 'text') === 'text' ? 'responseText' : 'response'];
            let json = null;
            if (typeof responseRaw === 'string') {
                try {
                    json = JSON.parse(responseRaw);
                }
                catch (e) { }
            }
            const response = {
                isSuccessStatus: opt.isSuccessStatus(xhr.status),
                isGoodNews: opt.isGoodNews(json),
                raw: responseRaw,
                json,
                status: xhr.status,
                statusText: xhr.statusText,
            };
            x.trigger(OWebNet.EVT_RESPONSE, [response]);
            if (response.isSuccessStatus) {
                x.trigger(OWebNet.EVT_HTTP_SUCCESS, [response]);
                if (response.isGoodNews) {
                    x.trigger(OWebNet.EVT_GOOD_NEWS, [response]);
                }
                else {
                    x.trigger(OWebNet.EVT_BAD_NEWS, [response]);
                    const err = {
                        type: 'error',
                        errType: 'bad_news',
                        ...x.options.errorResponseToDialog(response),
                    };
                    x.trigger(OWebNet.EVT_FAIL, [err]);
                }
            }
            else {
                x.trigger(OWebNet.EVT_HTTP_ERROR, [response]);
                const err = {
                    type: 'error',
                    errType: 'http',
                    ...x.options.errorResponseToDialog(response),
                };
                x.trigger(OWebNet.EVT_FAIL, [err]);
            }
            always();
        };
        xhr.addEventListener('progress', function onDownloadProgress(event) {
            x.trigger(OWebNet.EVT_DOWNLOAD_PROGRESS, [event]);
        });
        xhr.upload.addEventListener('progress', function onUploadProgress(event) {
            x.trigger(OWebNet.EVT_UPLOAD_PROGRESS, [event]);
        });
        xhr.onabort = function onAbort(event) {
            onerror({
                type: 'error',
                errType: 'abort',
                text: 'OW_ERROR_REQUEST_ABORTED',
                data: { event },
            });
        };
        xhr.ontimeout = function onTimeout(event) {
            onerror({
                type: 'error',
                errType: 'timeout',
                text: 'OW_ERROR_REQUEST_TIMED_OUT',
                data: { event },
            });
        };
        xhr.onerror = function onError(event) {
            onerror({
                type: 'error',
                errType: 'network',
                text: 'OZ_ERROR_NETWORK',
                data: { event },
            });
        };
        this._abort = () => {
            xhr && xhr.abort();
        };
        const url = this.options.params
            ? buildURL(this.url, this.options.params)
            : this.url;
        xhr.open(opt.method.toUpperCase(), url, true);
        forEach(opt.headers, function requestHeaderIterator(value, header) {
            xhr.setRequestHeader(header, value);
        });
        return new Promise(function xhrPromiseExecutor(resolve, reject) {
            x.onGoodNews((response) => resolve(response)).onFail((err) => reject(err));
            x._sent = true;
            xhr.send(body);
        });
    }
    abort() {
        this._abort && this._abort();
        return this;
    }
    requestBody(body) {
        if (body === null || typeof body === 'undefined') {
            return null;
        }
        if (body instanceof URLSearchParams) {
            setOrIgnoreIfExists(this.options.headers, 'Content-Type', 'application/x-www-form-urlencoded;charset=utf-8');
            return body.toString();
        }
        if (isPlainObject(body)) {
            setOrIgnoreIfExists(this.options.headers, 'Content-Type', 'application/json;charset=utf-8');
            return JSON.stringify(body);
        }
        return body;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYlhIUi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9PV2ViWEhSLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sT0FLTixNQUFNLFdBQVcsQ0FBQztBQUNuQixPQUFPLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFM0QsTUFBTSxtQkFBbUIsR0FBRyxTQUFTLG1CQUFtQixDQUN2RCxNQUFXLEVBQ1gsR0FBVyxFQUNYLEtBQVUsRUFDVixhQUFhLEdBQUcsS0FBSztJQUVyQixJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxhQUFhLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUMsRUFBRTtRQUNuRSxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO0tBQ3BCO0FBQ0YsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE9BQU8sT0FBTyxPQUFXLFNBQVEsT0FBVTtJQUN6QyxNQUFNLENBQWM7SUFDcEIsS0FBSyxHQUFHLEtBQUssQ0FBQztJQVF0QixZQUFZLEdBQVcsRUFBRSxPQUF1QztRQUMvRCxLQUFLLENBQUMsR0FBRyxFQUFFO1lBQ1YsTUFBTSxFQUFFLEtBQUs7WUFDYixPQUFPLEVBQUUsQ0FBQztZQUNWLGVBQWUsRUFBRSxLQUFLO1lBQ3RCLFlBQVksRUFBRSxNQUFNO1lBQ3BCLE9BQU8sRUFBRSxFQUFFO1lBQ1gsZUFBZSxFQUFFLENBQUMsTUFBYyxFQUFFLEVBQUUsQ0FBQyxNQUFNLElBQUksR0FBRyxJQUFJLE1BQU0sR0FBRyxHQUFHO1lBQ2xFLFVBQVUsRUFBRSxHQUFHLEVBQUU7Z0JBQ2hCLE9BQU8sSUFBSSxDQUFDO1lBQ2IsQ0FBQztZQUNELHFCQUFxQixFQUFFLEdBQUcsRUFBRTtnQkFDM0IsT0FBTyxFQUFFLElBQUksRUFBRSx5QkFBeUIsRUFBRSxDQUFDO1lBQzVD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RCxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUN4QixtQkFBbUIsQ0FDbEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQ3BCLGNBQWMsRUFDZCxnQ0FBZ0MsQ0FDaEMsQ0FBQztZQUVGLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUM1QjtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE9XZWJOZXQsIHtcblx0T05ldEVycm9yLFxuXHRPTmV0UmVxdWVzdE9wdGlvbnMsXG5cdE9OZXRSZXNwb25zZSxcblx0T05ldFJlcXVlc3RCb2R5LFxufSBmcm9tICcuL09XZWJOZXQnO1xuaW1wb3J0IHsgYnVpbGRVUkwsIGZvckVhY2gsIGlzUGxhaW5PYmplY3QgfSBmcm9tICcuL3V0aWxzJztcblxuY29uc3Qgc2V0T3JJZ25vcmVJZkV4aXN0cyA9IGZ1bmN0aW9uIHNldE9ySWdub3JlSWZFeGlzdHMoXG5cdHRhcmdldDogYW55LFxuXHRrZXk6IHN0cmluZyxcblx0dmFsdWU6IGFueSxcblx0Y2FzZVNlbnNpdGl2ZSA9IGZhbHNlXG4pIHtcblx0aWYgKCF0YXJnZXRba2V5XSAmJiAoIWNhc2VTZW5zaXRpdmUgfHwgIXRhcmdldFtrZXkudG9VcHBlckNhc2UoKV0pKSB7XG5cdFx0dGFyZ2V0W2tleV0gPSB2YWx1ZTtcblx0fVxufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT1dlYlhIUjxUPiBleHRlbmRzIE9XZWJOZXQ8VD4ge1xuXHRwcml2YXRlIF9hYm9ydD86ICgpID0+IHZvaWQ7XG5cdHByaXZhdGUgX3NlbnQgPSBmYWxzZTtcblxuXHQvKipcblx0ICogT1dlYlhIUiBjb25zdHJ1Y3Rvci5cblx0ICpcblx0ICogQHBhcmFtIHVybFxuXHQgKiBAcGFyYW0gb3B0aW9uc1xuXHQgKi9cblx0Y29uc3RydWN0b3IodXJsOiBzdHJpbmcsIG9wdGlvbnM6IFBhcnRpYWw8T05ldFJlcXVlc3RPcHRpb25zPFQ+Pikge1xuXHRcdHN1cGVyKHVybCwge1xuXHRcdFx0bWV0aG9kOiAnZ2V0Jyxcblx0XHRcdHRpbWVvdXQ6IDAsXG5cdFx0XHR3aXRoQ3JlZGVudGlhbHM6IGZhbHNlLFxuXHRcdFx0cmVzcG9uc2VUeXBlOiAnanNvbicsXG5cdFx0XHRoZWFkZXJzOiB7fSxcblx0XHRcdGlzU3VjY2Vzc1N0YXR1czogKHN0YXR1czogbnVtYmVyKSA9PiBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCxcblx0XHRcdGlzR29vZE5ld3M6ICgpID0+IHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9LFxuXHRcdFx0ZXJyb3JSZXNwb25zZVRvRGlhbG9nOiAoKSA9PiB7XG5cdFx0XHRcdHJldHVybiB7IHRleHQ6ICdPV19FUlJPUl9SRVFVRVNUX0ZBSUxFRCcgfTtcblx0XHRcdH0sXG5cdFx0XHQuLi5vcHRpb25zLFxuXHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRpc1NlbnQoKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIHRoaXMuX3NlbnQ7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHNlbmQoKTogUHJvbWlzZTxPTmV0UmVzcG9uc2U8VD4+IHtcblx0XHR0aGlzLmFzc2VydE5vdFNlbnQoJ1tPV2ViWEhSXSByZXF1ZXN0IGlzIGFscmVhZHkgc2VudC4nKTtcblxuXHRcdGxldCB4ID0gdGhpcyxcblx0XHRcdHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXHRcdGNvbnN0IG9wdCA9IHgub3B0aW9ucyxcblx0XHRcdGFsd2F5cyA9ICgpID0+IHtcblx0XHRcdFx0eC50cmlnZ2VyKE9XZWJOZXQuRVZUX0ZJTklTSCk7XG5cdFx0XHRcdHhociA9IHggPSBudWxsIGFzIGFueTtcblx0XHRcdH0sXG5cdFx0XHRvbmVycm9yID0gKGVycjogT05ldEVycm9yKSA9PiB7XG5cdFx0XHRcdHgudHJpZ2dlcihPV2ViTmV0LkVWVF9FUlJPUiwgW2Vycl0pO1xuXHRcdFx0XHR4LnRyaWdnZXIoT1dlYk5ldC5FVlRfRkFJTCwgW2Vycl0pO1xuXHRcdFx0XHRhbHdheXMoKTtcblx0XHRcdH0sXG5cdFx0XHRib2R5ID0gdGhpcy5yZXF1ZXN0Qm9keShvcHQuYm9keSk7XG5cblx0XHR4aHIudGltZW91dCA9IG9wdC50aW1lb3V0O1xuXG5cdFx0c2V0T3JJZ25vcmVJZkV4aXN0cyhcblx0XHRcdG9wdC5oZWFkZXJzLFxuXHRcdFx0J0FjY2VwdCcsXG5cdFx0XHQnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuXHRcdCk7XG5cblx0XHR4aHIud2l0aENyZWRlbnRpYWxzID0gb3B0LndpdGhDcmVkZW50aWFscztcblxuXHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbiBvblJlYWR5U3RhdGVDaGFuZ2UoKSB7XG5cdFx0XHRpZiAoIXhociB8fCB4aHIucmVhZHlTdGF0ZSAhPT0gNCkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSByZXF1ZXN0IGVycm9yZWQgb3V0IGFuZCB3ZSBkaWRuJ3QgZ2V0IGEgcmVzcG9uc2UsIHRoaXMgd2lsbCBiZVxuXHRcdFx0Ly8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcblx0XHRcdC8vIFdpdGggb25lIGV4Y2VwdGlvbjogcmVxdWVzdCB0aGF0IHVzaW5nIGZpbGU6IHByb3RvY29sLCBtb3N0IGJyb3dzZXJzXG5cdFx0XHQvLyB3aWxsIHJldHVybiBzdGF0dXMgYXMgMCBldmVuIHRob3VnaCBpdCdzIGEgc3VjY2Vzc2Z1bCByZXF1ZXN0XG5cdFx0XHRpZiAoXG5cdFx0XHRcdHhoci5zdGF0dXMgPT09IDAgJiZcblx0XHRcdFx0ISh4aHIucmVzcG9uc2VVUkwgJiYgeGhyLnJlc3BvbnNlVVJMLmluZGV4T2YoJ2ZpbGU6JykgPT09IDApXG5cdFx0XHQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCByZXNwb25zZVJhdyA9XG5cdFx0XHRcdHhocltcblx0XHRcdFx0XHQoeGhyLnJlc3BvbnNlVHlwZSB8fCAndGV4dCcpID09PSAndGV4dCcgPyAncmVzcG9uc2VUZXh0JyA6ICdyZXNwb25zZSdcblx0XHRcdFx0XTtcblxuXHRcdFx0bGV0IGpzb24gPSBudWxsIGFzIGFueTtcblxuXHRcdFx0aWYgKHR5cGVvZiByZXNwb25zZVJhdyA9PT0gJ3N0cmluZycpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRqc29uID0gSlNPTi5wYXJzZShyZXNwb25zZVJhdyk7XG5cdFx0XHRcdFx0Ly8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG5cdFx0XHRcdH0gY2F0Y2ggKGUpIHt9XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IHJlc3BvbnNlOiBPTmV0UmVzcG9uc2U8VD4gPSB7XG5cdFx0XHRcdGlzU3VjY2Vzc1N0YXR1czogb3B0LmlzU3VjY2Vzc1N0YXR1cyh4aHIuc3RhdHVzKSxcblx0XHRcdFx0aXNHb29kTmV3czogb3B0LmlzR29vZE5ld3MoanNvbiksXG5cdFx0XHRcdHJhdzogcmVzcG9uc2VSYXcsXG5cdFx0XHRcdGpzb24sXG5cdFx0XHRcdHN0YXR1czogeGhyLnN0YXR1cyxcblx0XHRcdFx0c3RhdHVzVGV4dDogeGhyLnN0YXR1c1RleHQsXG5cdFx0XHR9O1xuXG5cdFx0XHR4LnRyaWdnZXIoT1dlYk5ldC5FVlRfUkVTUE9OU0UsIFtyZXNwb25zZV0pO1xuXG5cdFx0XHRpZiAocmVzcG9uc2UuaXNTdWNjZXNzU3RhdHVzKSB7XG5cdFx0XHRcdHgudHJpZ2dlcihPV2ViTmV0LkVWVF9IVFRQX1NVQ0NFU1MsIFtyZXNwb25zZV0pO1xuXG5cdFx0XHRcdGlmIChyZXNwb25zZS5pc0dvb2ROZXdzKSB7XG5cdFx0XHRcdFx0eC50cmlnZ2VyKE9XZWJOZXQuRVZUX0dPT0RfTkVXUywgW3Jlc3BvbnNlXSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eC50cmlnZ2VyKE9XZWJOZXQuRVZUX0JBRF9ORVdTLCBbcmVzcG9uc2VdKTtcblx0XHRcdFx0XHRjb25zdCBlcnI6IE9OZXRFcnJvciA9IHtcblx0XHRcdFx0XHRcdHR5cGU6ICdlcnJvcicsXG5cdFx0XHRcdFx0XHRlcnJUeXBlOiAnYmFkX25ld3MnLFxuXHRcdFx0XHRcdFx0Li4ueC5vcHRpb25zLmVycm9yUmVzcG9uc2VUb0RpYWxvZyhyZXNwb25zZSksXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR4LnRyaWdnZXIoT1dlYk5ldC5FVlRfRkFJTCwgW2Vycl0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR4LnRyaWdnZXIoT1dlYk5ldC5FVlRfSFRUUF9FUlJPUiwgW3Jlc3BvbnNlXSk7XG5cdFx0XHRcdGNvbnN0IGVycjogT05ldEVycm9yID0ge1xuXHRcdFx0XHRcdHR5cGU6ICdlcnJvcicsXG5cdFx0XHRcdFx0ZXJyVHlwZTogJ2h0dHAnLFxuXHRcdFx0XHRcdC4uLngub3B0aW9ucy5lcnJvclJlc3BvbnNlVG9EaWFsb2cocmVzcG9uc2UpLFxuXHRcdFx0XHR9O1xuXHRcdFx0XHR4LnRyaWdnZXIoT1dlYk5ldC5FVlRfRkFJTCwgW2Vycl0pO1xuXHRcdFx0fVxuXG5cdFx0XHRhbHdheXMoKTtcblx0XHR9O1xuXG5cdFx0eGhyLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgZnVuY3Rpb24gb25Eb3dubG9hZFByb2dyZXNzKGV2ZW50KSB7XG5cdFx0XHQvLyByZXBvcnQgZG93bmxvYWQgcHJvZ3Jlc3Ncblx0XHRcdHgudHJpZ2dlcihPV2ViTmV0LkVWVF9ET1dOTE9BRF9QUk9HUkVTUywgW2V2ZW50XSk7XG5cdFx0fSk7XG5cblx0XHR4aHIudXBsb2FkLmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgZnVuY3Rpb24gb25VcGxvYWRQcm9ncmVzcyhldmVudCkge1xuXHRcdFx0Ly8gcmVwb3J0IHVwbG9hZCBwcm9ncmVzc1xuXHRcdFx0eC50cmlnZ2VyKE9XZWJOZXQuRVZUX1VQTE9BRF9QUk9HUkVTUywgW2V2ZW50XSk7XG5cdFx0fSk7XG5cblx0XHR4aHIub25hYm9ydCA9IGZ1bmN0aW9uIG9uQWJvcnQoZXZlbnQpIHtcblx0XHRcdG9uZXJyb3Ioe1xuXHRcdFx0XHR0eXBlOiAnZXJyb3InLFxuXHRcdFx0XHRlcnJUeXBlOiAnYWJvcnQnLFxuXHRcdFx0XHR0ZXh0OiAnT1dfRVJST1JfUkVRVUVTVF9BQk9SVEVEJyxcblx0XHRcdFx0ZGF0YTogeyBldmVudCB9LFxuXHRcdFx0fSk7XG5cdFx0fTtcblxuXHRcdHhoci5vbnRpbWVvdXQgPSBmdW5jdGlvbiBvblRpbWVvdXQoZXZlbnQpIHtcblx0XHRcdG9uZXJyb3Ioe1xuXHRcdFx0XHR0eXBlOiAnZXJyb3InLFxuXHRcdFx0XHRlcnJUeXBlOiAndGltZW91dCcsXG5cdFx0XHRcdHRleHQ6ICdPV19FUlJPUl9SRVFVRVNUX1RJTUVEX09VVCcsXG5cdFx0XHRcdGRhdGE6IHsgZXZlbnQgfSxcblx0XHRcdH0pO1xuXHRcdH07XG5cblx0XHR4aHIub25lcnJvciA9IGZ1bmN0aW9uIG9uRXJyb3IoZXZlbnQpIHtcblx0XHRcdC8vIGhhbmRsZSBub24tSFRUUCBlcnJvciAoZS5nLiBuZXR3b3JrIGRvd24pXG5cdFx0XHRvbmVycm9yKHtcblx0XHRcdFx0dHlwZTogJ2Vycm9yJyxcblx0XHRcdFx0ZXJyVHlwZTogJ25ldHdvcmsnLFxuXHRcdFx0XHR0ZXh0OiAnT1pfRVJST1JfTkVUV09SSycsXG5cdFx0XHRcdGRhdGE6IHsgZXZlbnQgfSxcblx0XHRcdH0pO1xuXHRcdH07XG5cblx0XHR0aGlzLl9hYm9ydCA9ICgpID0+IHtcblx0XHRcdHhociAmJiB4aHIuYWJvcnQoKTtcblx0XHR9O1xuXG5cdFx0Y29uc3QgdXJsID0gdGhpcy5vcHRpb25zLnBhcmFtc1xuXHRcdFx0PyBidWlsZFVSTCh0aGlzLnVybCwgdGhpcy5vcHRpb25zLnBhcmFtcylcblx0XHRcdDogdGhpcy51cmw7XG5cblx0XHR4aHIub3BlbihvcHQubWV0aG9kLnRvVXBwZXJDYXNlKCksIHVybCwgdHJ1ZSk7XG5cblx0XHRmb3JFYWNoKG9wdC5oZWFkZXJzLCBmdW5jdGlvbiByZXF1ZXN0SGVhZGVySXRlcmF0b3IodmFsdWUsIGhlYWRlcikge1xuXHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoaGVhZGVyLCB2YWx1ZSk7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gbmV3IFByb21pc2U8T05ldFJlc3BvbnNlPFQ+PihmdW5jdGlvbiB4aHJQcm9taXNlRXhlY3V0b3IoXG5cdFx0XHRyZXNvbHZlOiAocmVzcG9uc2U6IE9OZXRSZXNwb25zZTxUPikgPT4gdm9pZCxcblx0XHRcdHJlamVjdDogKGVycm9yOiBPTmV0RXJyb3IpID0+IHZvaWRcblx0XHQpIHtcblx0XHRcdHgub25Hb29kTmV3cygocmVzcG9uc2UpID0+IHJlc29sdmUocmVzcG9uc2UpKS5vbkZhaWwoKGVycikgPT5cblx0XHRcdFx0cmVqZWN0KGVycilcblx0XHRcdCk7XG5cblx0XHRcdHguX3NlbnQgPSB0cnVlO1xuXHRcdFx0eGhyLnNlbmQoYm9keSk7XG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdGFib3J0KCk6IHRoaXMge1xuXHRcdHRoaXMuX2Fib3J0ICYmIHRoaXMuX2Fib3J0KCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHQvKipcblx0ICogQnVpbGRzIHRoZSByZXF1ZXN0IGJvZHkuXG5cdCAqXG5cdCAqIEBwYXJhbSBib2R5XG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRwcml2YXRlIHJlcXVlc3RCb2R5KGJvZHk6IE9OZXRSZXF1ZXN0Qm9keSk6IGFueSB7XG5cdFx0aWYgKGJvZHkgPT09IG51bGwgfHwgdHlwZW9mIGJvZHkgPT09ICd1bmRlZmluZWQnKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cblx0XHRpZiAoYm9keSBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcykge1xuXHRcdFx0c2V0T3JJZ25vcmVJZkV4aXN0cyhcblx0XHRcdFx0dGhpcy5vcHRpb25zLmhlYWRlcnMsXG5cdFx0XHRcdCdDb250ZW50LVR5cGUnLFxuXHRcdFx0XHQnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9dXRmLTgnXG5cdFx0XHQpO1xuXG5cdFx0XHRyZXR1cm4gYm9keS50b1N0cmluZygpO1xuXHRcdH1cblxuXHRcdGlmIChpc1BsYWluT2JqZWN0KGJvZHkpKSB7XG5cdFx0XHRzZXRPcklnbm9yZUlmRXhpc3RzKFxuXHRcdFx0XHR0aGlzLm9wdGlvbnMuaGVhZGVycyxcblx0XHRcdFx0J0NvbnRlbnQtVHlwZScsXG5cdFx0XHRcdCdhcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTgnXG5cdFx0XHQpO1xuXG5cdFx0XHRyZXR1cm4gSlNPTi5zdHJpbmdpZnkoYm9keSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGJvZHk7XG5cdH1cbn1cbiJdfQ==