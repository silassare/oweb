import OWebNet from './OWebNet';
import { forEach } from './utils';
const setOrIgnoreIfExists = function (target, key, value, caseSensitive = false) {
    if (!target[key] && (!caseSensitive || !target[key.toUpperCase()])) {
        target[key] = value;
    }
};
export default class OWebXHR extends OWebNet {
    constructor(url, options) {
        super(url, {
            method: 'get',
            timeout: 0,
            withCredentials: false,
            responseType: 'json',
            headers: {},
            isSuccessStatus: (status) => status >= 200 && status < 300,
            isGoodNews: (response) => {
                return true;
            },
            ...options,
        });
        this._sent = false;
    }
    _assertNotSent() {
        if (this._sent) {
            throw Error('[OWebXHR] request is already sent.');
        }
    }
    promise() {
        this._assertNotSent();
        const x = this;
        return new Promise(function (resolve, reject) {
            x.onResponse((response) => resolve(response))
                .onError((err) => reject(err))
                .send();
        });
    }
    send() {
        this._assertNotSent();
        this._sent = true;
        let x = this, xhr = new XMLHttpRequest();
        const opt = x.options, always = () => {
            x.trigger(OWebNet.EVT_FINISHED);
            xhr = x = null;
        }, onerror = (err) => {
            x.trigger(OWebNet.EVT_ERROR, [err]);
            always();
        }, body = this.requestBody(opt.body);
        xhr.timeout = opt.timeout;
        setOrIgnoreIfExists(opt.headers, 'Accept', 'application/json, text/plain, */*');
        xhr.withCredentials = opt.withCredentials;
        xhr.onreadystatechange = function () {
            if (!xhr || xhr.readyState !== 4) {
                return;
            }
            // The request errored out and we didn't get a response, this will be
            // handled by onerror instead
            // With one exception: request that using file: protocol, most browsers
            // will return status as 0 even though it's a successful request
            if (xhr.status === 0 &&
                !(xhr.responseURL && xhr.responseURL.indexOf('file:') === 0)) {
                return;
            }
            const responseRaw = xhr[(xhr.responseType || 'text') === 'text'
                ? 'responseText'
                : 'response'];
            const response = {
                raw: responseRaw,
                json: null,
                status: xhr.status,
                statusText: xhr.statusText,
            };
            if (typeof responseRaw === 'string') {
                try {
                    response.json = JSON.parse(responseRaw);
                    // tslint:disable-next-line: no-empty
                }
                catch (e) { }
            }
            x.trigger(OWebNet.EVT_RESPONSE, [response]);
            if (opt.isSuccessStatus(xhr.status)) {
                x.trigger(OWebNet.EVT_HTTP_SUCCESS, [response]);
                if (opt.isGoodNews(response)) {
                    x.trigger(OWebNet.EVT_GOOD_NEWS, [response]);
                }
                else {
                    x.trigger(OWebNet.EVT_BAD_NEWS, [response]);
                }
            }
            else {
                x.trigger(OWebNet.EVT_HTTP_ERROR, [response]);
            }
            always();
        };
        xhr.addEventListener('progress', function (event) {
            // report download progress
            x.trigger(OWebNet.EVT_DOWNLOAD_PROGRESS, [event]);
        });
        xhr.upload.addEventListener('progress', function (event) {
            // report upload progress
            x.trigger(OWebNet.EVT_UPLOAD_PROGRESS, [event]);
        });
        xhr.onabort = function (event) {
            onerror({ type: 'abort', event });
        };
        xhr.ontimeout = function (event) {
            onerror({ type: 'timeout', event });
        };
        xhr.onerror = function (event) {
            // handle non-HTTP error (e.g. network down)
            onerror({ type: 'network', event });
        };
        this._abort = () => {
            xhr && xhr.abort();
        };
        xhr.open(opt.method.toUpperCase(), this.url, true);
        forEach(opt.headers, function (value, header) {
            xhr.setRequestHeader(header, value);
        });
        xhr.send(body);
        return this;
    }
    abort() {
        this._abort && this._abort();
        return this;
    }
    requestBody(body) {
        let type;
        // tslint:disable-next-line: no-conditional-assignment
        if (body === null || (type = typeof body) === 'undefined') {
            return null;
        }
        if (type === 'object') {
            setOrIgnoreIfExists(this.options.headers, 'Content-Type', 'application/json;charset=utf-8');
            return JSON.stringify(body);
        }
        if (body instanceof URLSearchParams) {
            setOrIgnoreIfExists(this.options.headers, 'Content-Type', 'application/x-www-form-urlencoded;charset=utf-8');
            return body.toString();
        }
        return body;
    }
}
//# sourceMappingURL=data:application/json;base64,