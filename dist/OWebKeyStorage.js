"use strict";
import OWebEvent from "./OWebEvent";
import OWebDataStore from "./OWebDataStore";
import Utils from "./utils/Utils";
let _hasExpired = (data) => {
    let now = Date.now(), expire = data["expire"];
    return expire != -1 && now <= expire;
};
export default class OWebKeyStorage extends OWebEvent {
    constructor(app_context, tag, persistent = true, max_life_time = Infinity) {
        super();
        this.app_context = app_context;
        this.persistent = persistent;
        this._tag_name = app_context.getAppName() + ":" + tag;
        this._store = OWebDataStore.load(this._tag_name) || {};
        this._max_life_time = max_life_time * 1000;
        this._clearExpired();
    }
    getStoreData() {
        let items = {};
        this._clearExpired();
        Utils.forEach(this._store, (data, key) => {
            items[key] = data["value"];
        });
        return items;
    }
    getItem(key) {
        let data = this._store[key];
        if (data !== undefined) {
            data = _hasExpired(data) ? this.removeItem(key) && undefined : data["value"];
        }
        return data;
    }
    setItem(key, value) {
        this._store[key] = {
            "value": value,
            "expire": this._max_life_time === Infinity ? -1 : Date.now() + this._max_life_time
        };
        return this.save();
    }
    removeItem(key) {
        if (key in this._store) {
            delete this._store[key];
        }
        return this.save();
    }
    save() {
        if (this.persistent) {
            OWebDataStore.save(this._tag_name, this._store);
        }
        return this;
    }
    clear() {
        this._store = {};
        return this.save();
    }
    _clearExpired() {
        let s = this, modified = false;
        Utils.forEach(this._store, (data, key) => {
            if (_hasExpired(data)) {
                modified = true;
                delete s._store[key];
            }
        });
        modified && this.save();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYktleVN0b3JhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvT1dlYktleVN0b3JhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWSxDQUFDO0FBRWIsT0FBTyxTQUFTLE1BQU0sYUFBYSxDQUFDO0FBRXBDLE9BQU8sYUFBYSxNQUFNLGlCQUFpQixDQUFDO0FBQzVDLE9BQU8sS0FBSyxNQUFNLGVBQWUsQ0FBQztBQU9sQyxJQUFJLFdBQVcsR0FBRyxDQUFDLElBQWMsRUFBVyxFQUFFO0lBQzdDLElBQUksR0FBRyxHQUFNLElBQUksQ0FBQyxHQUFHLEVBQUUsRUFDdEIsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN6QixPQUFPLE1BQU0sSUFBSSxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksTUFBTSxDQUFDO0FBQ3RDLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxPQUFPLHFCQUFzQixTQUFRLFNBQVM7SUFLcEQsWUFBNkIsV0FBb0IsRUFBRSxHQUFXLEVBQVUsYUFBc0IsSUFBSSxFQUFFLGdCQUF3QixRQUFRO1FBQ25JLEtBQUssRUFBRSxDQUFDO1FBRG9CLGdCQUFXLEdBQVgsV0FBVyxDQUFTO1FBQXVCLGVBQVUsR0FBVixVQUFVLENBQWdCO1FBR2pHLElBQUksQ0FBQyxTQUFTLEdBQVEsV0FBVyxDQUFDLFVBQVUsRUFBRSxHQUFHLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFDM0QsSUFBSSxDQUFDLE1BQU0sR0FBVyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDL0QsSUFBSSxDQUFDLGNBQWMsR0FBRyxhQUFhLEdBQUcsSUFBSSxDQUFDO1FBRTNDLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRUQsWUFBWTtRQUNYLElBQUksS0FBSyxHQUFRLEVBQUUsQ0FBQztRQUVwQixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFFckIsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQ3hDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDNUIsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLEtBQUssQ0FBQztJQUNkLENBQUM7SUFFRCxPQUFPLENBQUMsR0FBVztRQUNsQixJQUFJLElBQUksR0FBYSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXRDLElBQUksSUFBSSxLQUFLLFNBQVMsRUFBRTtZQUN2QixJQUFJLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzdFO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDYixDQUFDO0lBRUQsT0FBTyxDQUFDLEdBQVcsRUFBRSxLQUFVO1FBQzlCLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUc7WUFDbEIsT0FBTyxFQUFHLEtBQUs7WUFDZixRQUFRLEVBQUUsSUFBSSxDQUFDLGNBQWMsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLGNBQWM7U0FDbEYsQ0FBQztRQUVGLE9BQU8sSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFRCxVQUFVLENBQUMsR0FBVztRQUNyQixJQUFJLEdBQUcsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ3ZCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUN4QjtRQUVELE9BQU8sSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFTyxJQUFJO1FBQ1gsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ3BCLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDaEQ7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFRCxLQUFLO1FBQ0osSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7UUFDakIsT0FBTyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVPLGFBQWE7UUFDcEIsSUFBSSxDQUFDLEdBQUcsSUFBSSxFQUFFLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDL0IsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQ3hDLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUN0QixRQUFRLEdBQUcsSUFBSSxDQUFDO2dCQUNoQixPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDckI7UUFDRixDQUFDLENBQUMsQ0FBQztRQUVILFFBQVEsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDekIsQ0FBQztDQUNEIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCBPV2ViRXZlbnQgZnJvbSBcIi4vT1dlYkV2ZW50XCI7XG5pbXBvcnQgT1dlYkFwcCBmcm9tIFwiLi9PV2ViQXBwXCI7XG5pbXBvcnQgT1dlYkRhdGFTdG9yZSBmcm9tIFwiLi9PV2ViRGF0YVN0b3JlXCI7XG5pbXBvcnQgVXRpbHMgZnJvbSBcIi4vdXRpbHMvVXRpbHNcIjtcblxudHlwZSB0S2V5RGF0YSA9IHtcblx0dmFsdWU6IGFueSxcblx0ZXhwaXJlOiBudW1iZXIsXG59O1xuXG5sZXQgX2hhc0V4cGlyZWQgPSAoZGF0YTogdEtleURhdGEpOiBib29sZWFuID0+IHtcblx0bGV0IG5vdyAgICA9IERhdGUubm93KCksXG5cdFx0ZXhwaXJlID0gZGF0YVtcImV4cGlyZVwiXTtcblx0cmV0dXJuIGV4cGlyZSAhPSAtMSAmJiBub3cgPD0gZXhwaXJlO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT1dlYktleVN0b3JhZ2UgZXh0ZW5kcyBPV2ViRXZlbnQge1xuXHRwcml2YXRlIHJlYWRvbmx5IF90YWdfbmFtZTogc3RyaW5nO1xuXHRwcml2YXRlIHJlYWRvbmx5IF9tYXhfbGlmZV90aW1lOiBudW1iZXI7XG5cdHByaXZhdGUgX3N0b3JlOiB7IFtrZXk6IHN0cmluZ106IHRLZXlEYXRhIH07XG5cblx0Y29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBhcHBfY29udGV4dDogT1dlYkFwcCwgdGFnOiBzdHJpbmcsIHByaXZhdGUgcGVyc2lzdGVudDogYm9vbGVhbiA9IHRydWUsIG1heF9saWZlX3RpbWU6IG51bWJlciA9IEluZmluaXR5KSB7XG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuX3RhZ19uYW1lICAgICAgPSBhcHBfY29udGV4dC5nZXRBcHBOYW1lKCkgKyBcIjpcIiArIHRhZztcblx0XHR0aGlzLl9zdG9yZSAgICAgICAgID0gT1dlYkRhdGFTdG9yZS5sb2FkKHRoaXMuX3RhZ19uYW1lKSB8fCB7fTtcblx0XHR0aGlzLl9tYXhfbGlmZV90aW1lID0gbWF4X2xpZmVfdGltZSAqIDEwMDA7XG5cblx0XHR0aGlzLl9jbGVhckV4cGlyZWQoKTtcblx0fVxuXG5cdGdldFN0b3JlRGF0YSgpOiB7fSB7XG5cdFx0bGV0IGl0ZW1zOiBhbnkgPSB7fTtcblxuXHRcdHRoaXMuX2NsZWFyRXhwaXJlZCgpO1xuXG5cdFx0VXRpbHMuZm9yRWFjaCh0aGlzLl9zdG9yZSwgKGRhdGEsIGtleSkgPT4ge1xuXHRcdFx0aXRlbXNba2V5XSA9IGRhdGFbXCJ2YWx1ZVwiXTtcblx0XHR9KTtcblxuXHRcdHJldHVybiBpdGVtcztcblx0fVxuXG5cdGdldEl0ZW0oa2V5OiBzdHJpbmcpOiBhbnkge1xuXHRcdGxldCBkYXRhOiB0S2V5RGF0YSA9IHRoaXMuX3N0b3JlW2tleV07XG5cblx0XHRpZiAoZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRkYXRhID0gX2hhc0V4cGlyZWQoZGF0YSkgPyB0aGlzLnJlbW92ZUl0ZW0oa2V5KSAmJiB1bmRlZmluZWQgOiBkYXRhW1widmFsdWVcIl07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cdH1cblxuXHRzZXRJdGVtKGtleTogc3RyaW5nLCB2YWx1ZTogYW55KTogdGhpcyB7XG5cdFx0dGhpcy5fc3RvcmVba2V5XSA9IHtcblx0XHRcdFwidmFsdWVcIiA6IHZhbHVlLFxuXHRcdFx0XCJleHBpcmVcIjogdGhpcy5fbWF4X2xpZmVfdGltZSA9PT0gSW5maW5pdHkgPyAtMSA6IERhdGUubm93KCkgKyB0aGlzLl9tYXhfbGlmZV90aW1lXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnNhdmUoKTtcblx0fVxuXG5cdHJlbW92ZUl0ZW0oa2V5OiBzdHJpbmcpOiB0aGlzIHtcblx0XHRpZiAoa2V5IGluIHRoaXMuX3N0b3JlKSB7XG5cdFx0XHRkZWxldGUgdGhpcy5fc3RvcmVba2V5XTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5zYXZlKCk7XG5cdH1cblxuXHRwcml2YXRlIHNhdmUoKTogdGhpcyB7XG5cdFx0aWYgKHRoaXMucGVyc2lzdGVudCkge1xuXHRcdFx0T1dlYkRhdGFTdG9yZS5zYXZlKHRoaXMuX3RhZ19uYW1lLCB0aGlzLl9zdG9yZSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRjbGVhcigpOiB0aGlzIHtcblx0XHR0aGlzLl9zdG9yZSA9IHt9O1xuXHRcdHJldHVybiB0aGlzLnNhdmUoKTtcblx0fVxuXG5cdHByaXZhdGUgX2NsZWFyRXhwaXJlZCgpIHtcblx0XHRsZXQgcyA9IHRoaXMsIG1vZGlmaWVkID0gZmFsc2U7XG5cdFx0VXRpbHMuZm9yRWFjaCh0aGlzLl9zdG9yZSwgKGRhdGEsIGtleSkgPT4ge1xuXHRcdFx0aWYgKF9oYXNFeHBpcmVkKGRhdGEpKSB7XG5cdFx0XHRcdG1vZGlmaWVkID0gdHJ1ZTtcblx0XHRcdFx0ZGVsZXRlIHMuX3N0b3JlW2tleV07XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRtb2RpZmllZCAmJiB0aGlzLnNhdmUoKTtcblx0fVxufVxuIl19