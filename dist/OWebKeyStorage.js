import { OWebEvent, OWebDataStore, Utils } from "./oweb";
let _hasExpired = (data) => {
    let now = Date.now(), expire = data["expire"];
    return expire != -1 && now <= expire;
};
export default class OWebKeyStorage extends OWebEvent {
    constructor(app_context, tag, persistent = true, max_life_time = Infinity) {
        super();
        this.app_context = app_context;
        this.persistent = persistent;
        this._tag_name = app_context.getAppName() + ":" + tag;
        this._store = OWebDataStore.load(this._tag_name) || {};
        this._max_life_time = max_life_time * 1000;
        this._clearExpired();
    }
    getStoreData() {
        let items = {};
        this._clearExpired();
        Utils.forEach(this._store, (data, key) => {
            items[key] = data["value"];
        });
        return items;
    }
    getItem(key) {
        let data = this._store[key];
        if (data !== undefined) {
            data = _hasExpired(data) ? this.removeItem(key) && undefined : data["value"];
        }
        return data;
    }
    setItem(key, value) {
        this._store[key] = {
            "value": value,
            "expire": this._max_life_time === Infinity ? -1 : Date.now() + this._max_life_time
        };
        return this.save();
    }
    removeItem(key) {
        if (key in this._store) {
            delete this._store[key];
        }
        return this.save();
    }
    save() {
        if (this.persistent) {
            OWebDataStore.save(this._tag_name, this._store);
        }
        return this;
    }
    clear() {
        this._store = {};
        return this.save();
    }
    _clearExpired() {
        let s = this, modified = false;
        Utils.forEach(this._store, (data, key) => {
            if (_hasExpired(data)) {
                modified = true;
                delete s._store[key];
            }
        });
        modified && this.save();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiT1dlYktleVN0b3JhZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvT1dlYktleVN0b3JhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFVLFNBQVMsRUFBRSxhQUFhLEVBQUUsS0FBSyxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBT2hFLElBQUksV0FBVyxHQUFHLENBQUMsSUFBYyxFQUFXLEVBQUU7SUFDN0MsSUFBSSxHQUFHLEdBQU0sSUFBSSxDQUFDLEdBQUcsRUFBRSxFQUN0QixNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3pCLE9BQU8sTUFBTSxJQUFJLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxNQUFNLENBQUM7QUFDdEMsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE9BQU8scUJBQXNCLFNBQVEsU0FBUztJQUtwRCxZQUE2QixXQUFvQixFQUFFLEdBQVcsRUFBVSxhQUFzQixJQUFJLEVBQUUsZ0JBQXdCLFFBQVE7UUFDbkksS0FBSyxFQUFFLENBQUM7UUFEb0IsZ0JBQVcsR0FBWCxXQUFXLENBQVM7UUFBdUIsZUFBVSxHQUFWLFVBQVUsQ0FBZ0I7UUFHakcsSUFBSSxDQUFDLFNBQVMsR0FBUSxXQUFXLENBQUMsVUFBVSxFQUFFLEdBQUcsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUMzRCxJQUFJLENBQUMsTUFBTSxHQUFXLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUMvRCxJQUFJLENBQUMsY0FBYyxHQUFHLGFBQWEsR0FBRyxJQUFJLENBQUM7UUFFM0MsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFRCxZQUFZO1FBQ1gsSUFBSSxLQUFLLEdBQVEsRUFBRSxDQUFDO1FBRXBCLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUVyQixLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDeEMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM1QixDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sS0FBSyxDQUFDO0lBQ2QsQ0FBQztJQUVELE9BQU8sQ0FBQyxHQUFXO1FBQ2xCLElBQUksSUFBSSxHQUFhLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFdEMsSUFBSSxJQUFJLEtBQUssU0FBUyxFQUFFO1lBQ3ZCLElBQUksR0FBRyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLElBQUksU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDN0U7UUFFRCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFFRCxPQUFPLENBQUMsR0FBVyxFQUFFLEtBQVU7UUFDOUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRztZQUNsQixPQUFPLEVBQUcsS0FBSztZQUNmLFFBQVEsRUFBRSxJQUFJLENBQUMsY0FBYyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsY0FBYztTQUNsRixDQUFDO1FBRUYsT0FBTyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVELFVBQVUsQ0FBQyxHQUFXO1FBQ3JCLElBQUksR0FBRyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDdkIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3hCO1FBRUQsT0FBTyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDcEIsQ0FBQztJQUVPLElBQUk7UUFDWCxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDcEIsYUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNoRDtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQUVELEtBQUs7UUFDSixJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztRQUNqQixPQUFPLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBRU8sYUFBYTtRQUNwQixJQUFJLENBQUMsR0FBRyxJQUFJLEVBQUUsUUFBUSxHQUFHLEtBQUssQ0FBQztRQUMvQixLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDeEMsSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3RCLFFBQVEsR0FBRyxJQUFJLENBQUM7Z0JBQ2hCLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNyQjtRQUNGLENBQUMsQ0FBQyxDQUFDO1FBRUgsUUFBUSxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN6QixDQUFDO0NBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge09XZWJBcHAsIE9XZWJFdmVudCwgT1dlYkRhdGFTdG9yZSwgVXRpbHN9IGZyb20gXCIuL293ZWJcIjtcblxudHlwZSB0S2V5RGF0YSA9IHtcblx0dmFsdWU6IGFueSxcblx0ZXhwaXJlOiBudW1iZXIsXG59O1xuXG5sZXQgX2hhc0V4cGlyZWQgPSAoZGF0YTogdEtleURhdGEpOiBib29sZWFuID0+IHtcblx0bGV0IG5vdyAgICA9IERhdGUubm93KCksXG5cdFx0ZXhwaXJlID0gZGF0YVtcImV4cGlyZVwiXTtcblx0cmV0dXJuIGV4cGlyZSAhPSAtMSAmJiBub3cgPD0gZXhwaXJlO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgT1dlYktleVN0b3JhZ2UgZXh0ZW5kcyBPV2ViRXZlbnQge1xuXHRwcml2YXRlIHJlYWRvbmx5IF90YWdfbmFtZTogc3RyaW5nO1xuXHRwcml2YXRlIHJlYWRvbmx5IF9tYXhfbGlmZV90aW1lOiBudW1iZXI7XG5cdHByaXZhdGUgX3N0b3JlOiB7IFtrZXk6IHN0cmluZ106IHRLZXlEYXRhIH07XG5cblx0Y29uc3RydWN0b3IocHJpdmF0ZSByZWFkb25seSBhcHBfY29udGV4dDogT1dlYkFwcCwgdGFnOiBzdHJpbmcsIHByaXZhdGUgcGVyc2lzdGVudDogYm9vbGVhbiA9IHRydWUsIG1heF9saWZlX3RpbWU6IG51bWJlciA9IEluZmluaXR5KSB7XG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuX3RhZ19uYW1lICAgICAgPSBhcHBfY29udGV4dC5nZXRBcHBOYW1lKCkgKyBcIjpcIiArIHRhZztcblx0XHR0aGlzLl9zdG9yZSAgICAgICAgID0gT1dlYkRhdGFTdG9yZS5sb2FkKHRoaXMuX3RhZ19uYW1lKSB8fCB7fTtcblx0XHR0aGlzLl9tYXhfbGlmZV90aW1lID0gbWF4X2xpZmVfdGltZSAqIDEwMDA7XG5cblx0XHR0aGlzLl9jbGVhckV4cGlyZWQoKTtcblx0fVxuXG5cdGdldFN0b3JlRGF0YSgpOiB7fSB7XG5cdFx0bGV0IGl0ZW1zOiBhbnkgPSB7fTtcblxuXHRcdHRoaXMuX2NsZWFyRXhwaXJlZCgpO1xuXG5cdFx0VXRpbHMuZm9yRWFjaCh0aGlzLl9zdG9yZSwgKGRhdGEsIGtleSkgPT4ge1xuXHRcdFx0aXRlbXNba2V5XSA9IGRhdGFbXCJ2YWx1ZVwiXTtcblx0XHR9KTtcblxuXHRcdHJldHVybiBpdGVtcztcblx0fVxuXG5cdGdldEl0ZW0oa2V5OiBzdHJpbmcpOiBhbnkge1xuXHRcdGxldCBkYXRhOiB0S2V5RGF0YSA9IHRoaXMuX3N0b3JlW2tleV07XG5cblx0XHRpZiAoZGF0YSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRkYXRhID0gX2hhc0V4cGlyZWQoZGF0YSkgPyB0aGlzLnJlbW92ZUl0ZW0oa2V5KSAmJiB1bmRlZmluZWQgOiBkYXRhW1widmFsdWVcIl07XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGRhdGE7XG5cdH1cblxuXHRzZXRJdGVtKGtleTogc3RyaW5nLCB2YWx1ZTogYW55KTogdGhpcyB7XG5cdFx0dGhpcy5fc3RvcmVba2V5XSA9IHtcblx0XHRcdFwidmFsdWVcIiA6IHZhbHVlLFxuXHRcdFx0XCJleHBpcmVcIjogdGhpcy5fbWF4X2xpZmVfdGltZSA9PT0gSW5maW5pdHkgPyAtMSA6IERhdGUubm93KCkgKyB0aGlzLl9tYXhfbGlmZV90aW1lXG5cdFx0fTtcblxuXHRcdHJldHVybiB0aGlzLnNhdmUoKTtcblx0fVxuXG5cdHJlbW92ZUl0ZW0oa2V5OiBzdHJpbmcpOiB0aGlzIHtcblx0XHRpZiAoa2V5IGluIHRoaXMuX3N0b3JlKSB7XG5cdFx0XHRkZWxldGUgdGhpcy5fc3RvcmVba2V5XTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5zYXZlKCk7XG5cdH1cblxuXHRwcml2YXRlIHNhdmUoKTogdGhpcyB7XG5cdFx0aWYgKHRoaXMucGVyc2lzdGVudCkge1xuXHRcdFx0T1dlYkRhdGFTdG9yZS5zYXZlKHRoaXMuX3RhZ19uYW1lLCB0aGlzLl9zdG9yZSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cblxuXHRjbGVhcigpOiB0aGlzIHtcblx0XHR0aGlzLl9zdG9yZSA9IHt9O1xuXHRcdHJldHVybiB0aGlzLnNhdmUoKTtcblx0fVxuXG5cdHByaXZhdGUgX2NsZWFyRXhwaXJlZCgpIHtcblx0XHRsZXQgcyA9IHRoaXMsIG1vZGlmaWVkID0gZmFsc2U7XG5cdFx0VXRpbHMuZm9yRWFjaCh0aGlzLl9zdG9yZSwgKGRhdGEsIGtleSkgPT4ge1xuXHRcdFx0aWYgKF9oYXNFeHBpcmVkKGRhdGEpKSB7XG5cdFx0XHRcdG1vZGlmaWVkID0gdHJ1ZTtcblx0XHRcdFx0ZGVsZXRlIHMuX3N0b3JlW2tleV07XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRtb2RpZmllZCAmJiB0aGlzLnNhdmUoKTtcblx0fVxufVxuIl19